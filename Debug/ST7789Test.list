
ST7789Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031e8  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  080033c0  080033c0  000043c0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080033f4  080033f4  00005010  2**0
                  CONTENTS
  4 .ARM          00000000  080033f4  080033f4  00005010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080033f4  080033f4  00005010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033f4  080033f4  000043f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080033f8  080033f8  000043f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080033fc  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e60  20000010  0800340c  00005010  2**2
                  ALLOC
 10 ._user_heap_stack 00002000  20000e70  0800340c  00005e70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b1d6  00000000  00000000  00005040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003726  00000000  00000000  00020216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000ab63  00000000  00000000  0002393c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012a0  00000000  00000000  0002e4a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000111c  00000000  00000000  0002f740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026f39  00000000  00000000  0003085c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001bf92  00000000  00000000  00057795  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fb2d7  00000000  00000000  00073727  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0016e9fe  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000327c  00000000  00000000  0016ea44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  00171cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080033a8 	.word	0x080033a8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	080033a8 	.word	0x080033a8

08000218 <TLC5952_Init>:

/**
 * @brief 初始化 TLC5952
 */
void TLC5952_Init(void)
{
 8000218:	b5f0      	push	{r4, r5, r6, r7, lr}
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800021a:	2400      	movs	r4, #0
{
 800021c:	b087      	sub	sp, #28
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800021e:	e9cd 4403 	strd	r4, r4, [sp, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000222:	4b14      	ldr	r3, [pc, #80]	@ (8000274 <TLC5952_Init+0x5c>)
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000224:	9405      	str	r4, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000226:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = TLC5952_SIN_Pin | TLC5952_SCLK_Pin | TLC5952_LAT_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    TLC5952_SIN_LOW();
 8000228:	4d13      	ldr	r5, [pc, #76]	@ (8000278 <TLC5952_Init+0x60>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800022a:	f042 0201 	orr.w	r2, r2, #1
 800022e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000230:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000232:	f003 0301 	and.w	r3, r3, #1
 8000236:	9300      	str	r3, [sp, #0]
 8000238:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800023a:	2701      	movs	r7, #1
 800023c:	2307      	movs	r3, #7
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800023e:	2602      	movs	r6, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000240:	a901      	add	r1, sp, #4
 8000242:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000246:	e9cd 3701 	strd	r3, r7, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800024a:	9604      	str	r6, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800024c:	f000 ffae 	bl	80011ac <HAL_GPIO_Init>
    TLC5952_SIN_LOW();
 8000250:	4622      	mov	r2, r4
 8000252:	4639      	mov	r1, r7
 8000254:	4628      	mov	r0, r5
 8000256:	f001 f873 	bl	8001340 <HAL_GPIO_WritePin>
    TLC5952_SCLK_LOW();
 800025a:	4622      	mov	r2, r4
 800025c:	4631      	mov	r1, r6
 800025e:	4628      	mov	r0, r5
 8000260:	f001 f86e 	bl	8001340 <HAL_GPIO_WritePin>
    TLC5952_LAT_LOW();
 8000264:	4622      	mov	r2, r4
 8000266:	2104      	movs	r1, #4
 8000268:	4628      	mov	r0, r5
 800026a:	f001 f869 	bl	8001340 <HAL_GPIO_WritePin>
}
 800026e:	b007      	add	sp, #28
 8000270:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000272:	bf00      	nop
 8000274:	40021000 	.word	0x40021000
 8000278:	48000800 	.word	0x48000800

0800027c <TLC5952_WriteBit>:
/**
 * @brief 发送单个 bit
 * @param bit 0 或 1
 */
void TLC5952_WriteBit(uint8_t bit)
{
 800027c:	b508      	push	{r3, lr}
    if (bit)
 800027e:	4602      	mov	r2, r0
 8000280:	b100      	cbz	r0, 8000284 <TLC5952_WriteBit+0x8>
        TLC5952_SIN_HIGH();
 8000282:	2201      	movs	r2, #1
    else
        TLC5952_SIN_LOW();
 8000284:	4807      	ldr	r0, [pc, #28]	@ (80002a4 <TLC5952_WriteBit+0x28>)
 8000286:	2101      	movs	r1, #1
 8000288:	f001 f85a 	bl	8001340 <HAL_GPIO_WritePin>

    TLC5952_SCLK_HIGH();
 800028c:	4805      	ldr	r0, [pc, #20]	@ (80002a4 <TLC5952_WriteBit+0x28>)
 800028e:	2201      	movs	r2, #1
 8000290:	2102      	movs	r1, #2
 8000292:	f001 f855 	bl	8001340 <HAL_GPIO_WritePin>
    TLC5952_SCLK_LOW();
}
 8000296:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    TLC5952_SCLK_LOW();
 800029a:	4802      	ldr	r0, [pc, #8]	@ (80002a4 <TLC5952_WriteBit+0x28>)
 800029c:	2200      	movs	r2, #0
 800029e:	2102      	movs	r1, #2
 80002a0:	f001 b84e 	b.w	8001340 <HAL_GPIO_WritePin>
 80002a4:	48000800 	.word	0x48000800

080002a8 <TLC5952_WriteLED>:

/**
 * @brief 发送 24 位 LED 数据
 */
void TLC5952_WriteLED(void)
{
 80002a8:	b538      	push	{r3, r4, r5, lr}
    TLC5952_WriteBit(0);
 80002aa:	2000      	movs	r0, #0
 80002ac:	f7ff ffe6 	bl	800027c <TLC5952_WriteBit>
    uint32_t *data = (uint32_t *)&allData;
    for (int8_t i = 23; i >= 0; i--)
    {
        uint8_t currentBit = (*data >> i) & 0x01;
 80002b0:	4d0a      	ldr	r5, [pc, #40]	@ (80002dc <TLC5952_WriteLED+0x34>)
    TLC5952_WriteBit(0);
 80002b2:	2417      	movs	r4, #23
        uint8_t currentBit = (*data >> i) & 0x01;
 80002b4:	6828      	ldr	r0, [r5, #0]
 80002b6:	40e0      	lsrs	r0, r4
        TLC5952_WriteBit(currentBit);
 80002b8:	f000 0001 	and.w	r0, r0, #1
 80002bc:	f7ff ffde 	bl	800027c <TLC5952_WriteBit>
    for (int8_t i = 23; i >= 0; i--)
 80002c0:	3c01      	subs	r4, #1
 80002c2:	d2f7      	bcs.n	80002b4 <TLC5952_WriteLED+0xc>
    }
    TLC5952_LAT_HIGH();
 80002c4:	4806      	ldr	r0, [pc, #24]	@ (80002e0 <TLC5952_WriteLED+0x38>)
 80002c6:	2201      	movs	r2, #1
 80002c8:	2104      	movs	r1, #4
 80002ca:	f001 f839 	bl	8001340 <HAL_GPIO_WritePin>
    TLC5952_LAT_LOW();
}
 80002ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    TLC5952_LAT_LOW();
 80002d2:	4803      	ldr	r0, [pc, #12]	@ (80002e0 <TLC5952_WriteLED+0x38>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	2104      	movs	r1, #4
 80002d8:	f001 b832 	b.w	8001340 <HAL_GPIO_WritePin>
 80002dc:	2000002c 	.word	0x2000002c
 80002e0:	48000800 	.word	0x48000800

080002e4 <TLC5952_WriteControl>:


/**
 * @brief 发送 24 位 控制 数据
 */
void TLC5952_WriteControl(void) {
 80002e4:	b538      	push	{r3, r4, r5, lr}
    TLC5952_WriteBit(1);
 80002e6:	2001      	movs	r0, #1
 80002e8:	f7ff ffc8 	bl	800027c <TLC5952_WriteBit>
    for (int i = 6; i >= 0; i--) {
        TLC5952_WriteBit((allData.red_brightness >> i) & 0x01);
 80002ec:	4c1c      	ldr	r4, [pc, #112]	@ (8000360 <TLC5952_WriteControl+0x7c>)
    for (int i = 6; i >= 0; i--) {
 80002ee:	2506      	movs	r5, #6
        TLC5952_WriteBit((allData.red_brightness >> i) & 0x01);
 80002f0:	78e0      	ldrb	r0, [r4, #3]
 80002f2:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 80002f6:	4128      	asrs	r0, r5
 80002f8:	f000 0001 	and.w	r0, r0, #1
 80002fc:	f7ff ffbe 	bl	800027c <TLC5952_WriteBit>
    for (int i = 6; i >= 0; i--) {
 8000300:	3d01      	subs	r5, #1
 8000302:	d2f5      	bcs.n	80002f0 <TLC5952_WriteControl+0xc>
    }
    for (int i = 6; i >= 0; i--) {
 8000304:	2506      	movs	r5, #6
        TLC5952_WriteBit((allData.green_brightness >> i) & 0x01);
 8000306:	7920      	ldrb	r0, [r4, #4]
 8000308:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 800030c:	4128      	asrs	r0, r5
 800030e:	f000 0001 	and.w	r0, r0, #1
 8000312:	f7ff ffb3 	bl	800027c <TLC5952_WriteBit>
    for (int i = 6; i >= 0; i--) {
 8000316:	3d01      	subs	r5, #1
 8000318:	d2f5      	bcs.n	8000306 <TLC5952_WriteControl+0x22>
    }
    for (int i = 6; i >= 0; i--) {
 800031a:	2506      	movs	r5, #6
        TLC5952_WriteBit((allData.blue_brightness >> i) & 0x01);
 800031c:	88a0      	ldrh	r0, [r4, #4]
 800031e:	f3c0 10c6 	ubfx	r0, r0, #7, #7
 8000322:	4128      	asrs	r0, r5
 8000324:	f000 0001 	and.w	r0, r0, #1
 8000328:	f7ff ffa8 	bl	800027c <TLC5952_WriteBit>
    for (int i = 6; i >= 0; i--) {
 800032c:	3d01      	subs	r5, #1
 800032e:	d2f5      	bcs.n	800031c <TLC5952_WriteControl+0x38>
    }
    for (int i = 2; i >= 0; i--) {
 8000330:	2502      	movs	r5, #2
        TLC5952_WriteBit((allData.detection_voltage_select >> i) & 0x01);
 8000332:	6860      	ldr	r0, [r4, #4]
 8000334:	f3c0 3082 	ubfx	r0, r0, #14, #3
 8000338:	4128      	asrs	r0, r5
 800033a:	f000 0001 	and.w	r0, r0, #1
 800033e:	f7ff ff9d 	bl	800027c <TLC5952_WriteBit>
    for (int i = 2; i >= 0; i--) {
 8000342:	3d01      	subs	r5, #1
 8000344:	d2f5      	bcs.n	8000332 <TLC5952_WriteControl+0x4e>
    }
    TLC5952_LAT_HIGH();
 8000346:	4807      	ldr	r0, [pc, #28]	@ (8000364 <TLC5952_WriteControl+0x80>)
 8000348:	2201      	movs	r2, #1
 800034a:	2104      	movs	r1, #4
 800034c:	f000 fff8 	bl	8001340 <HAL_GPIO_WritePin>
    TLC5952_LAT_LOW();
}
 8000350:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    TLC5952_LAT_LOW();
 8000354:	4803      	ldr	r0, [pc, #12]	@ (8000364 <TLC5952_WriteControl+0x80>)
 8000356:	2200      	movs	r2, #0
 8000358:	2104      	movs	r1, #4
 800035a:	f000 bff1 	b.w	8001340 <HAL_GPIO_WritePin>
 800035e:	bf00      	nop
 8000360:	2000002c 	.word	0x2000002c
 8000364:	48000800 	.word	0x48000800

08000368 <FT6336_ReadRegister>:

HAL_StatusTypeDef FT6336_WriteRegister( uint8_t RegAddress, uint8_t *pData, uint16_t Size) {
    return HAL_I2C_Mem_Write(&FT6336_I2C_PORT, FT6X36_ADDR, RegAddress, I2C_MEMADD_SIZE_8BIT, pData, Size, HAL_MAX_DELAY);
}

HAL_StatusTypeDef FT6336_ReadRegister( uint8_t RegAddress, uint8_t *pData, uint16_t Size) {
 8000368:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return HAL_I2C_Mem_Read(&FT6336_I2C_PORT, FT6X36_ADDR, RegAddress, I2C_MEMADD_SIZE_8BIT, pData, Size, HAL_MAX_DELAY);
 800036a:	f04f 33ff 	mov.w	r3, #4294967295
 800036e:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8000372:	9100      	str	r1, [sp, #0]
 8000374:	4602      	mov	r2, r0
 8000376:	2301      	movs	r3, #1
 8000378:	2170      	movs	r1, #112	@ 0x70
 800037a:	4803      	ldr	r0, [pc, #12]	@ (8000388 <FT6336_ReadRegister+0x20>)
 800037c:	f001 f97a 	bl	8001674 <HAL_I2C_Mem_Read>
}
 8000380:	b005      	add	sp, #20
 8000382:	f85d fb04 	ldr.w	pc, [sp], #4
 8000386:	bf00      	nop
 8000388:	20000198 	.word	0x20000198

0800038c <FT6336_Init>:

void FT6336_Init(void) {
 800038c:	b513      	push	{r0, r1, r4, lr}
    FT6336_RST_L;
 800038e:	4c10      	ldr	r4, [pc, #64]	@ (80003d0 <FT6336_Init+0x44>)
 8000390:	2200      	movs	r2, #0
 8000392:	2110      	movs	r1, #16
 8000394:	4620      	mov	r0, r4
 8000396:	f000 ffd3 	bl	8001340 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 800039a:	200a      	movs	r0, #10
 800039c:	f000 fd54 	bl	8000e48 <HAL_Delay>
    FT6336_RST_H;
 80003a0:	2201      	movs	r2, #1
 80003a2:	2110      	movs	r1, #16
 80003a4:	4620      	mov	r0, r4
 80003a6:	f000 ffcb 	bl	8001340 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 80003aa:	2032      	movs	r0, #50	@ 0x32
 80003ac:	f000 fd4c 	bl	8000e48 <HAL_Delay>
//    FT6336_WriteRegister(0x00, 0x00,1);
//
//    // 设置 ID_G_MODE 为 0x00（启用中断输出）
//    FT6336_WriteRegister(0xA4, 0x00,1);

    uint8_t id = 0;
 80003b0:	2300      	movs	r3, #0
    FT6336_ReadRegister(FT6336_FOCALTECH_ID, &id, 1);
 80003b2:	2201      	movs	r2, #1
 80003b4:	f10d 0107 	add.w	r1, sp, #7
 80003b8:	20a8      	movs	r0, #168	@ 0xa8
    uint8_t id = 0;
 80003ba:	f88d 3007 	strb.w	r3, [sp, #7]
    FT6336_ReadRegister(FT6336_FOCALTECH_ID, &id, 1);
 80003be:	f7ff ffd3 	bl	8000368 <FT6336_ReadRegister>
    HAL_Delay(1000);
 80003c2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80003c6:	f000 fd3f 	bl	8000e48 <HAL_Delay>
//    HAL_Delay(1000);
    //used to debug IIC



}
 80003ca:	b002      	add	sp, #8
 80003cc:	bd10      	pop	{r4, pc}
 80003ce:	bf00      	nop
 80003d0:	48000400 	.word	0x48000400

080003d4 <FT6336_GetTouchPoint>:





void FT6336_GetTouchPoint(TouchPoints_HandleTypeDef *touchPoints) {
 80003d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint8_t touchStatus = 0;
 80003d6:	2300      	movs	r3, #0
void FT6336_GetTouchPoint(TouchPoints_HandleTypeDef *touchPoints) {
 80003d8:	4604      	mov	r4, r0
    uint8_t touchData[4];  // 存储两个点的坐标数据 (每个点4个字节)

    // 读取触摸状态寄存器
    FT6336_ReadRegister(FT6336_TD_STATUS, &touchStatus, 1);
 80003da:	2201      	movs	r2, #1
 80003dc:	f10d 0103 	add.w	r1, sp, #3
 80003e0:	2002      	movs	r0, #2
    uint8_t touchStatus = 0;
 80003e2:	f88d 3003 	strb.w	r3, [sp, #3]
    FT6336_ReadRegister(FT6336_TD_STATUS, &touchStatus, 1);
 80003e6:	f7ff ffbf 	bl	8000368 <FT6336_ReadRegister>
    uint8_t touchCount = touchStatus & 0x0F;  // 获取触摸点数量
 80003ea:	f89d 5003 	ldrb.w	r5, [sp, #3]

    if (touchCount > 0) {
 80003ee:	072b      	lsls	r3, r5, #28
 80003f0:	d035      	beq.n	800045e <FT6336_GetTouchPoint+0x8a>
        // 读取第一个触摸点的坐标 (4个字节)
    	FT6336_ReadRegister(FT6336_P1_XH, touchData, 4);
 80003f2:	2204      	movs	r2, #4
 80003f4:	eb0d 0102 	add.w	r1, sp, r2
 80003f8:	2003      	movs	r0, #3
 80003fa:	f7ff ffb5 	bl	8000368 <FT6336_ReadRegister>
        touchPoints->point1_x = ((touchData[0] & 0x0F) << 8) | touchData[1];
 80003fe:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8000402:	f89d 3005 	ldrb.w	r3, [sp, #5]
        touchPoints->point1_y = ((touchData[2] & 0x0F) << 8) | touchData[3];
 8000406:	f89d 1007 	ldrb.w	r1, [sp, #7]
        touchPoints->point1_x = ((touchData[0] & 0x0F) << 8) | touchData[1];
 800040a:	0212      	lsls	r2, r2, #8
 800040c:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
 8000410:	4313      	orrs	r3, r2
        touchPoints->point1_y = ((touchData[2] & 0x0F) << 8) | touchData[3];
 8000412:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8000416:	0212      	lsls	r2, r2, #8
 8000418:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
 800041c:	430a      	orrs	r2, r1
    *y = 240-rawX;
 800041e:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
        AdjustTouchCoordinates(&touchPoints->point1_x, &touchPoints->point1_y);  // 调整第一个触摸点坐标

        if (touchCount > 1) {
 8000422:	f015 0f0e 	tst.w	r5, #14
    *x = rawY;
 8000426:	8022      	strh	r2, [r4, #0]
    *y = 240-rawX;
 8000428:	8063      	strh	r3, [r4, #2]
        if (touchCount > 1) {
 800042a:	d018      	beq.n	800045e <FT6336_GetTouchPoint+0x8a>
            // 读取第二个触摸点的坐标 (4个字节)
        	FT6336_ReadRegister(FT6336_P2_XH, &touchData[4], 4);
 800042c:	2204      	movs	r2, #4
 800042e:	a902      	add	r1, sp, #8
 8000430:	2009      	movs	r0, #9
 8000432:	f7ff ff99 	bl	8000368 <FT6336_ReadRegister>
            touchPoints->point2_x = ((touchData[4] & 0x0F) << 8) | touchData[5];
 8000436:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800043a:	f89d 3009 	ldrb.w	r3, [sp, #9]
            touchPoints->point2_y = ((touchData[6] & 0x0F) << 8) | touchData[7];
 800043e:	f89d 100b 	ldrb.w	r1, [sp, #11]
            touchPoints->point2_x = ((touchData[4] & 0x0F) << 8) | touchData[5];
 8000442:	0212      	lsls	r2, r2, #8
 8000444:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
 8000448:	4313      	orrs	r3, r2
            touchPoints->point2_y = ((touchData[6] & 0x0F) << 8) | touchData[7];
 800044a:	f89d 200a 	ldrb.w	r2, [sp, #10]
 800044e:	0212      	lsls	r2, r2, #8
 8000450:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
 8000454:	430a      	orrs	r2, r1
    *y = 240-rawX;
 8000456:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
    *x = rawY;
 800045a:	80a2      	strh	r2, [r4, #4]
    *y = 240-rawX;
 800045c:	80e3      	strh	r3, [r4, #6]
            AdjustTouchCoordinates(&touchPoints->point2_x, &touchPoints->point2_y);  // 调整第二个触摸点坐标
        }
    }
}
 800045e:	b003      	add	sp, #12
 8000460:	bd30      	pop	{r4, r5, pc}

08000462 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000462:	b510      	push	{r4, lr}
 8000464:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000466:	2238      	movs	r2, #56	@ 0x38
 8000468:	2100      	movs	r1, #0
 800046a:	a806      	add	r0, sp, #24
 800046c:	f002 ff6f 	bl	800334e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000470:	2214      	movs	r2, #20
 8000472:	2100      	movs	r1, #0
 8000474:	a801      	add	r0, sp, #4
 8000476:	f002 ff6a 	bl	800334e <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800047a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800047e:	f001 fa23 	bl	80018c8 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000482:	2240      	movs	r2, #64	@ 0x40
 8000484:	f44f 7180 	mov.w	r1, #256	@ 0x100
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000488:	2302      	movs	r3, #2
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800048a:	e9cd 1209 	strd	r1, r2, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
  RCC_OscInitStruct.PLL.PLLN = 75;
 800048e:	2404      	movs	r4, #4
 8000490:	224b      	movs	r2, #75	@ 0x4b
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000492:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000494:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLN = 75;
 8000498:	e9cd 420f 	strd	r4, r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800049c:	e9cd 3311 	strd	r3, r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004a0:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80004a2:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004a4:	f001 fa70 	bl	8001988 <HAL_RCC_OscConfig>
 80004a8:	b108      	cbz	r0, 80004ae <SystemClock_Config+0x4c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004aa:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004ac:	e7fe      	b.n	80004ac <SystemClock_Config+0x4a>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004ae:	e9cd 0003 	strd	r0, r0, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004b2:	220f      	movs	r2, #15
 80004b4:	2303      	movs	r3, #3
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004b6:	9005      	str	r0, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80004b8:	4621      	mov	r1, r4
 80004ba:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004bc:	e9cd 2301 	strd	r2, r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80004c0:	f001 fca4 	bl	8001e0c <HAL_RCC_ClockConfig>
 80004c4:	b108      	cbz	r0, 80004ca <SystemClock_Config+0x68>
 80004c6:	b672      	cpsid	i
  while (1)
 80004c8:	e7fe      	b.n	80004c8 <SystemClock_Config+0x66>
}
 80004ca:	b014      	add	sp, #80	@ 0x50
 80004cc:	bd10      	pop	{r4, pc}
	...

080004d0 <main>:
{
 80004d0:	b580      	push	{r7, lr}
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004d2:	4ca6      	ldr	r4, [pc, #664]	@ (800076c <main+0x29c>)
{
 80004d4:	b09e      	sub	sp, #120	@ 0x78
  HAL_Init();
 80004d6:	f000 fc95 	bl	8000e04 <HAL_Init>
  SystemClock_Config();
 80004da:	f7ff ffc2 	bl	8000462 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004de:	2214      	movs	r2, #20
 80004e0:	2100      	movs	r1, #0
 80004e2:	a811      	add	r0, sp, #68	@ 0x44
 80004e4:	f002 ff33 	bl	800334e <memset>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004e8:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
  HAL_GPIO_WritePin(GPIOC, TLC5952_SIN_Pin|TLC5952_SCLK_Pin|TLC5952_LAT_Pin, GPIO_PIN_RESET);
 80004ea:	48a1      	ldr	r0, [pc, #644]	@ (8000770 <main+0x2a0>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004ec:	f043 0320 	orr.w	r3, r3, #32
 80004f0:	64e3      	str	r3, [r4, #76]	@ 0x4c
 80004f2:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80004f4:	f003 0320 	and.w	r3, r3, #32
 80004f8:	9303      	str	r3, [sp, #12]
 80004fa:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004fc:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80004fe:	f043 0304 	orr.w	r3, r3, #4
 8000502:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8000504:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8000506:	f003 0304 	and.w	r3, r3, #4
 800050a:	9304      	str	r3, [sp, #16]
 800050c:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800050e:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8000510:	f043 0302 	orr.w	r3, r3, #2
 8000514:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8000516:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8000518:	f003 0302 	and.w	r3, r3, #2
 800051c:	9305      	str	r3, [sp, #20]
 800051e:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000520:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8000522:	f043 0301 	orr.w	r3, r3, #1
 8000526:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8000528:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800052a:	f003 0301 	and.w	r3, r3, #1
 800052e:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOC, TLC5952_SIN_Pin|TLC5952_SCLK_Pin|TLC5952_LAT_Pin, GPIO_PIN_RESET);
 8000530:	2200      	movs	r2, #0
 8000532:	2107      	movs	r1, #7
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000534:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOC, TLC5952_SIN_Pin|TLC5952_SCLK_Pin|TLC5952_LAT_Pin, GPIO_PIN_RESET);
 8000536:	f000 ff03 	bl	8001340 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, ST7789_DC_Pin|ST7789_RST_Pin|ST7789_CS_Pin|FT6336_RST_Pin, GPIO_PIN_RESET);
 800053a:	2200      	movs	r2, #0
 800053c:	488d      	ldr	r0, [pc, #564]	@ (8000774 <main+0x2a4>)
 800053e:	f644 0118 	movw	r1, #18456	@ 0x4818
 8000542:	f000 fefd 	bl	8001340 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000546:	2500      	movs	r5, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000548:	2601      	movs	r6, #1
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800054a:	4889      	ldr	r0, [pc, #548]	@ (8000770 <main+0x2a0>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800054c:	2707      	movs	r7, #7
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800054e:	a911      	add	r1, sp, #68	@ 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000550:	e9cd 7611 	strd	r7, r6, [sp, #68]	@ 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000554:	e9cd 5513 	strd	r5, r5, [sp, #76]	@ 0x4c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000558:	f000 fe28 	bl	80011ac <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ST7789_DC_Pin|ST7789_RST_Pin|ST7789_CS_Pin;
 800055c:	f644 0308 	movw	r3, #18440	@ 0x4808
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000560:	4884      	ldr	r0, [pc, #528]	@ (8000774 <main+0x2a4>)
 8000562:	a911      	add	r1, sp, #68	@ 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000564:	e9cd 3611 	strd	r3, r6, [sp, #68]	@ 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000568:	e9cd 5513 	strd	r5, r5, [sp, #76]	@ 0x4c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800056c:	f000 fe1e 	bl	80011ac <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000570:	f44f 6c80 	mov.w	ip, #1024	@ 0x400
 8000574:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000578:	a911      	add	r1, sp, #68	@ 0x44
 800057a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800057e:	e9cd c311 	strd	ip, r3, [sp, #68]	@ 0x44
  GPIO_InitStruct.Pin = FT6336_RST_Pin;
 8000582:	f04f 0810 	mov.w	r8, #16
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000586:	f04f 0902 	mov.w	r9, #2
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800058a:	9613      	str	r6, [sp, #76]	@ 0x4c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800058c:	f000 fe0e 	bl	80011ac <HAL_GPIO_Init>
  HAL_GPIO_Init(FT6336_RST_GPIO_Port, &GPIO_InitStruct);
 8000590:	4878      	ldr	r0, [pc, #480]	@ (8000774 <main+0x2a4>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000592:	9613      	str	r6, [sp, #76]	@ 0x4c
  HAL_GPIO_Init(FT6336_RST_GPIO_Port, &GPIO_InitStruct);
 8000594:	a911      	add	r1, sp, #68	@ 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000596:	e9cd 8611 	strd	r8, r6, [sp, #68]	@ 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800059a:	f8cd 9050 	str.w	r9, [sp, #80]	@ 0x50
  HAL_GPIO_Init(FT6336_RST_GPIO_Port, &GPIO_InitStruct);
 800059e:	f000 fe05 	bl	80011ac <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80005a2:	462a      	mov	r2, r5
 80005a4:	4629      	mov	r1, r5
 80005a6:	2028      	movs	r0, #40	@ 0x28
 80005a8:	f000 fc74 	bl	8000e94 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80005ac:	2028      	movs	r0, #40	@ 0x28
 80005ae:	f000 fca3 	bl	8000ef8 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80005b2:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80005b4:	f043 0304 	orr.w	r3, r3, #4
 80005b8:	64a3      	str	r3, [r4, #72]	@ 0x48
 80005ba:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80005bc:	f003 0304 	and.w	r3, r3, #4
 80005c0:	9301      	str	r3, [sp, #4]
 80005c2:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005c4:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80005c6:	4333      	orrs	r3, r6
 80005c8:	64a3      	str	r3, [r4, #72]	@ 0x48
 80005ca:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80005cc:	4033      	ands	r3, r6
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80005ce:	462a      	mov	r2, r5
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005d0:	9302      	str	r3, [sp, #8]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80005d2:	4629      	mov	r1, r5
 80005d4:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005d6:	9b02      	ldr	r3, [sp, #8]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80005d8:	f000 fc5c 	bl	8000e94 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80005dc:	200b      	movs	r0, #11
 80005de:	f000 fc8b 	bl	8000ef8 <HAL_NVIC_EnableIRQ>
  hspi2.Instance = SPI2;
 80005e2:	4865      	ldr	r0, [pc, #404]	@ (8000778 <main+0x2a8>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80005e4:	f8df e1b0 	ldr.w	lr, [pc, #432]	@ 8000798 <main+0x2c8>
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80005e8:	6305      	str	r5, [r0, #48]	@ 0x30
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80005ea:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80005ee:	e9c0 e300 	strd	lr, r3, [r0]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80005f2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80005f6:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80005fa:	e9c0 2302 	strd	r2, r3, [r0, #8]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80005fe:	f44f 7300 	mov.w	r3, #512	@ 0x200
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000602:	e9c0 3806 	strd	r3, r8, [r0, #24]
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000606:	2308      	movs	r3, #8
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000608:	e9c0 9504 	strd	r9, r5, [r0, #16]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800060c:	e9c0 5508 	strd	r5, r5, [r0, #32]
  hspi2.Init.CRCPolynomial = 7;
 8000610:	e9c0 570a 	strd	r5, r7, [r0, #40]	@ 0x28
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000614:	6343      	str	r3, [r0, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000616:	f001 ff3d 	bl	8002494 <HAL_SPI_Init>
 800061a:	b108      	cbz	r0, 8000620 <main+0x150>
 800061c:	b672      	cpsid	i
  while (1)
 800061e:	e7fe      	b.n	800061e <main+0x14e>
  hi2c1.Instance = I2C1;
 8000620:	4c56      	ldr	r4, [pc, #344]	@ (800077c <main+0x2ac>)
  hi2c1.Init.Timing = 0x10E32879;
 8000622:	4b57      	ldr	r3, [pc, #348]	@ (8000780 <main+0x2b0>)
 8000624:	4f57      	ldr	r7, [pc, #348]	@ (8000784 <main+0x2b4>)
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000626:	6220      	str	r0, [r4, #32]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000628:	e9c4 0602 	strd	r0, r6, [r4, #8]
  hi2c1.Init.OwnAddress2 = 0;
 800062c:	e9c4 0004 	strd	r0, r0, [r4, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000630:	e9c4 0006 	strd	r0, r0, [r4, #24]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000634:	4620      	mov	r0, r4
  hi2c1.Init.Timing = 0x10E32879;
 8000636:	e9c4 7300 	strd	r7, r3, [r4]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800063a:	f000 ffc6 	bl	80015ca <HAL_I2C_Init>
 800063e:	4601      	mov	r1, r0
 8000640:	b108      	cbz	r0, 8000646 <main+0x176>
 8000642:	b672      	cpsid	i
  while (1)
 8000644:	e7fe      	b.n	8000644 <main+0x174>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000646:	4620      	mov	r0, r4
 8000648:	f001 f8f2 	bl	8001830 <HAL_I2CEx_ConfigAnalogFilter>
 800064c:	4601      	mov	r1, r0
 800064e:	b108      	cbz	r0, 8000654 <main+0x184>
 8000650:	b672      	cpsid	i
  while (1)
 8000652:	e7fe      	b.n	8000652 <main+0x182>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000654:	4620      	mov	r0, r4
 8000656:	f001 f911 	bl	800187c <HAL_I2CEx_ConfigDigitalFilter>
 800065a:	b108      	cbz	r0, 8000660 <main+0x190>
 800065c:	b672      	cpsid	i
  while (1)
 800065e:	e7fe      	b.n	800065e <main+0x18e>
  htim7.Instance = TIM7;
 8000660:	4c49      	ldr	r4, [pc, #292]	@ (8000788 <main+0x2b8>)
  htim7.Init.Prescaler = 60-1;
 8000662:	4d4a      	ldr	r5, [pc, #296]	@ (800078c <main+0x2bc>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000664:	9013      	str	r0, [sp, #76]	@ 0x4c
 8000666:	e9cd 0011 	strd	r0, r0, [sp, #68]	@ 0x44
  htim7.Init.Prescaler = 60-1;
 800066a:	233b      	movs	r3, #59	@ 0x3b
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800066c:	60a0      	str	r0, [r4, #8]
  htim7.Init.Period = 1000;
 800066e:	f44f 767a 	mov.w	r6, #1000	@ 0x3e8
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000672:	61a0      	str	r0, [r4, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000674:	4620      	mov	r0, r4
  htim7.Init.Prescaler = 60-1;
 8000676:	e9c4 5300 	strd	r5, r3, [r4]
  htim7.Init.Period = 1000;
 800067a:	60e6      	str	r6, [r4, #12]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800067c:	f002 fbf4 	bl	8002e68 <HAL_TIM_Base_Init>
 8000680:	b108      	cbz	r0, 8000686 <main+0x1b6>
 8000682:	b672      	cpsid	i
  while (1)
 8000684:	e7fe      	b.n	8000684 <main+0x1b4>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000686:	9011      	str	r0, [sp, #68]	@ 0x44
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000688:	9013      	str	r0, [sp, #76]	@ 0x4c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800068a:	a911      	add	r1, sp, #68	@ 0x44
 800068c:	4620      	mov	r0, r4
 800068e:	f002 fdb9 	bl	8003204 <HAL_TIMEx_MasterConfigSynchronization>
 8000692:	4604      	mov	r4, r0
 8000694:	b108      	cbz	r0, 800069a <main+0x1ca>
 8000696:	b672      	cpsid	i
  while (1)
 8000698:	e7fe      	b.n	8000698 <main+0x1c8>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800069a:	4601      	mov	r1, r0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800069c:	e9cd 0007 	strd	r0, r0, [sp, #28]
 80006a0:	9009      	str	r0, [sp, #36]	@ 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006a2:	221c      	movs	r2, #28
 80006a4:	a80a      	add	r0, sp, #40	@ 0x28
 80006a6:	f002 fe52 	bl	800334e <memset>
  htim1.Instance = TIM1;
 80006aa:	4d39      	ldr	r5, [pc, #228]	@ (8000790 <main+0x2c0>)
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80006ac:	4621      	mov	r1, r4
 80006ae:	2234      	movs	r2, #52	@ 0x34
 80006b0:	a811      	add	r0, sp, #68	@ 0x44
 80006b2:	f002 fe4c 	bl	800334e <memset>
  htim1.Init.Prescaler = 150-1;
 80006b6:	4937      	ldr	r1, [pc, #220]	@ (8000794 <main+0x2c4>)
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006b8:	61ac      	str	r4, [r5, #24]
  htim1.Init.Prescaler = 150-1;
 80006ba:	2395      	movs	r3, #149	@ 0x95
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80006bc:	4628      	mov	r0, r5
  htim1.Init.Prescaler = 150-1;
 80006be:	e9c5 1300 	strd	r1, r3, [r5]
  htim1.Init.Period = 1000;
 80006c2:	e9c5 4602 	strd	r4, r6, [r5, #8]
  htim1.Init.RepetitionCounter = 0;
 80006c6:	e9c5 4404 	strd	r4, r4, [r5, #16]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80006ca:	f002 fbfd 	bl	8002ec8 <HAL_TIM_PWM_Init>
 80006ce:	b108      	cbz	r0, 80006d4 <main+0x204>
 80006d0:	b672      	cpsid	i
  while (1)
 80006d2:	e7fe      	b.n	80006d2 <main+0x202>
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80006d4:	e9cd 0007 	strd	r0, r0, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006d8:	9009      	str	r0, [sp, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006da:	a907      	add	r1, sp, #28
 80006dc:	4628      	mov	r0, r5
 80006de:	f002 fd91 	bl	8003204 <HAL_TIMEx_MasterConfigSynchronization>
 80006e2:	b108      	cbz	r0, 80006e8 <main+0x218>
 80006e4:	b672      	cpsid	i
  while (1)
 80006e6:	e7fe      	b.n	80006e6 <main+0x216>
  sConfigOC.Pulse = 995;
 80006e8:	2260      	movs	r2, #96	@ 0x60
 80006ea:	f240 33e3 	movw	r3, #995	@ 0x3e3
 80006ee:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80006f2:	e9cd 000c 	strd	r0, r0, [sp, #48]	@ 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80006f6:	e9cd 000e 	strd	r0, r0, [sp, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80006fa:	9010      	str	r0, [sp, #64]	@ 0x40
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80006fc:	220c      	movs	r2, #12
 80006fe:	a90a      	add	r1, sp, #40	@ 0x28
 8000700:	4628      	mov	r0, r5
 8000702:	f002 fc5f 	bl	8002fc4 <HAL_TIM_PWM_ConfigChannel>
 8000706:	b108      	cbz	r0, 800070c <main+0x23c>
 8000708:	b672      	cpsid	i
  while (1)
 800070a:	e7fe      	b.n	800070a <main+0x23a>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800070c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000710:	e9cd 3016 	strd	r3, r0, [sp, #88]	@ 0x58
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000714:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000718:	e9cd 0011 	strd	r0, r0, [sp, #68]	@ 0x44
  sBreakDeadTimeConfig.DeadTime = 0;
 800071c:	e9cd 0013 	strd	r0, r0, [sp, #76]	@ 0x4c
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000720:	e9cd 0018 	strd	r0, r0, [sp, #96]	@ 0x60
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000724:	e9cd 301a 	strd	r3, r0, [sp, #104]	@ 0x68
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000728:	e9cd 001c 	strd	r0, r0, [sp, #112]	@ 0x70
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800072c:	9015      	str	r0, [sp, #84]	@ 0x54
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800072e:	a911      	add	r1, sp, #68	@ 0x44
 8000730:	4628      	mov	r0, r5
 8000732:	f002 fdb7 	bl	80032a4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000736:	b108      	cbz	r0, 800073c <main+0x26c>
 8000738:	b672      	cpsid	i
  while (1)
 800073a:	e7fe      	b.n	800073a <main+0x26a>
  HAL_TIM_MspPostInit(&htim1);
 800073c:	4814      	ldr	r0, [pc, #80]	@ (8000790 <main+0x2c0>)
 800073e:	f000 fab7 	bl	8000cb0 <HAL_TIM_MspPostInit>
  ST7789_Init();
 8000742:	f000 f8f7 	bl	8000934 <ST7789_Init>
  FT6336_Init();
 8000746:	f7ff fe21 	bl	800038c <FT6336_Init>
  TLC5952_Init();
 800074a:	f7ff fd65 	bl	8000218 <TLC5952_Init>
  HAL_TIM_Base_Start(&htim1);
 800074e:	4810      	ldr	r0, [pc, #64]	@ (8000790 <main+0x2c0>)
 8000750:	f002 fa04 	bl	8002b5c <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000754:	480e      	ldr	r0, [pc, #56]	@ (8000790 <main+0x2c0>)
 8000756:	210c      	movs	r1, #12
 8000758:	f002 fd52 	bl	8003200 <HAL_TIM_PWM_Start>
	    TLC5952_WriteLED();  // 发送数据
 800075c:	f7ff fda4 	bl	80002a8 <TLC5952_WriteLED>
	    TLC5952_WriteControl();
 8000760:	f7ff fdc0 	bl	80002e4 <TLC5952_WriteControl>
		  HAL_Delay(100);        // 延时 1 秒
 8000764:	2064      	movs	r0, #100	@ 0x64
 8000766:	f000 fb6f 	bl	8000e48 <HAL_Delay>
  while (1)
 800076a:	e7f7      	b.n	800075c <main+0x28c>
 800076c:	40021000 	.word	0x40021000
 8000770:	48000800 	.word	0x48000800
 8000774:	48000400 	.word	0x48000400
 8000778:	20000134 	.word	0x20000134
 800077c:	20000198 	.word	0x20000198
 8000780:	10e32879 	.word	0x10e32879
 8000784:	40005400 	.word	0x40005400
 8000788:	2000003c 	.word	0x2000003c
 800078c:	40001400 	.word	0x40001400
 8000790:	20000088 	.word	0x20000088
 8000794:	40012c00 	.word	0x40012c00
 8000798:	40003800 	.word	0x40003800

0800079c <Error_Handler>:
 800079c:	b672      	cpsid	i
  while (1)
 800079e:	e7fe      	b.n	800079e <Error_Handler+0x2>

080007a0 <ST7789_WriteCommand>:
 * @brief Write command to ST7789 controller
 * @param cmd -> command to write
 * @return none
 */
static void ST7789_WriteCommand(uint8_t cmd)
{
 80007a0:	b507      	push	{r0, r1, r2, lr}
 80007a2:	f88d 0007 	strb.w	r0, [sp, #7]
	ST7789_Select();
 80007a6:	bf00      	nop
	ST7789_DC_Clr();
 80007a8:	4808      	ldr	r0, [pc, #32]	@ (80007cc <ST7789_WriteCommand+0x2c>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80007b0:	f000 fdc6 	bl	8001340 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80007b4:	f04f 33ff 	mov.w	r3, #4294967295
 80007b8:	2201      	movs	r2, #1
 80007ba:	f10d 0107 	add.w	r1, sp, #7
 80007be:	4804      	ldr	r0, [pc, #16]	@ (80007d0 <ST7789_WriteCommand+0x30>)
 80007c0:	f001 fed6 	bl	8002570 <HAL_SPI_Transmit>
	ST7789_UnSelect();
 80007c4:	bf00      	nop
}
 80007c6:	b003      	add	sp, #12
 80007c8:	f85d fb04 	ldr.w	pc, [sp], #4
 80007cc:	48000400 	.word	0x48000400
 80007d0:	20000134 	.word	0x20000134

080007d4 <ST7789_WriteSmallData>:
 * @brief Write data to ST7789 controller, simplify for 8bit data.
 * data -> data to write
 * @return none
 */
static void ST7789_WriteSmallData(uint8_t data)
{
 80007d4:	b507      	push	{r0, r1, r2, lr}
 80007d6:	f88d 0007 	strb.w	r0, [sp, #7]
	ST7789_Select();
 80007da:	bf00      	nop
	ST7789_DC_Set();
 80007dc:	4808      	ldr	r0, [pc, #32]	@ (8000800 <ST7789_WriteSmallData+0x2c>)
 80007de:	2201      	movs	r2, #1
 80007e0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80007e4:	f000 fdac 	bl	8001340 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &data, sizeof(data), HAL_MAX_DELAY);
 80007e8:	f04f 33ff 	mov.w	r3, #4294967295
 80007ec:	2201      	movs	r2, #1
 80007ee:	f10d 0107 	add.w	r1, sp, #7
 80007f2:	4804      	ldr	r0, [pc, #16]	@ (8000804 <ST7789_WriteSmallData+0x30>)
 80007f4:	f001 febc 	bl	8002570 <HAL_SPI_Transmit>
	ST7789_UnSelect();
 80007f8:	bf00      	nop
}
 80007fa:	b003      	add	sp, #12
 80007fc:	f85d fb04 	ldr.w	pc, [sp], #4
 8000800:	48000400 	.word	0x48000400
 8000804:	20000134 	.word	0x20000134

08000808 <ST7789_WriteData>:
{
 8000808:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800080c:	4605      	mov	r5, r0
 800080e:	460c      	mov	r4, r1
	ST7789_Select();
 8000810:	bf00      	nop
	ST7789_DC_Set();
 8000812:	4815      	ldr	r0, [pc, #84]	@ (8000868 <ST7789_WriteData+0x60>)
			if (DMA_MIN_SIZE <= buff_size)
 8000814:	f8df 9058 	ldr.w	r9, [pc, #88]	@ 8000870 <ST7789_WriteData+0x68>
				HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 8000818:	4f14      	ldr	r7, [pc, #80]	@ (800086c <ST7789_WriteData+0x64>)
	ST7789_DC_Set();
 800081a:	2201      	movs	r2, #1
 800081c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000820:	f000 fd8e 	bl	8001340 <HAL_GPIO_WritePin>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 8000824:	f64f 78ff 	movw	r8, #65535	@ 0xffff
	while (buff_size > 0) {
 8000828:	b914      	cbnz	r4, 8000830 <ST7789_WriteData+0x28>
	ST7789_UnSelect();
 800082a:	bf00      	nop
}
 800082c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (DMA_MIN_SIZE <= buff_size)
 8000830:	f8b9 3000 	ldrh.w	r3, [r9]
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 8000834:	4544      	cmp	r4, r8
 8000836:	4626      	mov	r6, r4
 8000838:	bf28      	it	cs
 800083a:	4646      	movcs	r6, r8
			if (DMA_MIN_SIZE <= buff_size)
 800083c:	42a3      	cmp	r3, r4
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 800083e:	b2b2      	uxth	r2, r6
			if (DMA_MIN_SIZE <= buff_size)
 8000840:	d80b      	bhi.n	800085a <ST7789_WriteData+0x52>
				HAL_SPI_Transmit_DMA(&ST7789_SPI_PORT, buff, chunk_size);
 8000842:	480a      	ldr	r0, [pc, #40]	@ (800086c <ST7789_WriteData+0x64>)
 8000844:	4629      	mov	r1, r5
 8000846:	f001 ff59 	bl	80026fc <HAL_SPI_Transmit_DMA>
				while (ST7789_SPI_PORT.hdmatx->State != HAL_DMA_STATE_READY)
 800084a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800084c:	f892 3025 	ldrb.w	r3, [r2, #37]	@ 0x25
 8000850:	2b01      	cmp	r3, #1
 8000852:	d1fb      	bne.n	800084c <ST7789_WriteData+0x44>
		buff += chunk_size;
 8000854:	4435      	add	r5, r6
		buff_size -= chunk_size;
 8000856:	1ba4      	subs	r4, r4, r6
 8000858:	e7e6      	b.n	8000828 <ST7789_WriteData+0x20>
				HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 800085a:	f04f 33ff 	mov.w	r3, #4294967295
 800085e:	4629      	mov	r1, r5
 8000860:	4638      	mov	r0, r7
 8000862:	f001 fe85 	bl	8002570 <HAL_SPI_Transmit>
 8000866:	e7f5      	b.n	8000854 <ST7789_WriteData+0x4c>
 8000868:	48000400 	.word	0x48000400
 800086c:	20000134 	.word	0x20000134
 8000870:	20000000 	.word	0x20000000

08000874 <ST7789_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8000874:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000876:	4607      	mov	r7, r0
 8000878:	460d      	mov	r5, r1
 800087a:	4616      	mov	r6, r2
 800087c:	461c      	mov	r4, r3
	ST7789_Select();
 800087e:	bf00      	nop
	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
	
	/* Column Address set */
	ST7789_WriteCommand(ST7789_CASET); 
 8000880:	202a      	movs	r0, #42	@ 0x2a
 8000882:	f7ff ff8d 	bl	80007a0 <ST7789_WriteCommand>
	{
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
		ST7789_WriteData(data, sizeof(data));
 8000886:	2104      	movs	r1, #4
 8000888:	eb0d 0001 	add.w	r0, sp, r1
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 800088c:	ba7f      	rev16	r7, r7
 800088e:	ba76      	rev16	r6, r6
 8000890:	f8ad 7004 	strh.w	r7, [sp, #4]
 8000894:	f8ad 6006 	strh.w	r6, [sp, #6]
		ST7789_WriteData(data, sizeof(data));
 8000898:	f7ff ffb6 	bl	8000808 <ST7789_WriteData>
	}

	/* Row Address set */
	ST7789_WriteCommand(ST7789_RASET);
 800089c:	202b      	movs	r0, #43	@ 0x2b
 800089e:	f7ff ff7f 	bl	80007a0 <ST7789_WriteCommand>
	{
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
		ST7789_WriteData(data, sizeof(data));
 80008a2:	2104      	movs	r1, #4
 80008a4:	eb0d 0001 	add.w	r0, sp, r1
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 80008a8:	ba6d      	rev16	r5, r5
 80008aa:	ba64      	rev16	r4, r4
 80008ac:	f8ad 5004 	strh.w	r5, [sp, #4]
 80008b0:	f8ad 4006 	strh.w	r4, [sp, #6]
		ST7789_WriteData(data, sizeof(data));
 80008b4:	f7ff ffa8 	bl	8000808 <ST7789_WriteData>
	}
	/* Write to RAM */
	ST7789_WriteCommand(ST7789_RAMWR);
 80008b8:	202c      	movs	r0, #44	@ 0x2c
 80008ba:	f7ff ff71 	bl	80007a0 <ST7789_WriteCommand>
	ST7789_UnSelect();
 80008be:	bf00      	nop
}
 80008c0:	b003      	add	sp, #12
 80008c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080008c4 <ST7789_SetRotation>:
{
 80008c4:	b510      	push	{r4, lr}
 80008c6:	4604      	mov	r4, r0
	ST7789_WriteCommand(ST7789_MADCTL);	// MADCTL
 80008c8:	2036      	movs	r0, #54	@ 0x36
 80008ca:	f7ff ff69 	bl	80007a0 <ST7789_WriteCommand>
	switch (m) {
 80008ce:	2c03      	cmp	r4, #3
 80008d0:	d80e      	bhi.n	80008f0 <ST7789_SetRotation+0x2c>
 80008d2:	e8df f004 	tbb	[pc, r4]
 80008d6:	0702      	.short	0x0702
 80008d8:	0b09      	.short	0x0b09
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 80008da:	20c0      	movs	r0, #192	@ 0xc0
}
 80008dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 80008e0:	f7ff bf78 	b.w	80007d4 <ST7789_WriteSmallData>
		ST7789_WriteSmallData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 80008e4:	20a0      	movs	r0, #160	@ 0xa0
 80008e6:	e7f9      	b.n	80008dc <ST7789_SetRotation+0x18>
		ST7789_WriteSmallData(ST7789_MADCTL_RGB);
 80008e8:	2000      	movs	r0, #0
 80008ea:	e7f7      	b.n	80008dc <ST7789_SetRotation+0x18>
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 80008ec:	2060      	movs	r0, #96	@ 0x60
 80008ee:	e7f5      	b.n	80008dc <ST7789_SetRotation+0x18>
}
 80008f0:	bd10      	pop	{r4, pc}
	...

080008f4 <ST7789_Fill_Color>:
 * @return none
 */
void ST7789_Fill_Color(uint16_t color)
{
	uint16_t i;
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 80008f4:	2100      	movs	r1, #0
{
 80008f6:	b570      	push	{r4, r5, r6, lr}
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 80008f8:	23ef      	movs	r3, #239	@ 0xef
{
 80008fa:	4605      	mov	r5, r0
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 80008fc:	f240 123f 	movw	r2, #319	@ 0x13f
 8000900:	4608      	mov	r0, r1
 8000902:	f7ff ffb7 	bl	8000874 <ST7789_SetAddressWindow>
	ST7789_Select();
 8000906:	bf00      	nop

	#ifdef USE_DMA
		for (i = 0; i < ST7789_HEIGHT / HOR_LEN; i++)
		{
			memset(disp_buf, color, sizeof(disp_buf));
 8000908:	4e09      	ldr	r6, [pc, #36]	@ (8000930 <ST7789_Fill_Color+0x3c>)
	ST7789_Select();
 800090a:	2430      	movs	r4, #48	@ 0x30
			memset(disp_buf, color, sizeof(disp_buf));
 800090c:	f44f 6248 	mov.w	r2, #3200	@ 0xc80
 8000910:	4629      	mov	r1, r5
 8000912:	4630      	mov	r0, r6
		for (i = 0; i < ST7789_HEIGHT / HOR_LEN; i++)
 8000914:	3c01      	subs	r4, #1
			memset(disp_buf, color, sizeof(disp_buf));
 8000916:	f002 fd1a 	bl	800334e <memset>
		for (i = 0; i < ST7789_HEIGHT / HOR_LEN; i++)
 800091a:	b2a4      	uxth	r4, r4
			ST7789_WriteData(disp_buf, sizeof(disp_buf));
 800091c:	f44f 6148 	mov.w	r1, #3200	@ 0xc80
 8000920:	4630      	mov	r0, r6
 8000922:	f7ff ff71 	bl	8000808 <ST7789_WriteData>
		for (i = 0; i < ST7789_HEIGHT / HOR_LEN; i++)
 8000926:	2c00      	cmp	r4, #0
 8000928:	d1f0      	bne.n	800090c <ST7789_Fill_Color+0x18>
				for (j = 0; j < ST7789_HEIGHT; j++) {
					uint8_t data[] = {color >> 8, color & 0xFF};
					ST7789_WriteData(data, sizeof(data));
				}
	#endif
	ST7789_UnSelect();
 800092a:	bf00      	nop
}
 800092c:	bd70      	pop	{r4, r5, r6, pc}
 800092e:	bf00      	nop
 8000930:	200001ec 	.word	0x200001ec

08000934 <ST7789_Init>:
{
 8000934:	b530      	push	{r4, r5, lr}
		memset(disp_buf, 0, sizeof(disp_buf));
 8000936:	f44f 6248 	mov.w	r2, #3200	@ 0xc80
{
 800093a:	b085      	sub	sp, #20
		memset(disp_buf, 0, sizeof(disp_buf));
 800093c:	2100      	movs	r1, #0
 800093e:	4852      	ldr	r0, [pc, #328]	@ (8000a88 <ST7789_Init+0x154>)
 8000940:	f002 fd05 	bl	800334e <memset>
	HAL_Delay(10);
 8000944:	200a      	movs	r0, #10
 8000946:	f000 fa7f 	bl	8000e48 <HAL_Delay>
    ST7789_RST_Clr();
 800094a:	2200      	movs	r2, #0
 800094c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000950:	484e      	ldr	r0, [pc, #312]	@ (8000a8c <ST7789_Init+0x158>)
 8000952:	f000 fcf5 	bl	8001340 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8000956:	200a      	movs	r0, #10
 8000958:	f000 fa76 	bl	8000e48 <HAL_Delay>
    ST7789_RST_Set();
 800095c:	2201      	movs	r2, #1
 800095e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000962:	484a      	ldr	r0, [pc, #296]	@ (8000a8c <ST7789_Init+0x158>)
 8000964:	f000 fcec 	bl	8001340 <HAL_GPIO_WritePin>
    HAL_Delay(20);
 8000968:	2014      	movs	r0, #20
 800096a:	f000 fa6d 	bl	8000e48 <HAL_Delay>
    ST7789_WriteCommand(ST7789_COLMOD);		//	Set color mode
 800096e:	203a      	movs	r0, #58	@ 0x3a
 8000970:	f7ff ff16 	bl	80007a0 <ST7789_WriteCommand>
    ST7789_WriteSmallData(ST7789_COLOR_MODE_16bit);
 8000974:	2055      	movs	r0, #85	@ 0x55
 8000976:	f7ff ff2d 	bl	80007d4 <ST7789_WriteSmallData>
  	ST7789_WriteCommand(0xB2);				//	Porch control
 800097a:	20b2      	movs	r0, #178	@ 0xb2
 800097c:	f7ff ff10 	bl	80007a0 <ST7789_WriteCommand>
		uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 8000980:	4b43      	ldr	r3, [pc, #268]	@ (8000a90 <ST7789_Init+0x15c>)
 8000982:	6818      	ldr	r0, [r3, #0]
 8000984:	9000      	str	r0, [sp, #0]
 8000986:	791b      	ldrb	r3, [r3, #4]
 8000988:	f88d 3004 	strb.w	r3, [sp, #4]
		ST7789_WriteData(data, sizeof(data));
 800098c:	2105      	movs	r1, #5
 800098e:	4668      	mov	r0, sp
 8000990:	f7ff ff3a 	bl	8000808 <ST7789_WriteData>
	ST7789_SetRotation(ST7789_ROTATION);	//	MADCTL (Display Rotation)
 8000994:	2003      	movs	r0, #3
 8000996:	f7ff ff95 	bl	80008c4 <ST7789_SetRotation>
    ST7789_WriteCommand(0XB7);				//	Gate Control
 800099a:	20b7      	movs	r0, #183	@ 0xb7
 800099c:	f7ff ff00 	bl	80007a0 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x35);			//	Default value
 80009a0:	2035      	movs	r0, #53	@ 0x35
 80009a2:	f7ff ff17 	bl	80007d4 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xBB);				//	VCOM setting
 80009a6:	20bb      	movs	r0, #187	@ 0xbb
 80009a8:	f7ff fefa 	bl	80007a0 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x19);			//	0.725v (default 0.75v for 0x20)
 80009ac:	2019      	movs	r0, #25
 80009ae:	f7ff ff11 	bl	80007d4 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC0);				//	LCMCTRL	
 80009b2:	20c0      	movs	r0, #192	@ 0xc0
 80009b4:	f7ff fef4 	bl	80007a0 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x2C);			//	Default value
 80009b8:	202c      	movs	r0, #44	@ 0x2c
 80009ba:	f7ff ff0b 	bl	80007d4 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC2);				//	VDV and VRH command Enable
 80009be:	20c2      	movs	r0, #194	@ 0xc2
 80009c0:	f7ff feee 	bl	80007a0 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x01);			//	Default value
 80009c4:	2001      	movs	r0, #1
 80009c6:	f7ff ff05 	bl	80007d4 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC3);				//	VRH set
 80009ca:	20c3      	movs	r0, #195	@ 0xc3
 80009cc:	f7ff fee8 	bl	80007a0 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x12);			//	+-4.45v (defalut +-4.1v for 0x0B)
 80009d0:	2012      	movs	r0, #18
 80009d2:	f7ff feff 	bl	80007d4 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC4);				//	VDV set
 80009d6:	20c4      	movs	r0, #196	@ 0xc4
 80009d8:	f7ff fee2 	bl	80007a0 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x20);			//	Default value
 80009dc:	2020      	movs	r0, #32
 80009de:	f7ff fef9 	bl	80007d4 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC6);				//	Frame rate control in normal mode
 80009e2:	20c6      	movs	r0, #198	@ 0xc6
 80009e4:	f7ff fedc 	bl	80007a0 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x0F);			//	Default value (60HZ)
 80009e8:	200f      	movs	r0, #15
 80009ea:	f7ff fef3 	bl	80007d4 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xD0);				//	Power control
 80009ee:	20d0      	movs	r0, #208	@ 0xd0
 80009f0:	f7ff fed6 	bl	80007a0 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0xA4);			//	Default value
 80009f4:	20a4      	movs	r0, #164	@ 0xa4
 80009f6:	f7ff feed 	bl	80007d4 <ST7789_WriteSmallData>
    ST7789_WriteSmallData (0xA1);			//	Default value
 80009fa:	20a1      	movs	r0, #161	@ 0xa1
 80009fc:	f7ff feea 	bl	80007d4 <ST7789_WriteSmallData>
	ST7789_WriteCommand(0xE0);
 8000a00:	20e0      	movs	r0, #224	@ 0xe0
 8000a02:	f7ff fecd 	bl	80007a0 <ST7789_WriteCommand>
		uint8_t data[] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
 8000a06:	4b23      	ldr	r3, [pc, #140]	@ (8000a94 <ST7789_Init+0x160>)
 8000a08:	466a      	mov	r2, sp
 8000a0a:	f103 0508 	add.w	r5, r3, #8
 8000a0e:	6818      	ldr	r0, [r3, #0]
 8000a10:	6859      	ldr	r1, [r3, #4]
 8000a12:	4614      	mov	r4, r2
 8000a14:	c403      	stmia	r4!, {r0, r1}
 8000a16:	3308      	adds	r3, #8
 8000a18:	42ab      	cmp	r3, r5
 8000a1a:	4622      	mov	r2, r4
 8000a1c:	d1f7      	bne.n	8000a0e <ST7789_Init+0xda>
 8000a1e:	6818      	ldr	r0, [r3, #0]
 8000a20:	889b      	ldrh	r3, [r3, #4]
 8000a22:	80a3      	strh	r3, [r4, #4]
 8000a24:	6020      	str	r0, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8000a26:	210e      	movs	r1, #14
 8000a28:	4668      	mov	r0, sp
 8000a2a:	f7ff feed 	bl	8000808 <ST7789_WriteData>
    ST7789_WriteCommand(0xE1);
 8000a2e:	20e1      	movs	r0, #225	@ 0xe1
 8000a30:	f7ff feb6 	bl	80007a0 <ST7789_WriteCommand>
		uint8_t data[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 8000a34:	4b18      	ldr	r3, [pc, #96]	@ (8000a98 <ST7789_Init+0x164>)
 8000a36:	466a      	mov	r2, sp
 8000a38:	f103 0508 	add.w	r5, r3, #8
 8000a3c:	6818      	ldr	r0, [r3, #0]
 8000a3e:	6859      	ldr	r1, [r3, #4]
 8000a40:	4614      	mov	r4, r2
 8000a42:	c403      	stmia	r4!, {r0, r1}
 8000a44:	3308      	adds	r3, #8
 8000a46:	42ab      	cmp	r3, r5
 8000a48:	4622      	mov	r2, r4
 8000a4a:	d1f7      	bne.n	8000a3c <ST7789_Init+0x108>
 8000a4c:	6818      	ldr	r0, [r3, #0]
 8000a4e:	889b      	ldrh	r3, [r3, #4]
 8000a50:	80a3      	strh	r3, [r4, #4]
		ST7789_WriteData(data, sizeof(data));
 8000a52:	210e      	movs	r1, #14
		uint8_t data[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 8000a54:	6020      	str	r0, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8000a56:	4668      	mov	r0, sp
 8000a58:	f7ff fed6 	bl	8000808 <ST7789_WriteData>
    ST7789_WriteCommand (ST7789_INVON);		//	Inversion ON
 8000a5c:	2021      	movs	r0, #33	@ 0x21
 8000a5e:	f7ff fe9f 	bl	80007a0 <ST7789_WriteCommand>
	ST7789_WriteCommand (ST7789_SLPOUT);	//	Out of sleep mode
 8000a62:	2011      	movs	r0, #17
 8000a64:	f7ff fe9c 	bl	80007a0 <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_NORON);		//	Normal Display on
 8000a68:	2013      	movs	r0, #19
 8000a6a:	f7ff fe99 	bl	80007a0 <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_DISPON);	//	Main screen turned on	
 8000a6e:	2029      	movs	r0, #41	@ 0x29
 8000a70:	f7ff fe96 	bl	80007a0 <ST7789_WriteCommand>
	HAL_Delay(50);
 8000a74:	2032      	movs	r0, #50	@ 0x32
 8000a76:	f000 f9e7 	bl	8000e48 <HAL_Delay>
	ST7789_Fill_Color(BLACK);				//	Fill with Black.
 8000a7a:	2000      	movs	r0, #0
}
 8000a7c:	b005      	add	sp, #20
 8000a7e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	ST7789_Fill_Color(BLACK);				//	Fill with Black.
 8000a82:	f7ff bf37 	b.w	80008f4 <ST7789_Fill_Color>
 8000a86:	bf00      	nop
 8000a88:	200001ec 	.word	0x200001ec
 8000a8c:	48000400 	.word	0x48000400
 8000a90:	080033c0 	.word	0x080033c0
 8000a94:	080033c5 	.word	0x080033c5
 8000a98:	080033d4 	.word	0x080033d4

08000a9c <ST7789_DrawPixel>:
 * @param color -> color of the Pixel
 * @return none
 */
void ST7789_DrawPixel(uint16_t x, uint16_t y, uint16_t color)
{
	if ((x < 0) || (x >= ST7789_WIDTH) ||
 8000a9c:	f5b0 7fa0 	cmp.w	r0, #320	@ 0x140
{
 8000aa0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000aa2:	460b      	mov	r3, r1
 8000aa4:	4614      	mov	r4, r2
	if ((x < 0) || (x >= ST7789_WIDTH) ||
 8000aa6:	d20d      	bcs.n	8000ac4 <ST7789_DrawPixel+0x28>
		 (y < 0) || (y >= ST7789_HEIGHT))	return;
 8000aa8:	29ef      	cmp	r1, #239	@ 0xef
 8000aaa:	d80b      	bhi.n	8000ac4 <ST7789_DrawPixel+0x28>
	
	ST7789_SetAddressWindow(x, y, x, y);
 8000aac:	4602      	mov	r2, r0
	uint8_t data[] = {color >> 8, color & 0xFF};
 8000aae:	ba64      	rev16	r4, r4
	ST7789_SetAddressWindow(x, y, x, y);
 8000ab0:	f7ff fee0 	bl	8000874 <ST7789_SetAddressWindow>
	uint8_t data[] = {color >> 8, color & 0xFF};
 8000ab4:	f8ad 4004 	strh.w	r4, [sp, #4]
	ST7789_Select();
 8000ab8:	bf00      	nop
	ST7789_WriteData(data, sizeof(data));
 8000aba:	2102      	movs	r1, #2
 8000abc:	a801      	add	r0, sp, #4
 8000abe:	f7ff fea3 	bl	8000808 <ST7789_WriteData>
	ST7789_UnSelect();
 8000ac2:	bf00      	nop
}
 8000ac4:	b003      	add	sp, #12
 8000ac6:	bd30      	pop	{r4, r5, pc}

08000ac8 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ac8:	4b0b      	ldr	r3, [pc, #44]	@ (8000af8 <HAL_MspInit+0x30>)
 8000aca:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000acc:	f042 0201 	orr.w	r2, r2, #1
 8000ad0:	661a      	str	r2, [r3, #96]	@ 0x60
 8000ad2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
{
 8000ad4:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ad6:	f002 0201 	and.w	r2, r2, #1
 8000ada:	9200      	str	r2, [sp, #0]
 8000adc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ade:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000ae0:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000ae4:	659a      	str	r2, [r3, #88]	@ 0x58
 8000ae6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ae8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000aec:	9301      	str	r3, [sp, #4]
 8000aee:	9b01      	ldr	r3, [sp, #4]
  HAL_PWREx_DisableUCPDDeadBattery();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000af0:	b002      	add	sp, #8
  HAL_PWREx_DisableUCPDDeadBattery();
 8000af2:	f000 bf41 	b.w	8001978 <HAL_PWREx_DisableUCPDDeadBattery>
 8000af6:	bf00      	nop
 8000af8:	40021000 	.word	0x40021000

08000afc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000b00:	b09e      	sub	sp, #120	@ 0x78
 8000b02:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b04:	2214      	movs	r2, #20
 8000b06:	2100      	movs	r1, #0
 8000b08:	a804      	add	r0, sp, #16
 8000b0a:	f002 fc20 	bl	800334e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b0e:	2254      	movs	r2, #84	@ 0x54
 8000b10:	2100      	movs	r1, #0
 8000b12:	a809      	add	r0, sp, #36	@ 0x24
 8000b14:	f002 fc1b 	bl	800334e <memset>
  if(hi2c->Instance==I2C1)
 8000b18:	6822      	ldr	r2, [r4, #0]
 8000b1a:	4b22      	ldr	r3, [pc, #136]	@ (8000ba4 <HAL_I2C_MspInit+0xa8>)
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	d13e      	bne.n	8000b9e <HAL_I2C_MspInit+0xa2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000b20:	2340      	movs	r3, #64	@ 0x40
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b22:	a809      	add	r0, sp, #36	@ 0x24
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000b24:	9309      	str	r3, [sp, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b26:	f001 fa65 	bl	8001ff4 <HAL_RCCEx_PeriphCLKConfig>
 8000b2a:	b108      	cbz	r0, 8000b30 <HAL_I2C_MspInit+0x34>
    {
      Error_Handler();
 8000b2c:	f7ff fe36 	bl	800079c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b30:	4c1d      	ldr	r4, [pc, #116]	@ (8000ba8 <HAL_I2C_MspInit+0xac>)
 8000b32:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8000b34:	f043 0301 	orr.w	r3, r3, #1
 8000b38:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8000b3a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8000b3c:	f003 0301 	and.w	r3, r3, #1
 8000b40:	9301      	str	r3, [sp, #4]
 8000b42:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b44:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8000b46:	f043 0302 	orr.w	r3, r3, #2
 8000b4a:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8000b4c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8000b4e:	f003 0302 	and.w	r3, r3, #2
 8000b52:	9302      	str	r3, [sp, #8]
 8000b54:	9b02      	ldr	r3, [sp, #8]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b56:	f04f 0812 	mov.w	r8, #18
 8000b5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b5e:	2701      	movs	r7, #1
 8000b60:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b62:	2504      	movs	r5, #4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b64:	a904      	add	r1, sp, #16
 8000b66:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b6a:	e9cd 3804 	strd	r3, r8, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b6e:	e9cd 7606 	strd	r7, r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b72:	9508      	str	r5, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b74:	f000 fb1a 	bl	80011ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000b78:	2380      	movs	r3, #128	@ 0x80
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b7a:	480c      	ldr	r0, [pc, #48]	@ (8000bac <HAL_I2C_MspInit+0xb0>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b7c:	9508      	str	r5, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b7e:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b80:	e9cd 3804 	strd	r3, r8, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b84:	e9cd 7606 	strd	r7, r6, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b88:	f000 fb10 	bl	80011ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b8c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8000b8e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b92:	65a3      	str	r3, [r4, #88]	@ 0x58
 8000b94:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8000b96:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b9a:	9303      	str	r3, [sp, #12]
 8000b9c:	9b03      	ldr	r3, [sp, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000b9e:	b01e      	add	sp, #120	@ 0x78
 8000ba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000ba4:	40005400 	.word	0x40005400
 8000ba8:	40021000 	.word	0x40021000
 8000bac:	48000400 	.word	0x48000400

08000bb0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bb0:	b530      	push	{r4, r5, lr}
 8000bb2:	4605      	mov	r5, r0
 8000bb4:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb6:	2214      	movs	r2, #20
 8000bb8:	2100      	movs	r1, #0
 8000bba:	a803      	add	r0, sp, #12
 8000bbc:	f002 fbc7 	bl	800334e <memset>
  if(hspi->Instance==SPI2)
 8000bc0:	682a      	ldr	r2, [r5, #0]
 8000bc2:	4b1d      	ldr	r3, [pc, #116]	@ (8000c38 <HAL_SPI_MspInit+0x88>)
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	d135      	bne.n	8000c34 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000bc8:	f503 33ec 	add.w	r3, r3, #120832	@ 0x1d800
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bcc:	481b      	ldr	r0, [pc, #108]	@ (8000c3c <HAL_SPI_MspInit+0x8c>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000bce:	6d9a      	ldr	r2, [r3, #88]	@ 0x58

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel1;
 8000bd0:	4c1b      	ldr	r4, [pc, #108]	@ (8000c40 <HAL_SPI_MspInit+0x90>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000bd2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000bd6:	659a      	str	r2, [r3, #88]	@ 0x58
 8000bd8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000bda:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8000bde:	9201      	str	r2, [sp, #4]
 8000be0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000be2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000be4:	f042 0202 	orr.w	r2, r2, #2
 8000be8:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000bea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bec:	f003 0302 	and.w	r3, r3, #2
 8000bf0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf2:	f44f 4220 	mov.w	r2, #40960	@ 0xa000
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bfe:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c00:	2305      	movs	r3, #5
 8000c02:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c04:	f000 fad2 	bl	80011ac <HAL_GPIO_Init>
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8000c08:	490e      	ldr	r1, [pc, #56]	@ (8000c44 <HAL_SPI_MspInit+0x94>)
 8000c0a:	230d      	movs	r3, #13
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c0c:	2010      	movs	r0, #16
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8000c0e:	e9c4 1300 	strd	r1, r3, [r4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c12:	2300      	movs	r3, #0
 8000c14:	e9c4 0302 	strd	r0, r3, [r4, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000c18:	2280      	movs	r2, #128	@ 0x80
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000c1a:	4620      	mov	r0, r4
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c1c:	e9c4 2304 	strd	r2, r3, [r4, #16]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8000c20:	e9c4 3306 	strd	r3, r3, [r4, #24]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000c24:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000c26:	f000 f9c7 	bl	8000fb8 <HAL_DMA_Init>
 8000c2a:	b108      	cbz	r0, 8000c30 <HAL_SPI_MspInit+0x80>
    {
      Error_Handler();
 8000c2c:	f7ff fdb6 	bl	800079c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8000c30:	656c      	str	r4, [r5, #84]	@ 0x54
 8000c32:	62a5      	str	r5, [r4, #40]	@ 0x28

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8000c34:	b009      	add	sp, #36	@ 0x24
 8000c36:	bd30      	pop	{r4, r5, pc}
 8000c38:	40003800 	.word	0x40003800
 8000c3c:	48000400 	.word	0x48000400
 8000c40:	200000d4 	.word	0x200000d4
 8000c44:	40020008 	.word	0x40020008

08000c48 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM1)
 8000c48:	6802      	ldr	r2, [r0, #0]
 8000c4a:	4b08      	ldr	r3, [pc, #32]	@ (8000c6c <HAL_TIM_PWM_MspInit+0x24>)
 8000c4c:	429a      	cmp	r2, r3
{
 8000c4e:	b082      	sub	sp, #8
  if(htim_pwm->Instance==TIM1)
 8000c50:	d10a      	bne.n	8000c68 <HAL_TIM_PWM_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c52:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 8000c56:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000c58:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8000c5c:	661a      	str	r2, [r3, #96]	@ 0x60
 8000c5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000c64:	9301      	str	r3, [sp, #4]
 8000c66:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000c68:	b002      	add	sp, #8
 8000c6a:	4770      	bx	lr
 8000c6c:	40012c00 	.word	0x40012c00

08000c70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c70:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM7)
 8000c72:	4b0e      	ldr	r3, [pc, #56]	@ (8000cac <HAL_TIM_Base_MspInit+0x3c>)
 8000c74:	6802      	ldr	r2, [r0, #0]
 8000c76:	429a      	cmp	r2, r3
 8000c78:	d115      	bne.n	8000ca6 <HAL_TIM_Base_MspInit+0x36>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000c7a:	f503 33fe 	add.w	r3, r3, #130048	@ 0x1fc00
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 0, 0);
 8000c7e:	2037      	movs	r0, #55	@ 0x37
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000c80:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000c82:	f042 0220 	orr.w	r2, r2, #32
 8000c86:	659a      	str	r2, [r3, #88]	@ 0x58
 8000c88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 0, 0);
 8000c8a:	2200      	movs	r2, #0
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000c8c:	f003 0320 	and.w	r3, r3, #32
 8000c90:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 0, 0);
 8000c92:	4611      	mov	r1, r2
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000c94:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 0, 0);
 8000c96:	f000 f8fd 	bl	8000e94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 8000c9a:	2037      	movs	r0, #55	@ 0x37

  /* USER CODE END TIM7_MspInit 1 */

  }

}
 8000c9c:	b003      	add	sp, #12
 8000c9e:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 8000ca2:	f000 b929 	b.w	8000ef8 <HAL_NVIC_EnableIRQ>
}
 8000ca6:	b003      	add	sp, #12
 8000ca8:	f85d fb04 	ldr.w	pc, [sp], #4
 8000cac:	40001400 	.word	0x40001400

08000cb0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000cb0:	b510      	push	{r4, lr}
 8000cb2:	4604      	mov	r4, r0
 8000cb4:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb6:	2214      	movs	r2, #20
 8000cb8:	2100      	movs	r1, #0
 8000cba:	a801      	add	r0, sp, #4
 8000cbc:	f002 fb47 	bl	800334e <memset>
  if(htim->Instance==TIM1)
 8000cc0:	6822      	ldr	r2, [r4, #0]
 8000cc2:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf4 <HAL_TIM_MspPostInit+0x44>)
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	d113      	bne.n	8000cf0 <HAL_TIM_MspPostInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cc8:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
    GPIO_InitStruct.Pin = TLC5952_PWM_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
    HAL_GPIO_Init(TLC5952_PWM_GPIO_Port, &GPIO_InitStruct);
 8000ccc:	480a      	ldr	r0, [pc, #40]	@ (8000cf8 <HAL_TIM_MspPostInit+0x48>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000cd0:	f042 0204 	orr.w	r2, r2, #4
 8000cd4:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000cd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cd8:	f003 0304 	and.w	r3, r3, #4
 8000cdc:	9300      	str	r3, [sp, #0]
 8000cde:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce0:	2208      	movs	r2, #8
 8000ce2:	2302      	movs	r3, #2
    HAL_GPIO_Init(TLC5952_PWM_GPIO_Port, &GPIO_InitStruct);
 8000ce4:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce6:	e9cd 2301 	strd	r2, r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000cea:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(TLC5952_PWM_GPIO_Port, &GPIO_InitStruct);
 8000cec:	f000 fa5e 	bl	80011ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000cf0:	b006      	add	sp, #24
 8000cf2:	bd10      	pop	{r4, pc}
 8000cf4:	40012c00 	.word	0x40012c00
 8000cf8:	48000800 	.word	0x48000800

08000cfc <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cfc:	e7fe      	b.n	8000cfc <NMI_Handler>

08000cfe <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cfe:	e7fe      	b.n	8000cfe <HardFault_Handler>

08000d00 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d00:	e7fe      	b.n	8000d00 <MemManage_Handler>

08000d02 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d02:	e7fe      	b.n	8000d02 <BusFault_Handler>

08000d04 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d04:	e7fe      	b.n	8000d04 <UsageFault_Handler>

08000d06 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d06:	4770      	bx	lr

08000d08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8000d08:	4770      	bx	lr

08000d0a <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8000d0a:	4770      	bx	lr

08000d0c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d0c:	f000 b88a 	b.w	8000e24 <HAL_IncTick>

08000d10 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000d10:	4801      	ldr	r0, [pc, #4]	@ (8000d18 <DMA1_Channel1_IRQHandler+0x8>)
 8000d12:	f000 ba01 	b.w	8001118 <HAL_DMA_IRQHandler>
 8000d16:	bf00      	nop
 8000d18:	200000d4 	.word	0x200000d4

08000d1c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d1c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	  FT6336_GetTouchPoint(&TouchPoints);
 8000d1e:	4c08      	ldr	r4, [pc, #32]	@ (8000d40 <EXTI15_10_IRQHandler+0x24>)
 8000d20:	4620      	mov	r0, r4
 8000d22:	f7ff fb57 	bl	80003d4 <FT6336_GetTouchPoint>

	  ST7789_DrawPixel(TouchPoints.point1_x, TouchPoints.point1_y, 0xffffff);
 8000d26:	8820      	ldrh	r0, [r4, #0]
 8000d28:	8861      	ldrh	r1, [r4, #2]
 8000d2a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d2e:	f7ff feb5 	bl	8000a9c <ST7789_DrawPixel>
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000d36:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8000d3a:	f000 bb07 	b.w	800134c <HAL_GPIO_EXTI_IRQHandler>
 8000d3e:	bf00      	nop
 8000d40:	20000034 	.word	0x20000034

08000d44 <TIM7_DAC_IRQHandler>:
void TIM7_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM7_DAC_IRQn 0 */

  /* USER CODE END TIM7_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000d44:	4801      	ldr	r0, [pc, #4]	@ (8000d4c <TIM7_DAC_IRQHandler+0x8>)
 8000d46:	f001 bf48 	b.w	8002bda <HAL_TIM_IRQHandler>
 8000d4a:	bf00      	nop
 8000d4c:	2000003c 	.word	0x2000003c

08000d50 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d50:	4a03      	ldr	r2, [pc, #12]	@ (8000d60 <SystemInit+0x10>)
 8000d52:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8000d56:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d5a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d5e:	4770      	bx	lr
 8000d60:	e000ed00 	.word	0xe000ed00

08000d64 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d64:	480d      	ldr	r0, [pc, #52]	@ (8000d9c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d66:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d68:	f7ff fff2 	bl	8000d50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d6c:	480c      	ldr	r0, [pc, #48]	@ (8000da0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d6e:	490d      	ldr	r1, [pc, #52]	@ (8000da4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d70:	4a0d      	ldr	r2, [pc, #52]	@ (8000da8 <LoopForever+0xe>)
  movs r3, #0
 8000d72:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000d74:	e002      	b.n	8000d7c <LoopCopyDataInit>

08000d76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d7a:	3304      	adds	r3, #4

08000d7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d80:	d3f9      	bcc.n	8000d76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d82:	4a0a      	ldr	r2, [pc, #40]	@ (8000dac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d84:	4c0a      	ldr	r4, [pc, #40]	@ (8000db0 <LoopForever+0x16>)
  movs r3, #0
 8000d86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d88:	e001      	b.n	8000d8e <LoopFillZerobss>

08000d8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d8c:	3204      	adds	r2, #4

08000d8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d90:	d3fb      	bcc.n	8000d8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d92:	f002 fae5 	bl	8003360 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d96:	f7ff fb9b 	bl	80004d0 <main>

08000d9a <LoopForever>:

LoopForever:
    b LoopForever
 8000d9a:	e7fe      	b.n	8000d9a <LoopForever>
  ldr   r0, =_estack
 8000d9c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000da0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000da4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000da8:	080033fc 	.word	0x080033fc
  ldr r2, =_sbss
 8000dac:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000db0:	20000e70 	.word	0x20000e70

08000db4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000db4:	e7fe      	b.n	8000db4 <ADC1_2_IRQHandler>
	...

08000db8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000db8:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8000dba:	4b0f      	ldr	r3, [pc, #60]	@ (8000df8 <HAL_InitTick+0x40>)
 8000dbc:	681a      	ldr	r2, [r3, #0]
{
 8000dbe:	4605      	mov	r5, r0
  if (uwTickFreq != 0U)
 8000dc0:	b90a      	cbnz	r2, 8000dc6 <HAL_InitTick+0xe>
        status = HAL_ERROR;
      }
    }
    else
    {
      status = HAL_ERROR;
 8000dc2:	2001      	movs	r0, #1
    status = HAL_ERROR;
  }

  /* Return function status */
  return status;
}
 8000dc4:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000dc6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dca:	fbb3 f3f2 	udiv	r3, r3, r2
 8000dce:	4a0b      	ldr	r2, [pc, #44]	@ (8000dfc <HAL_InitTick+0x44>)
 8000dd0:	6810      	ldr	r0, [r2, #0]
 8000dd2:	fbb0 f0f3 	udiv	r0, r0, r3
 8000dd6:	f000 f89d 	bl	8000f14 <HAL_SYSTICK_Config>
 8000dda:	4604      	mov	r4, r0
 8000ddc:	2800      	cmp	r0, #0
 8000dde:	d1f0      	bne.n	8000dc2 <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000de0:	2d0f      	cmp	r5, #15
 8000de2:	d8ee      	bhi.n	8000dc2 <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000de4:	4602      	mov	r2, r0
 8000de6:	4629      	mov	r1, r5
 8000de8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dec:	f000 f852 	bl	8000e94 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000df0:	4b03      	ldr	r3, [pc, #12]	@ (8000e00 <HAL_InitTick+0x48>)
 8000df2:	4620      	mov	r0, r4
 8000df4:	601d      	str	r5, [r3, #0]
  return status;
 8000df6:	e7e5      	b.n	8000dc4 <HAL_InitTick+0xc>
 8000df8:	20000008 	.word	0x20000008
 8000dfc:	20000004 	.word	0x20000004
 8000e00:	2000000c 	.word	0x2000000c

08000e04 <HAL_Init>:
{
 8000e04:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e06:	2003      	movs	r0, #3
 8000e08:	f000 f832 	bl	8000e70 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e0c:	200f      	movs	r0, #15
 8000e0e:	f7ff ffd3 	bl	8000db8 <HAL_InitTick>
 8000e12:	4604      	mov	r4, r0
 8000e14:	b918      	cbnz	r0, 8000e1e <HAL_Init+0x1a>
    HAL_MspInit();
 8000e16:	f7ff fe57 	bl	8000ac8 <HAL_MspInit>
}
 8000e1a:	4620      	mov	r0, r4
 8000e1c:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8000e1e:	2401      	movs	r4, #1
 8000e20:	e7fb      	b.n	8000e1a <HAL_Init+0x16>
	...

08000e24 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000e24:	4a03      	ldr	r2, [pc, #12]	@ (8000e34 <HAL_IncTick+0x10>)
 8000e26:	4904      	ldr	r1, [pc, #16]	@ (8000e38 <HAL_IncTick+0x14>)
 8000e28:	6813      	ldr	r3, [r2, #0]
 8000e2a:	6809      	ldr	r1, [r1, #0]
 8000e2c:	440b      	add	r3, r1
 8000e2e:	6013      	str	r3, [r2, #0]
}
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	20000e6c 	.word	0x20000e6c
 8000e38:	20000008 	.word	0x20000008

08000e3c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000e3c:	4b01      	ldr	r3, [pc, #4]	@ (8000e44 <HAL_GetTick+0x8>)
 8000e3e:	6818      	ldr	r0, [r3, #0]
}
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	20000e6c 	.word	0x20000e6c

08000e48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e48:	b538      	push	{r3, r4, r5, lr}
 8000e4a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000e4c:	f7ff fff6 	bl	8000e3c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e50:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000e52:	bf1c      	itt	ne
 8000e54:	4b05      	ldrne	r3, [pc, #20]	@ (8000e6c <HAL_Delay+0x24>)
 8000e56:	681b      	ldrne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000e58:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000e5a:	bf18      	it	ne
 8000e5c:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e5e:	f7ff ffed 	bl	8000e3c <HAL_GetTick>
 8000e62:	1b43      	subs	r3, r0, r5
 8000e64:	42a3      	cmp	r3, r4
 8000e66:	d3fa      	bcc.n	8000e5e <HAL_Delay+0x16>
  {
  }
}
 8000e68:	bd38      	pop	{r3, r4, r5, pc}
 8000e6a:	bf00      	nop
 8000e6c:	20000008 	.word	0x20000008

08000e70 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e70:	4907      	ldr	r1, [pc, #28]	@ (8000e90 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000e72:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e74:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e78:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e7a:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e7c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e80:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e84:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8000e8c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000e8e:	4770      	bx	lr
 8000e90:	e000ed00 	.word	0xe000ed00

08000e94 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e94:	4b16      	ldr	r3, [pc, #88]	@ (8000ef0 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e96:	b530      	push	{r4, r5, lr}
 8000e98:	68dc      	ldr	r4, [r3, #12]
 8000e9a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e9e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ea2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ea4:	2b04      	cmp	r3, #4
 8000ea6:	bf28      	it	cs
 8000ea8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eaa:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eac:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eb0:	bf8c      	ite	hi
 8000eb2:	3c03      	subhi	r4, #3
 8000eb4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb6:	fa05 f303 	lsl.w	r3, r5, r3
 8000eba:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ebe:	40a5      	lsls	r5, r4
 8000ec0:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec4:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 8000ec6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec8:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ecc:	bfac      	ite	ge
 8000ece:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed2:	4a08      	ldrlt	r2, [pc, #32]	@ (8000ef4 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed4:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed8:	bfb8      	it	lt
 8000eda:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	bfaa      	itet	ge
 8000ee2:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee6:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee8:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000eec:	bd30      	pop	{r4, r5, pc}
 8000eee:	bf00      	nop
 8000ef0:	e000ed00 	.word	0xe000ed00
 8000ef4:	e000ed14 	.word	0xe000ed14

08000ef8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000ef8:	2800      	cmp	r0, #0
 8000efa:	db07      	blt.n	8000f0c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000efc:	4a04      	ldr	r2, [pc, #16]	@ (8000f10 <HAL_NVIC_EnableIRQ+0x18>)
 8000efe:	0941      	lsrs	r1, r0, #5
 8000f00:	2301      	movs	r3, #1
 8000f02:	f000 001f 	and.w	r0, r0, #31
 8000f06:	4083      	lsls	r3, r0
 8000f08:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	e000e100 	.word	0xe000e100

08000f14 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f14:	3801      	subs	r0, #1
 8000f16:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000f1a:	d20b      	bcs.n	8000f34 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f1c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f20:	4a05      	ldr	r2, [pc, #20]	@ (8000f38 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f22:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f24:	21f0      	movs	r1, #240	@ 0xf0
 8000f26:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f2a:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f2c:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f2e:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f30:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f32:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000f34:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000f36:	4770      	bx	lr
 8000f38:	e000ed00 	.word	0xe000ed00

08000f3c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f3c:	b570      	push	{r4, r5, r6, lr}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000f3e:	e9d0 4513 	ldrd	r4, r5, [r0, #76]	@ 0x4c
 8000f42:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8000f44:	6d44      	ldr	r4, [r0, #84]	@ 0x54
 8000f46:	b114      	cbz	r4, 8000f4e <DMA_SetConfig+0x12>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000f48:	e9d0 4516 	ldrd	r4, r5, [r0, #88]	@ 0x58
 8000f4c:	6065      	str	r5, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000f4e:	e9d0 5410 	ldrd	r5, r4, [r0, #64]	@ 0x40
 8000f52:	f004 061f 	and.w	r6, r4, #31
 8000f56:	2401      	movs	r4, #1
 8000f58:	40b4      	lsls	r4, r6
 8000f5a:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000f5c:	6804      	ldr	r4, [r0, #0]
 8000f5e:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000f60:	6883      	ldr	r3, [r0, #8]
 8000f62:	2b10      	cmp	r3, #16
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000f64:	bf0b      	itete	eq
 8000f66:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8000f68:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8000f6a:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8000f6c:	60e2      	strne	r2, [r4, #12]
  }
}
 8000f6e:	bd70      	pop	{r4, r5, r6, pc}

08000f70 <DMA_CalcDMAMUXChannelBaseAndMask>:
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8000f70:	6803      	ldr	r3, [r0, #0]
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8000f72:	490d      	ldr	r1, [pc, #52]	@ (8000fa8 <DMA_CalcDMAMUXChannelBaseAndMask+0x38>)
 8000f74:	4a0d      	ldr	r2, [pc, #52]	@ (8000fac <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>)
{
 8000f76:	b510      	push	{r4, lr}
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8000f78:	4c0d      	ldr	r4, [pc, #52]	@ (8000fb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x40>)
 8000f7a:	42a3      	cmp	r3, r4
 8000f7c:	bf88      	it	hi
 8000f7e:	460a      	movhi	r2, r1
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8000f80:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 8000f82:	f021 0103 	bic.w	r1, r1, #3
 8000f86:	440a      	add	r2, r1
 8000f88:	6482      	str	r2, [r0, #72]	@ 0x48
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8000f8a:	b2db      	uxtb	r3, r3
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8000f8c:	4a09      	ldr	r2, [pc, #36]	@ (8000fb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x44>)
 8000f8e:	64c2      	str	r2, [r0, #76]	@ 0x4c
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8000f90:	3b08      	subs	r3, #8
 8000f92:	2214      	movs	r2, #20
 8000f94:	fbb3 f3f2 	udiv	r3, r3, r2
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8000f98:	2201      	movs	r2, #1
 8000f9a:	f003 031f 	and.w	r3, r3, #31
 8000f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa2:	6503      	str	r3, [r0, #80]	@ 0x50
}
 8000fa4:	bd10      	pop	{r4, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40020820 	.word	0x40020820
 8000fac:	40020800 	.word	0x40020800
 8000fb0:	40020407 	.word	0x40020407
 8000fb4:	40020880 	.word	0x40020880

08000fb8 <HAL_DMA_Init>:
{
 8000fb8:	b538      	push	{r3, r4, r5, lr}
  if (hdma == NULL)
 8000fba:	2800      	cmp	r0, #0
 8000fbc:	d059      	beq.n	8001072 <HAL_DMA_Init+0xba>
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000fbe:	6802      	ldr	r2, [r0, #0]
 8000fc0:	4b2d      	ldr	r3, [pc, #180]	@ (8001078 <HAL_DMA_Init+0xc0>)
 8000fc2:	429a      	cmp	r2, r3
 8000fc4:	f04f 0114 	mov.w	r1, #20
 8000fc8:	d847      	bhi.n	800105a <HAL_DMA_Init+0xa2>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000fca:	4b2c      	ldr	r3, [pc, #176]	@ (800107c <HAL_DMA_Init+0xc4>)
 8000fcc:	4413      	add	r3, r2
 8000fce:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fd2:	492b      	ldr	r1, [pc, #172]	@ (8001080 <HAL_DMA_Init+0xc8>)
 8000fd4:	009b      	lsls	r3, r3, #2
    hdma->DmaBaseAddress = DMA1;
 8000fd6:	e9c0 1310 	strd	r1, r3, [r0, #64]	@ 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
  tmp |=  hdma->Init.Direction        |
 8000fe0:	e9d0 4302 	ldrd	r4, r3, [r0, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fe4:	6905      	ldr	r5, [r0, #16]
  tmp = hdma->Instance->CCR;
 8000fe6:	6811      	ldr	r1, [r2, #0]
  tmp |=  hdma->Init.Direction        |
 8000fe8:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fea:	432b      	orrs	r3, r5
 8000fec:	6945      	ldr	r5, [r0, #20]
 8000fee:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ff0:	6985      	ldr	r5, [r0, #24]
 8000ff2:	432b      	orrs	r3, r5
 8000ff4:	69c5      	ldr	r5, [r0, #28]
 8000ff6:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ff8:	6a05      	ldr	r5, [r0, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000ffa:	f421 41ff 	bic.w	r1, r1, #32640	@ 0x7f80
 8000ffe:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 8001002:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 8001004:	430b      	orrs	r3, r1
  hdma->Instance->CCR = tmp;
 8001006:	6013      	str	r3, [r2, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001008:	f7ff ffb2 	bl	8000f70 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800100c:	f5b4 4f80 	cmp.w	r4, #16384	@ 0x4000
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001010:	bf04      	itt	eq
 8001012:	2300      	moveq	r3, #0
 8001014:	6043      	streq	r3, [r0, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001016:	6843      	ldr	r3, [r0, #4]
 8001018:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 800101a:	b2da      	uxtb	r2, r3
 800101c:	600a      	str	r2, [r1, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800101e:	e9d0 1413 	ldrd	r1, r4, [r0, #76]	@ 0x4c
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001022:	3b01      	subs	r3, #1
 8001024:	2b03      	cmp	r3, #3
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001026:	604c      	str	r4, [r1, #4]
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001028:	d81e      	bhi.n	8001068 <HAL_DMA_Init+0xb0>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800102a:	4b16      	ldr	r3, [pc, #88]	@ (8001084 <HAL_DMA_Init+0xcc>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800102c:	4916      	ldr	r1, [pc, #88]	@ (8001088 <HAL_DMA_Init+0xd0>)
 800102e:	6581      	str	r1, [r0, #88]	@ 0x58
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001030:	4413      	add	r3, r2
 8001032:	009b      	lsls	r3, r3, #2

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001034:	2101      	movs	r1, #1
 8001036:	3a01      	subs	r2, #1
 8001038:	fa01 f202 	lsl.w	r2, r1, r2
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800103c:	2100      	movs	r1, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800103e:	6543      	str	r3, [r0, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001040:	65c2      	str	r2, [r0, #92]	@ 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001042:	6019      	str	r1, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001044:	4b11      	ldr	r3, [pc, #68]	@ (800108c <HAL_DMA_Init+0xd4>)
 8001046:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001048:	2300      	movs	r3, #0
  hdma->State  = HAL_DMA_STATE_READY;
 800104a:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800104c:	63c3      	str	r3, [r0, #60]	@ 0x3c
  hdma->Lock = HAL_UNLOCKED;
 800104e:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 8001052:	f880 2025 	strb.w	r2, [r0, #37]	@ 0x25
  return HAL_OK;
 8001056:	4618      	mov	r0, r3
}
 8001058:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800105a:	4b0d      	ldr	r3, [pc, #52]	@ (8001090 <HAL_DMA_Init+0xd8>)
 800105c:	4413      	add	r3, r2
 800105e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001062:	490c      	ldr	r1, [pc, #48]	@ (8001094 <HAL_DMA_Init+0xdc>)
 8001064:	009b      	lsls	r3, r3, #2
    hdma->DmaBaseAddress = DMA2;
 8001066:	e7b6      	b.n	8000fd6 <HAL_DMA_Init+0x1e>
    hdma->DMAmuxRequestGen = 0U;
 8001068:	2300      	movs	r3, #0
    hdma->DMAmuxRequestGenStatus = 0U;
 800106a:	e9c0 3315 	strd	r3, r3, [r0, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800106e:	65c3      	str	r3, [r0, #92]	@ 0x5c
 8001070:	e7ea      	b.n	8001048 <HAL_DMA_Init+0x90>
    return HAL_ERROR;
 8001072:	2001      	movs	r0, #1
 8001074:	e7f0      	b.n	8001058 <HAL_DMA_Init+0xa0>
 8001076:	bf00      	nop
 8001078:	40020407 	.word	0x40020407
 800107c:	bffdfff8 	.word	0xbffdfff8
 8001080:	40020000 	.word	0x40020000
 8001084:	1000823f 	.word	0x1000823f
 8001088:	40020940 	.word	0x40020940
 800108c:	40020900 	.word	0x40020900
 8001090:	bffdfbf8 	.word	0xbffdfbf8
 8001094:	40020400 	.word	0x40020400

08001098 <HAL_DMA_Start_IT>:
{
 8001098:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 800109a:	f890 5024 	ldrb.w	r5, [r0, #36]	@ 0x24
 800109e:	2d01      	cmp	r5, #1
{
 80010a0:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 80010a2:	d037      	beq.n	8001114 <HAL_DMA_Start_IT+0x7c>
 80010a4:	2501      	movs	r5, #1
 80010a6:	f880 5024 	strb.w	r5, [r0, #36]	@ 0x24
  if (HAL_DMA_STATE_READY == hdma->State)
 80010aa:	f890 5025 	ldrb.w	r5, [r0, #37]	@ 0x25
 80010ae:	2d01      	cmp	r5, #1
 80010b0:	f04f 0500 	mov.w	r5, #0
 80010b4:	d12c      	bne.n	8001110 <HAL_DMA_Start_IT+0x78>
    hdma->State = HAL_DMA_STATE_BUSY;
 80010b6:	2602      	movs	r6, #2
 80010b8:	f880 6025 	strb.w	r6, [r0, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010bc:	63c5      	str	r5, [r0, #60]	@ 0x3c
    __HAL_DMA_DISABLE(hdma);
 80010be:	6805      	ldr	r5, [r0, #0]
 80010c0:	682e      	ldr	r6, [r5, #0]
 80010c2:	f026 0601 	bic.w	r6, r6, #1
 80010c6:	602e      	str	r6, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80010c8:	f7ff ff38 	bl	8000f3c <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 80010cc:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80010ce:	b1bb      	cbz	r3, 8001100 <HAL_DMA_Start_IT+0x68>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010d0:	682b      	ldr	r3, [r5, #0]
 80010d2:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80010d6:	602b      	str	r3, [r5, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80010d8:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	03d2      	lsls	r2, r2, #15
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80010de:	bf42      	ittt	mi
 80010e0:	681a      	ldrmi	r2, [r3, #0]
 80010e2:	f442 7280 	orrmi.w	r2, r2, #256	@ 0x100
 80010e6:	601a      	strmi	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 80010e8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80010ea:	b11b      	cbz	r3, 80010f4 <HAL_DMA_Start_IT+0x5c>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80010f2:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 80010f4:	682b      	ldr	r3, [r5, #0]
 80010f6:	f043 0301 	orr.w	r3, r3, #1
 80010fa:	602b      	str	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80010fc:	2000      	movs	r0, #0
}
 80010fe:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001100:	682b      	ldr	r3, [r5, #0]
 8001102:	f023 0304 	bic.w	r3, r3, #4
 8001106:	602b      	str	r3, [r5, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001108:	682b      	ldr	r3, [r5, #0]
 800110a:	f043 030a 	orr.w	r3, r3, #10
 800110e:	e7e2      	b.n	80010d6 <HAL_DMA_Start_IT+0x3e>
    __HAL_UNLOCK(hdma);
 8001110:	f880 5024 	strb.w	r5, [r0, #36]	@ 0x24
  __HAL_LOCK(hdma);
 8001114:	2002      	movs	r0, #2
 8001116:	e7f2      	b.n	80010fe <HAL_DMA_Start_IT+0x66>

08001118 <HAL_DMA_IRQHandler>:
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001118:	6c01      	ldr	r1, [r0, #64]	@ 0x40
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800111a:	6c42      	ldr	r2, [r0, #68]	@ 0x44
  uint32_t source_it = hdma->Instance->CCR;
 800111c:	6803      	ldr	r3, [r0, #0]
{
 800111e:	b470      	push	{r4, r5, r6}
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001120:	f002 021f 	and.w	r2, r2, #31
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001124:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001126:	681d      	ldr	r5, [r3, #0]
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001128:	2404      	movs	r4, #4
 800112a:	4094      	lsls	r4, r2
 800112c:	4234      	tst	r4, r6
 800112e:	d00e      	beq.n	800114e <HAL_DMA_IRQHandler+0x36>
 8001130:	f015 0f04 	tst.w	r5, #4
 8001134:	d00b      	beq.n	800114e <HAL_DMA_IRQHandler+0x36>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	0692      	lsls	r2, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800113a:	bf5e      	ittt	pl
 800113c:	681a      	ldrpl	r2, [r3, #0]
 800113e:	f022 0204 	bicpl.w	r2, r2, #4
 8001142:	601a      	strpl	r2, [r3, #0]
    if (hdma->XferHalfCpltCallback != NULL)
 8001144:	6b03      	ldr	r3, [r0, #48]	@ 0x30
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001146:	604c      	str	r4, [r1, #4]
    if (hdma->XferErrorCallback != NULL)
 8001148:	b373      	cbz	r3, 80011a8 <HAL_DMA_IRQHandler+0x90>
}
 800114a:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 800114c:	4718      	bx	r3
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800114e:	2402      	movs	r4, #2
 8001150:	4094      	lsls	r4, r2
 8001152:	4234      	tst	r4, r6
 8001154:	d012      	beq.n	800117c <HAL_DMA_IRQHandler+0x64>
           && (0U != (source_it & DMA_IT_TC)))
 8001156:	f015 0f02 	tst.w	r5, #2
 800115a:	d00f      	beq.n	800117c <HAL_DMA_IRQHandler+0x64>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	0695      	lsls	r5, r2, #26
 8001160:	d406      	bmi.n	8001170 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	f022 020a 	bic.w	r2, r2, #10
 8001168:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800116a:	2301      	movs	r3, #1
 800116c:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
    __HAL_UNLOCK(hdma);
 8001170:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001172:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 8001174:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    if (hdma->XferCpltCallback != NULL)
 8001178:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800117a:	e7e5      	b.n	8001148 <HAL_DMA_IRQHandler+0x30>
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800117c:	2408      	movs	r4, #8
 800117e:	4094      	lsls	r4, r2
 8001180:	4234      	tst	r4, r6
 8001182:	d011      	beq.n	80011a8 <HAL_DMA_IRQHandler+0x90>
           && (0U != (source_it & DMA_IT_TE)))
 8001184:	072c      	lsls	r4, r5, #28
 8001186:	d50f      	bpl.n	80011a8 <HAL_DMA_IRQHandler+0x90>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001188:	681c      	ldr	r4, [r3, #0]
 800118a:	f024 040e 	bic.w	r4, r4, #14
 800118e:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001190:	2301      	movs	r3, #1
 8001192:	fa03 f202 	lsl.w	r2, r3, r2
 8001196:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001198:	63c3      	str	r3, [r0, #60]	@ 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 800119a:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
    __HAL_UNLOCK(hdma);
 800119e:	2300      	movs	r3, #0
 80011a0:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    if (hdma->XferErrorCallback != NULL)
 80011a4:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80011a6:	e7cf      	b.n	8001148 <HAL_DMA_IRQHandler+0x30>
}
 80011a8:	bc70      	pop	{r4, r5, r6}
 80011aa:	4770      	bx	lr

080011ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011b0:	f8df 9188 	ldr.w	r9, [pc, #392]	@ 800133c <HAL_GPIO_Init+0x190>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011b4:	4c5f      	ldr	r4, [pc, #380]	@ (8001334 <HAL_GPIO_Init+0x188>)
  uint32_t position = 0x00U;
 80011b6:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0U)
 80011b8:	680a      	ldr	r2, [r1, #0]
 80011ba:	fa32 f503 	lsrs.w	r5, r2, r3
 80011be:	d102      	bne.n	80011c6 <HAL_GPIO_Init+0x1a>
      }
    }

    position++;
  }
}
 80011c0:	b003      	add	sp, #12
 80011c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80011c6:	2501      	movs	r5, #1
 80011c8:	fa05 f803 	lsl.w	r8, r5, r3
    if (iocurrent != 0x00u)
 80011cc:	ea18 0202 	ands.w	r2, r8, r2
 80011d0:	f000 80a4 	beq.w	800131c <HAL_GPIO_Init+0x170>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80011d4:	684e      	ldr	r6, [r1, #4]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80011d6:	2703      	movs	r7, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80011d8:	f006 0503 	and.w	r5, r6, #3
 80011dc:	ea4f 0e43 	mov.w	lr, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80011e0:	fa07 fc0e 	lsl.w	ip, r7, lr
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80011e4:	1e6f      	subs	r7, r5, #1
 80011e6:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80011e8:	ea6f 0c0c 	mvn.w	ip, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80011ec:	d834      	bhi.n	8001258 <HAL_GPIO_Init+0xac>
        temp = GPIOx->OSPEEDR;
 80011ee:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80011f0:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011f4:	68cf      	ldr	r7, [r1, #12]
 80011f6:	fa07 f70e 	lsl.w	r7, r7, lr
 80011fa:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 80011fe:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001200:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001202:	ea27 0808 	bic.w	r8, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001206:	f3c6 1700 	ubfx	r7, r6, #4, #1
 800120a:	409f      	lsls	r7, r3
 800120c:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 8001210:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8001212:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001214:	ea07 080c 	and.w	r8, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001218:	688f      	ldr	r7, [r1, #8]
 800121a:	fa07 f70e 	lsl.w	r7, r7, lr
 800121e:	ea47 0708 	orr.w	r7, r7, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001222:	2d02      	cmp	r5, #2
        GPIOx->PUPDR = temp;
 8001224:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001226:	d119      	bne.n	800125c <HAL_GPIO_Init+0xb0>
        temp = GPIOx->AFR[position >> 3U];
 8001228:	ea4f 08d3 	mov.w	r8, r3, lsr #3
 800122c:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001230:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001234:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001238:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 800123c:	f04f 0b0f 	mov.w	fp, #15
 8001240:	fa0b fb0a 	lsl.w	fp, fp, sl
 8001244:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001248:	690f      	ldr	r7, [r1, #16]
 800124a:	fa07 f70a 	lsl.w	r7, r7, sl
 800124e:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3U] = temp;
 8001252:	f8c8 7020 	str.w	r7, [r8, #32]
 8001256:	e001      	b.n	800125c <HAL_GPIO_Init+0xb0>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001258:	2d03      	cmp	r5, #3
 800125a:	d1da      	bne.n	8001212 <HAL_GPIO_Init+0x66>
      temp = GPIOx->MODER;
 800125c:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800125e:	fa05 f50e 	lsl.w	r5, r5, lr
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001262:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001266:	433d      	orrs	r5, r7
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001268:	f416 3f40 	tst.w	r6, #196608	@ 0x30000
      GPIOx->MODER = temp;
 800126c:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800126e:	d055      	beq.n	800131c <HAL_GPIO_Init+0x170>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001270:	f8d9 5060 	ldr.w	r5, [r9, #96]	@ 0x60
 8001274:	f045 0501 	orr.w	r5, r5, #1
 8001278:	f8c9 5060 	str.w	r5, [r9, #96]	@ 0x60
 800127c:	f8d9 5060 	ldr.w	r5, [r9, #96]	@ 0x60
 8001280:	f023 0703 	bic.w	r7, r3, #3
 8001284:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 8001288:	f005 0501 	and.w	r5, r5, #1
 800128c:	f507 3780 	add.w	r7, r7, #65536	@ 0x10000
 8001290:	9501      	str	r5, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001292:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001296:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001298:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800129a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800129e:	f04f 0e0f 	mov.w	lr, #15
 80012a2:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80012a6:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80012aa:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80012ae:	d037      	beq.n	8001320 <HAL_GPIO_Init+0x174>
 80012b0:	4d21      	ldr	r5, [pc, #132]	@ (8001338 <HAL_GPIO_Init+0x18c>)
 80012b2:	42a8      	cmp	r0, r5
 80012b4:	d036      	beq.n	8001324 <HAL_GPIO_Init+0x178>
 80012b6:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80012ba:	42a8      	cmp	r0, r5
 80012bc:	d034      	beq.n	8001328 <HAL_GPIO_Init+0x17c>
 80012be:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80012c2:	42a8      	cmp	r0, r5
 80012c4:	d032      	beq.n	800132c <HAL_GPIO_Init+0x180>
 80012c6:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80012ca:	42a8      	cmp	r0, r5
 80012cc:	d030      	beq.n	8001330 <HAL_GPIO_Init+0x184>
 80012ce:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80012d2:	42a8      	cmp	r0, r5
 80012d4:	bf14      	ite	ne
 80012d6:	2506      	movne	r5, #6
 80012d8:	2505      	moveq	r5, #5
 80012da:	fa05 f50c 	lsl.w	r5, r5, ip
 80012de:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012e2:	60bd      	str	r5, [r7, #8]
        temp = EXTI->RTSR1;
 80012e4:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(iocurrent);
 80012e6:	43d7      	mvns	r7, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012e8:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
        temp &= ~(iocurrent);
 80012ec:	bf0c      	ite	eq
 80012ee:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80012f0:	4315      	orrne	r5, r2
        EXTI->RTSR1 = temp;
 80012f2:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 80012f4:	68e5      	ldr	r5, [r4, #12]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012f6:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
        temp &= ~(iocurrent);
 80012fa:	bf0c      	ite	eq
 80012fc:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80012fe:	4315      	orrne	r5, r2
        EXTI->FTSR1 = temp;
 8001300:	60e5      	str	r5, [r4, #12]
        temp = EXTI->EMR1;
 8001302:	6865      	ldr	r5, [r4, #4]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001304:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
        temp &= ~(iocurrent);
 8001308:	bf0c      	ite	eq
 800130a:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800130c:	4315      	orrne	r5, r2
        EXTI->EMR1 = temp;
 800130e:	6065      	str	r5, [r4, #4]
        temp = EXTI->IMR1;
 8001310:	6825      	ldr	r5, [r4, #0]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001312:	03f6      	lsls	r6, r6, #15
        temp &= ~(iocurrent);
 8001314:	bf54      	ite	pl
 8001316:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8001318:	4315      	orrmi	r5, r2
        EXTI->IMR1 = temp;
 800131a:	6025      	str	r5, [r4, #0]
    position++;
 800131c:	3301      	adds	r3, #1
 800131e:	e74b      	b.n	80011b8 <HAL_GPIO_Init+0xc>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001320:	2500      	movs	r5, #0
 8001322:	e7da      	b.n	80012da <HAL_GPIO_Init+0x12e>
 8001324:	2501      	movs	r5, #1
 8001326:	e7d8      	b.n	80012da <HAL_GPIO_Init+0x12e>
 8001328:	2502      	movs	r5, #2
 800132a:	e7d6      	b.n	80012da <HAL_GPIO_Init+0x12e>
 800132c:	2503      	movs	r5, #3
 800132e:	e7d4      	b.n	80012da <HAL_GPIO_Init+0x12e>
 8001330:	2504      	movs	r5, #4
 8001332:	e7d2      	b.n	80012da <HAL_GPIO_Init+0x12e>
 8001334:	40010400 	.word	0x40010400
 8001338:	48000400 	.word	0x48000400
 800133c:	40021000 	.word	0x40021000

08001340 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001340:	b10a      	cbz	r2, 8001346 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001342:	6181      	str	r1, [r0, #24]
 8001344:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001346:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 8001348:	4770      	bx	lr

0800134a <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800134a:	4770      	bx	lr

0800134c <HAL_GPIO_EXTI_IRQHandler>:
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800134c:	4a04      	ldr	r2, [pc, #16]	@ (8001360 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 800134e:	6951      	ldr	r1, [r2, #20]
 8001350:	4201      	tst	r1, r0
{
 8001352:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001354:	d002      	beq.n	800135c <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001356:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001358:	f7ff fff7 	bl	800134a <HAL_GPIO_EXTI_Callback>
}
 800135c:	bd08      	pop	{r3, pc}
 800135e:	bf00      	nop
 8001360:	40010400 	.word	0x40010400

08001364 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001364:	6803      	ldr	r3, [r0, #0]
 8001366:	699a      	ldr	r2, [r3, #24]
 8001368:	0791      	lsls	r1, r2, #30
  {
    hi2c->Instance->TXDR = 0x00U;
 800136a:	bf44      	itt	mi
 800136c:	2200      	movmi	r2, #0
 800136e:	629a      	strmi	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001370:	699a      	ldr	r2, [r3, #24]
 8001372:	07d2      	lsls	r2, r2, #31
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001374:	bf5e      	ittt	pl
 8001376:	699a      	ldrpl	r2, [r3, #24]
 8001378:	f042 0201 	orrpl.w	r2, r2, #1
 800137c:	619a      	strpl	r2, [r3, #24]
  }
}
 800137e:	4770      	bx	lr

08001380 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001380:	b530      	push	{r4, r5, lr}
 8001382:	9d03      	ldr	r5, [sp, #12]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001384:	6804      	ldr	r4, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001386:	432b      	orrs	r3, r5
 8001388:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 800138c:	4a06      	ldr	r2, [pc, #24]	@ (80013a8 <I2C_TransferConfig+0x28>)
 800138e:	6860      	ldr	r0, [r4, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001390:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8001394:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 8001396:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800139a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 800139e:	ea20 0002 	bic.w	r0, r0, r2
 80013a2:	4303      	orrs	r3, r0
 80013a4:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80013a6:	bd30      	pop	{r4, r5, pc}
 80013a8:	03ff63ff 	.word	0x03ff63ff

080013ac <I2C_IsErrorOccurred>:
  uint32_t itflag   = hi2c->Instance->ISR;
 80013ac:	6803      	ldr	r3, [r0, #0]
{
 80013ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 80013b2:	699c      	ldr	r4, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80013b4:	f014 0410 	ands.w	r4, r4, #16
{
 80013b8:	4605      	mov	r5, r0
 80013ba:	460f      	mov	r7, r1
 80013bc:	4616      	mov	r6, r2
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80013be:	d06f      	beq.n	80014a0 <I2C_IsErrorOccurred+0xf4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80013c0:	2210      	movs	r2, #16
  uint32_t error_code = 0;
 80013c2:	2400      	movs	r4, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80013c4:	61da      	str	r2, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80013c6:	46a0      	mov	r8, r4
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80013c8:	682b      	ldr	r3, [r5, #0]
 80013ca:	699a      	ldr	r2, [r3, #24]
 80013cc:	0690      	lsls	r0, r2, #26
 80013ce:	d461      	bmi.n	8001494 <I2C_IsErrorOccurred+0xe8>
 80013d0:	f1b8 0f00 	cmp.w	r8, #0
 80013d4:	d035      	beq.n	8001442 <I2C_IsErrorOccurred+0x96>
    error_code |= HAL_I2C_ERROR_AF;
 80013d6:	f044 0404 	orr.w	r4, r4, #4
    status = HAL_ERROR;
 80013da:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
 80013dc:	682e      	ldr	r6, [r5, #0]
 80013de:	69b3      	ldr	r3, [r6, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80013e0:	05d9      	lsls	r1, r3, #23
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80013e2:	bf41      	itttt	mi
 80013e4:	f44f 7280 	movmi.w	r2, #256	@ 0x100
 80013e8:	61f2      	strmi	r2, [r6, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 80013ea:	f044 0401 	orrmi.w	r4, r4, #1
    status = HAL_ERROR;
 80013ee:	2001      	movmi	r0, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80013f0:	055a      	lsls	r2, r3, #21
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80013f2:	bf41      	itttt	mi
 80013f4:	f44f 6280 	movmi.w	r2, #1024	@ 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 80013f8:	f044 0408 	orrmi.w	r4, r4, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80013fc:	61f2      	strmi	r2, [r6, #28]
    status = HAL_ERROR;
 80013fe:	2001      	movmi	r0, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001400:	059b      	lsls	r3, r3, #22
 8001402:	d54f      	bpl.n	80014a4 <I2C_IsErrorOccurred+0xf8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001404:	f44f 7300 	mov.w	r3, #512	@ 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8001408:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800140c:	61f3      	str	r3, [r6, #28]
    I2C_Flush_TXDR(hi2c);
 800140e:	4628      	mov	r0, r5
 8001410:	f7ff ffa8 	bl	8001364 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8001414:	6873      	ldr	r3, [r6, #4]
 8001416:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 800141a:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 800141e:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8001422:	f023 0301 	bic.w	r3, r3, #1
 8001426:	6073      	str	r3, [r6, #4]
    hi2c->ErrorCode |= error_code;
 8001428:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 800142a:	4323      	orrs	r3, r4
 800142c:	646b      	str	r3, [r5, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800142e:	2320      	movs	r3, #32
 8001430:	f885 3041 	strb.w	r3, [r5, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001434:	2300      	movs	r3, #0
 8001436:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 800143a:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
 800143e:	2001      	movs	r0, #1
 8001440:	e032      	b.n	80014a8 <I2C_IsErrorOccurred+0xfc>
      if (Timeout != HAL_MAX_DELAY)
 8001442:	1c7a      	adds	r2, r7, #1
 8001444:	d0c1      	beq.n	80013ca <I2C_IsErrorOccurred+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001446:	f7ff fcf9 	bl	8000e3c <HAL_GetTick>
 800144a:	1b80      	subs	r0, r0, r6
 800144c:	42b8      	cmp	r0, r7
 800144e:	d801      	bhi.n	8001454 <I2C_IsErrorOccurred+0xa8>
 8001450:	2f00      	cmp	r7, #0
 8001452:	d1b9      	bne.n	80013c8 <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001454:	682b      	ldr	r3, [r5, #0]
 8001456:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 8001458:	f895 2042 	ldrb.w	r2, [r5, #66]	@ 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800145c:	6998      	ldr	r0, [r3, #24]
 800145e:	0400      	lsls	r0, r0, #16
          tmp2 = hi2c->Mode;
 8001460:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001462:	d50a      	bpl.n	800147a <I2C_IsErrorOccurred+0xce>
 8001464:	0449      	lsls	r1, r1, #17
 8001466:	d408      	bmi.n	800147a <I2C_IsErrorOccurred+0xce>
              (tmp1 != I2C_CR2_STOP) && \
 8001468:	2a20      	cmp	r2, #32
 800146a:	d006      	beq.n	800147a <I2C_IsErrorOccurred+0xce>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800146c:	685a      	ldr	r2, [r3, #4]
 800146e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001472:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8001474:	f7ff fce2 	bl	8000e3c <HAL_GetTick>
 8001478:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800147a:	682b      	ldr	r3, [r5, #0]
 800147c:	699b      	ldr	r3, [r3, #24]
 800147e:	069b      	lsls	r3, r3, #26
 8001480:	d4a2      	bmi.n	80013c8 <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001482:	f7ff fcdb 	bl	8000e3c <HAL_GetTick>
 8001486:	1b80      	subs	r0, r0, r6
 8001488:	2819      	cmp	r0, #25
 800148a:	d9f6      	bls.n	800147a <I2C_IsErrorOccurred+0xce>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800148c:	2420      	movs	r4, #32
              status = HAL_ERROR;
 800148e:	f04f 0801 	mov.w	r8, #1
 8001492:	e799      	b.n	80013c8 <I2C_IsErrorOccurred+0x1c>
    if (status == HAL_OK)
 8001494:	f1b8 0f00 	cmp.w	r8, #0
 8001498:	d19d      	bne.n	80013d6 <I2C_IsErrorOccurred+0x2a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800149a:	2220      	movs	r2, #32
 800149c:	61da      	str	r2, [r3, #28]
 800149e:	e79a      	b.n	80013d6 <I2C_IsErrorOccurred+0x2a>
  HAL_StatusTypeDef status = HAL_OK;
 80014a0:	4620      	mov	r0, r4
 80014a2:	e79b      	b.n	80013dc <I2C_IsErrorOccurred+0x30>
  if (status != HAL_OK)
 80014a4:	2800      	cmp	r0, #0
 80014a6:	d1b2      	bne.n	800140e <I2C_IsErrorOccurred+0x62>
}
 80014a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080014ac <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80014ac:	b570      	push	{r4, r5, r6, lr}
 80014ae:	4604      	mov	r4, r0
 80014b0:	460d      	mov	r5, r1
 80014b2:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80014b4:	6823      	ldr	r3, [r4, #0]
 80014b6:	699b      	ldr	r3, [r3, #24]
 80014b8:	079b      	lsls	r3, r3, #30
 80014ba:	d501      	bpl.n	80014c0 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 80014bc:	2000      	movs	r0, #0
 80014be:	e01f      	b.n	8001500 <I2C_WaitOnTXISFlagUntilTimeout+0x54>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80014c0:	4632      	mov	r2, r6
 80014c2:	4629      	mov	r1, r5
 80014c4:	4620      	mov	r0, r4
 80014c6:	f7ff ff71 	bl	80013ac <I2C_IsErrorOccurred>
 80014ca:	b9c0      	cbnz	r0, 80014fe <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 80014cc:	1c6a      	adds	r2, r5, #1
 80014ce:	d0f1      	beq.n	80014b4 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80014d0:	f7ff fcb4 	bl	8000e3c <HAL_GetTick>
 80014d4:	1b80      	subs	r0, r0, r6
 80014d6:	42a8      	cmp	r0, r5
 80014d8:	d801      	bhi.n	80014de <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 80014da:	2d00      	cmp	r5, #0
 80014dc:	d1ea      	bne.n	80014b4 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80014de:	6823      	ldr	r3, [r4, #0]
 80014e0:	699b      	ldr	r3, [r3, #24]
 80014e2:	f013 0302 	ands.w	r3, r3, #2
 80014e6:	d1e5      	bne.n	80014b4 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80014e8:	6c62      	ldr	r2, [r4, #68]	@ 0x44
          __HAL_UNLOCK(hi2c);
 80014ea:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80014ee:	f042 0220 	orr.w	r2, r2, #32
 80014f2:	6462      	str	r2, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80014f4:	2220      	movs	r2, #32
 80014f6:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80014fa:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      return HAL_ERROR;
 80014fe:	2001      	movs	r0, #1
}
 8001500:	bd70      	pop	{r4, r5, r6, pc}

08001502 <I2C_WaitOnFlagUntilTimeout>:
{
 8001502:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001506:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800150a:	4604      	mov	r4, r0
 800150c:	460f      	mov	r7, r1
 800150e:	4616      	mov	r6, r2
 8001510:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001512:	6823      	ldr	r3, [r4, #0]
 8001514:	699b      	ldr	r3, [r3, #24]
 8001516:	ea37 0303 	bics.w	r3, r7, r3
 800151a:	bf0c      	ite	eq
 800151c:	2301      	moveq	r3, #1
 800151e:	2300      	movne	r3, #0
 8001520:	42b3      	cmp	r3, r6
 8001522:	d001      	beq.n	8001528 <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8001524:	2000      	movs	r0, #0
 8001526:	e025      	b.n	8001574 <I2C_WaitOnFlagUntilTimeout+0x72>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001528:	4642      	mov	r2, r8
 800152a:	4629      	mov	r1, r5
 800152c:	4620      	mov	r0, r4
 800152e:	f7ff ff3d 	bl	80013ac <I2C_IsErrorOccurred>
 8001532:	b9f0      	cbnz	r0, 8001572 <I2C_WaitOnFlagUntilTimeout+0x70>
    if (Timeout != HAL_MAX_DELAY)
 8001534:	1c6b      	adds	r3, r5, #1
 8001536:	d0ec      	beq.n	8001512 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001538:	f7ff fc80 	bl	8000e3c <HAL_GetTick>
 800153c:	eba0 0008 	sub.w	r0, r0, r8
 8001540:	42a8      	cmp	r0, r5
 8001542:	d801      	bhi.n	8001548 <I2C_WaitOnFlagUntilTimeout+0x46>
 8001544:	2d00      	cmp	r5, #0
 8001546:	d1e4      	bne.n	8001512 <I2C_WaitOnFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001548:	6823      	ldr	r3, [r4, #0]
 800154a:	699b      	ldr	r3, [r3, #24]
 800154c:	ea37 0303 	bics.w	r3, r7, r3
 8001550:	bf0c      	ite	eq
 8001552:	2301      	moveq	r3, #1
 8001554:	2300      	movne	r3, #0
 8001556:	42b3      	cmp	r3, r6
 8001558:	d1db      	bne.n	8001512 <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800155a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800155c:	f043 0320 	orr.w	r3, r3, #32
 8001560:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001562:	2320      	movs	r3, #32
 8001564:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001568:	2300      	movs	r3, #0
 800156a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          __HAL_UNLOCK(hi2c);
 800156e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8001572:	2001      	movs	r0, #1
}
 8001574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001578 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8001578:	b570      	push	{r4, r5, r6, lr}
 800157a:	4604      	mov	r4, r0
 800157c:	460d      	mov	r5, r1
 800157e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001580:	6823      	ldr	r3, [r4, #0]
 8001582:	699b      	ldr	r3, [r3, #24]
 8001584:	069b      	lsls	r3, r3, #26
 8001586:	d501      	bpl.n	800158c <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8001588:	2000      	movs	r0, #0
 800158a:	e01d      	b.n	80015c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x50>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800158c:	4632      	mov	r2, r6
 800158e:	4629      	mov	r1, r5
 8001590:	4620      	mov	r0, r4
 8001592:	f7ff ff0b 	bl	80013ac <I2C_IsErrorOccurred>
 8001596:	b9b0      	cbnz	r0, 80015c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001598:	f7ff fc50 	bl	8000e3c <HAL_GetTick>
 800159c:	1b80      	subs	r0, r0, r6
 800159e:	42a8      	cmp	r0, r5
 80015a0:	d801      	bhi.n	80015a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 80015a2:	2d00      	cmp	r5, #0
 80015a4:	d1ec      	bne.n	8001580 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80015a6:	6823      	ldr	r3, [r4, #0]
 80015a8:	699b      	ldr	r3, [r3, #24]
 80015aa:	f013 0320 	ands.w	r3, r3, #32
 80015ae:	d1e7      	bne.n	8001580 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80015b0:	6c62      	ldr	r2, [r4, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 80015b2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80015b6:	f042 0220 	orr.w	r2, r2, #32
 80015ba:	6462      	str	r2, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80015bc:	2220      	movs	r2, #32
 80015be:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80015c2:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      return HAL_ERROR;
 80015c6:	2001      	movs	r0, #1
}
 80015c8:	bd70      	pop	{r4, r5, r6, pc}

080015ca <HAL_I2C_Init>:
{
 80015ca:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 80015cc:	4604      	mov	r4, r0
 80015ce:	2800      	cmp	r0, #0
 80015d0:	d04e      	beq.n	8001670 <HAL_I2C_Init+0xa6>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80015d2:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80015d6:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80015da:	b91b      	cbnz	r3, 80015e4 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 80015dc:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 80015e0:	f7ff fa8c 	bl	8000afc <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80015e4:	2324      	movs	r3, #36	@ 0x24
 80015e6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 80015ea:	6823      	ldr	r3, [r4, #0]
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	f022 0201 	bic.w	r2, r2, #1
 80015f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80015f4:	6862      	ldr	r2, [r4, #4]
 80015f6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80015fa:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80015fc:	689a      	ldr	r2, [r3, #8]
 80015fe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001602:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001604:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001608:	2901      	cmp	r1, #1
 800160a:	d106      	bne.n	800161a <HAL_I2C_Init+0x50>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800160c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001610:	609a      	str	r2, [r3, #8]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001612:	685a      	ldr	r2, [r3, #4]
 8001614:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001618:	e007      	b.n	800162a <HAL_I2C_Init+0x60>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800161a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800161e:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001620:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001622:	d1f6      	bne.n	8001612 <HAL_I2C_Init+0x48>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001624:	685a      	ldr	r2, [r3, #4]
 8001626:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800162a:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800162c:	685a      	ldr	r2, [r3, #4]
 800162e:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8001632:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001636:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001638:	68da      	ldr	r2, [r3, #12]
 800163a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800163e:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001640:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8001644:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001646:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001648:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800164c:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800164e:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 8001652:	430a      	orrs	r2, r1
 8001654:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	f042 0201 	orr.w	r2, r2, #1
 800165c:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800165e:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8001660:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001662:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001664:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001668:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800166a:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 800166e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001670:	2001      	movs	r0, #1
 8001672:	e7fc      	b.n	800166e <HAL_I2C_Init+0xa4>

08001674 <HAL_I2C_Mem_Read>:
{
 8001674:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001678:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800167a:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 800167e:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 8001682:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001686:	2b20      	cmp	r3, #32
{
 8001688:	4604      	mov	r4, r0
 800168a:	460f      	mov	r7, r1
 800168c:	4616      	mov	r6, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800168e:	f040 80c9 	bne.w	8001824 <HAL_I2C_Mem_Read+0x1b0>
    if ((pData == NULL) || (Size == 0U))
 8001692:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8001694:	b113      	cbz	r3, 800169c <HAL_I2C_Mem_Read+0x28>
 8001696:	f1ba 0f00 	cmp.w	sl, #0
 800169a:	d106      	bne.n	80016aa <HAL_I2C_Mem_Read+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800169c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80016a0:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 80016a2:	2001      	movs	r0, #1
}
 80016a4:	b003      	add	sp, #12
 80016a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 80016aa:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	f000 80b8 	beq.w	8001824 <HAL_I2C_Mem_Read+0x1b0>
 80016b4:	f04f 0b01 	mov.w	fp, #1
 80016b8:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 80016bc:	f7ff fbbe 	bl	8000e3c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80016c0:	2319      	movs	r3, #25
 80016c2:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 80016c4:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80016c6:	465a      	mov	r2, fp
 80016c8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80016cc:	4620      	mov	r0, r4
 80016ce:	f7ff ff18 	bl	8001502 <I2C_WaitOnFlagUntilTimeout>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2800      	cmp	r0, #0
 80016d6:	d1e4      	bne.n	80016a2 <HAL_I2C_Mem_Read+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80016d8:	2222      	movs	r2, #34	@ 0x22
 80016da:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80016de:	2240      	movs	r2, #64	@ 0x40
 80016e0:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
    hi2c->pBuffPtr  = pData;
 80016e4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80016e6:	6262      	str	r2, [r4, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80016e8:	4a4f      	ldr	r2, [pc, #316]	@ (8001828 <HAL_I2C_Mem_Read+0x1b4>)
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016ea:	6460      	str	r0, [r4, #68]	@ 0x44
    hi2c->XferISR   = NULL;
 80016ec:	6360      	str	r0, [r4, #52]	@ 0x34
    hi2c->XferCount = Size;
 80016ee:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80016f2:	4639      	mov	r1, r7
 80016f4:	9200      	str	r2, [sp, #0]
 80016f6:	4620      	mov	r0, r4
 80016f8:	fa5f f289 	uxtb.w	r2, r9
 80016fc:	f7ff fe40 	bl	8001380 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001700:	462a      	mov	r2, r5
 8001702:	4641      	mov	r1, r8
 8001704:	4620      	mov	r0, r4
 8001706:	f7ff fed1 	bl	80014ac <I2C_WaitOnTXISFlagUntilTimeout>
 800170a:	bb20      	cbnz	r0, 8001756 <HAL_I2C_Mem_Read+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800170c:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001710:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001712:	d116      	bne.n	8001742 <HAL_I2C_Mem_Read+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001714:	b2f6      	uxtb	r6, r6
 8001716:	629e      	str	r6, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001718:	2200      	movs	r2, #0
 800171a:	9500      	str	r5, [sp, #0]
 800171c:	4643      	mov	r3, r8
 800171e:	2140      	movs	r1, #64	@ 0x40
 8001720:	4620      	mov	r0, r4
 8001722:	f7ff feee 	bl	8001502 <I2C_WaitOnFlagUntilTimeout>
 8001726:	b9b0      	cbnz	r0, 8001756 <HAL_I2C_Mem_Read+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001728:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800172a:	b29b      	uxth	r3, r3
 800172c:	2bff      	cmp	r3, #255	@ 0xff
 800172e:	4b3f      	ldr	r3, [pc, #252]	@ (800182c <HAL_I2C_Mem_Read+0x1b8>)
 8001730:	d815      	bhi.n	800175e <HAL_I2C_Mem_Read+0xea>
      hi2c->XferSize = hi2c->XferCount;
 8001732:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8001734:	b292      	uxth	r2, r2
 8001736:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001738:	9300      	str	r3, [sp, #0]
 800173a:	b2d2      	uxtb	r2, r2
 800173c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001740:	e012      	b.n	8001768 <HAL_I2C_Mem_Read+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001742:	0a32      	lsrs	r2, r6, #8
 8001744:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001746:	4641      	mov	r1, r8
 8001748:	462a      	mov	r2, r5
 800174a:	4620      	mov	r0, r4
 800174c:	f7ff feae 	bl	80014ac <I2C_WaitOnTXISFlagUntilTimeout>
 8001750:	b908      	cbnz	r0, 8001756 <HAL_I2C_Mem_Read+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001752:	6823      	ldr	r3, [r4, #0]
 8001754:	e7de      	b.n	8001714 <HAL_I2C_Mem_Read+0xa0>
      __HAL_UNLOCK(hi2c);
 8001756:	2300      	movs	r3, #0
 8001758:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 800175c:	e7a1      	b.n	80016a2 <HAL_I2C_Mem_Read+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800175e:	22ff      	movs	r2, #255	@ 0xff
 8001760:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001762:	9300      	str	r3, [sp, #0]
 8001764:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001768:	4639      	mov	r1, r7
 800176a:	4620      	mov	r0, r4
 800176c:	f7ff fe08 	bl	8001380 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001770:	9500      	str	r5, [sp, #0]
 8001772:	4643      	mov	r3, r8
 8001774:	2200      	movs	r2, #0
 8001776:	2104      	movs	r1, #4
 8001778:	4620      	mov	r0, r4
 800177a:	f7ff fec2 	bl	8001502 <I2C_WaitOnFlagUntilTimeout>
 800177e:	2800      	cmp	r0, #0
 8001780:	d18f      	bne.n	80016a2 <HAL_I2C_Mem_Read+0x2e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001782:	6823      	ldr	r3, [r4, #0]
 8001784:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001786:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001788:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800178a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 800178c:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->pBuffPtr++;
 800178e:	3301      	adds	r3, #1
 8001790:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8001792:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001794:	3b01      	subs	r3, #1
 8001796:	b29b      	uxth	r3, r3
 8001798:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800179a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800179c:	3a01      	subs	r2, #1
 800179e:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80017a0:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 80017a2:	8522      	strh	r2, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80017a4:	b1b3      	cbz	r3, 80017d4 <HAL_I2C_Mem_Read+0x160>
 80017a6:	b9aa      	cbnz	r2, 80017d4 <HAL_I2C_Mem_Read+0x160>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80017a8:	9500      	str	r5, [sp, #0]
 80017aa:	4643      	mov	r3, r8
 80017ac:	2180      	movs	r1, #128	@ 0x80
 80017ae:	4620      	mov	r0, r4
 80017b0:	f7ff fea7 	bl	8001502 <I2C_WaitOnFlagUntilTimeout>
 80017b4:	2800      	cmp	r0, #0
 80017b6:	f47f af74 	bne.w	80016a2 <HAL_I2C_Mem_Read+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80017ba:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80017bc:	b29b      	uxth	r3, r3
 80017be:	2bff      	cmp	r3, #255	@ 0xff
 80017c0:	d928      	bls.n	8001814 <HAL_I2C_Mem_Read+0x1a0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80017c2:	22ff      	movs	r2, #255	@ 0xff
 80017c4:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80017c6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80017ca:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80017cc:	4639      	mov	r1, r7
 80017ce:	4620      	mov	r0, r4
 80017d0:	f7ff fdd6 	bl	8001380 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 80017d4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80017d6:	b29b      	uxth	r3, r3
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d1c9      	bne.n	8001770 <HAL_I2C_Mem_Read+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017dc:	462a      	mov	r2, r5
 80017de:	4641      	mov	r1, r8
 80017e0:	4620      	mov	r0, r4
 80017e2:	f7ff fec9 	bl	8001578 <I2C_WaitOnSTOPFlagUntilTimeout>
 80017e6:	2800      	cmp	r0, #0
 80017e8:	f47f af5b 	bne.w	80016a2 <HAL_I2C_Mem_Read+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017ec:	6823      	ldr	r3, [r4, #0]
 80017ee:	2120      	movs	r1, #32
 80017f0:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80017f2:	685a      	ldr	r2, [r3, #4]
 80017f4:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 80017f8:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 80017fc:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 8001800:	f022 0201 	bic.w	r2, r2, #1
 8001804:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001806:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 800180a:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800180e:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 8001812:	e747      	b.n	80016a4 <HAL_I2C_Mem_Read+0x30>
          hi2c->XferSize = hi2c->XferCount;
 8001814:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8001816:	b292      	uxth	r2, r2
 8001818:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800181a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800181e:	9000      	str	r0, [sp, #0]
 8001820:	b2d2      	uxtb	r2, r2
 8001822:	e7d3      	b.n	80017cc <HAL_I2C_Mem_Read+0x158>
    __HAL_LOCK(hi2c);
 8001824:	2002      	movs	r0, #2
 8001826:	e73d      	b.n	80016a4 <HAL_I2C_Mem_Read+0x30>
 8001828:	80002000 	.word	0x80002000
 800182c:	80002400 	.word	0x80002400

08001830 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001830:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001832:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 8001836:	2a20      	cmp	r2, #32
{
 8001838:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800183a:	b2d4      	uxtb	r4, r2
 800183c:	d11c      	bne.n	8001878 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800183e:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8001842:	2a01      	cmp	r2, #1
 8001844:	d018      	beq.n	8001878 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001846:	2224      	movs	r2, #36	@ 0x24
 8001848:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800184c:	6802      	ldr	r2, [r0, #0]
 800184e:	6810      	ldr	r0, [r2, #0]
 8001850:	f020 0001 	bic.w	r0, r0, #1
 8001854:	6010      	str	r0, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001856:	6810      	ldr	r0, [r2, #0]
 8001858:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 800185c:	6010      	str	r0, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800185e:	6810      	ldr	r0, [r2, #0]
 8001860:	4301      	orrs	r1, r0
 8001862:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001864:	6811      	ldr	r1, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001866:	2000      	movs	r0, #0
    __HAL_I2C_ENABLE(hi2c);
 8001868:	f041 0101 	orr.w	r1, r1, #1
 800186c:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800186e:	f883 4041 	strb.w	r4, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8001872:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8001876:	bd10      	pop	{r4, pc}
    __HAL_LOCK(hi2c);
 8001878:	2002      	movs	r0, #2
 800187a:	e7fc      	b.n	8001876 <HAL_I2CEx_ConfigAnalogFilter+0x46>

0800187c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800187c:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800187e:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 8001882:	2a20      	cmp	r2, #32
{
 8001884:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001886:	b2d4      	uxtb	r4, r2
 8001888:	d11b      	bne.n	80018c2 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800188a:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 800188e:	2a01      	cmp	r2, #1
 8001890:	d017      	beq.n	80018c2 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001892:	2224      	movs	r2, #36	@ 0x24
 8001894:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001898:	6802      	ldr	r2, [r0, #0]
 800189a:	6810      	ldr	r0, [r2, #0]
 800189c:	f020 0001 	bic.w	r0, r0, #1
 80018a0:	6010      	str	r0, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80018a2:	6810      	ldr	r0, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80018a4:	f420 6070 	bic.w	r0, r0, #3840	@ 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80018a8:	ea40 2101 	orr.w	r1, r0, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80018ac:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 80018ae:	6811      	ldr	r1, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018b0:	2000      	movs	r0, #0
    __HAL_I2C_ENABLE(hi2c);
 80018b2:	f041 0101 	orr.w	r1, r1, #1
 80018b6:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80018b8:	f883 4041 	strb.w	r4, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 80018bc:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 80018c0:	bd10      	pop	{r4, pc}
    __HAL_LOCK(hi2c);
 80018c2:	2002      	movs	r0, #2
 80018c4:	e7fc      	b.n	80018c0 <HAL_I2CEx_ConfigDigitalFilter+0x44>
	...

080018c8 <HAL_PWREx_ControlVoltageScaling>:
{
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80018c8:	4b28      	ldr	r3, [pc, #160]	@ (800196c <HAL_PWREx_ControlVoltageScaling+0xa4>)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80018ca:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80018cc:	bb18      	cbnz	r0, 8001916 <HAL_PWREx_ControlVoltageScaling+0x4e>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80018ce:	f402 62c0 	and.w	r2, r2, #1536	@ 0x600
 80018d2:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80018d6:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80018da:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80018de:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80018e2:	d140      	bne.n	8001966 <HAL_PWREx_ControlVoltageScaling+0x9e>

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	f422 62c0 	bic.w	r2, r2, #1536	@ 0x600
 80018ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80018ee:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80018f0:	4a1f      	ldr	r2, [pc, #124]	@ (8001970 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80018f2:	6812      	ldr	r2, [r2, #0]
 80018f4:	2132      	movs	r1, #50	@ 0x32
 80018f6:	434a      	muls	r2, r1
 80018f8:	491e      	ldr	r1, [pc, #120]	@ (8001974 <HAL_PWREx_ControlVoltageScaling+0xac>)
 80018fa:	fbb2 f2f1 	udiv	r2, r2, r1
 80018fe:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001900:	6959      	ldr	r1, [r3, #20]
 8001902:	0549      	lsls	r1, r1, #21
 8001904:	d500      	bpl.n	8001908 <HAL_PWREx_ControlVoltageScaling+0x40>
 8001906:	b922      	cbnz	r2, 8001912 <HAL_PWREx_ControlVoltageScaling+0x4a>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001908:	695b      	ldr	r3, [r3, #20]
 800190a:	0558      	lsls	r0, r3, #21
 800190c:	d52b      	bpl.n	8001966 <HAL_PWREx_ControlVoltageScaling+0x9e>
      {
        return HAL_TIMEOUT;
 800190e:	2003      	movs	r0, #3
 8001910:	4770      	bx	lr
        wait_loop_index--;
 8001912:	3a01      	subs	r2, #1
 8001914:	e7f4      	b.n	8001900 <HAL_PWREx_ControlVoltageScaling+0x38>
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001916:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 800191a:	d11f      	bne.n	800195c <HAL_PWREx_ControlVoltageScaling+0x94>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800191c:	f402 62c0 	and.w	r2, r2, #1536	@ 0x600
 8001920:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001924:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8001928:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800192c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001930:	d119      	bne.n	8001966 <HAL_PWREx_ControlVoltageScaling+0x9e>

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	f422 62c0 	bic.w	r2, r2, #1536	@ 0x600
 8001938:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800193c:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800193e:	4a0c      	ldr	r2, [pc, #48]	@ (8001970 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001940:	6812      	ldr	r2, [r2, #0]
 8001942:	2132      	movs	r1, #50	@ 0x32
 8001944:	434a      	muls	r2, r1
 8001946:	490b      	ldr	r1, [pc, #44]	@ (8001974 <HAL_PWREx_ControlVoltageScaling+0xac>)
 8001948:	fbb2 f2f1 	udiv	r2, r2, r1
 800194c:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800194e:	6959      	ldr	r1, [r3, #20]
 8001950:	0549      	lsls	r1, r1, #21
 8001952:	d5d9      	bpl.n	8001908 <HAL_PWREx_ControlVoltageScaling+0x40>
 8001954:	2a00      	cmp	r2, #0
 8001956:	d0d7      	beq.n	8001908 <HAL_PWREx_ControlVoltageScaling+0x40>
      {
        wait_loop_index--;
 8001958:	3a01      	subs	r2, #1
 800195a:	e7f8      	b.n	800194e <HAL_PWREx_ControlVoltageScaling+0x86>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800195c:	f422 62c0 	bic.w	r2, r2, #1536	@ 0x600
 8001960:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001964:	601a      	str	r2, [r3, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001966:	2000      	movs	r0, #0
}
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	40007000 	.word	0x40007000
 8001970:	20000004 	.word	0x20000004
 8001974:	000f4240 	.word	0x000f4240

08001978 <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001978:	4a02      	ldr	r2, [pc, #8]	@ (8001984 <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 800197a:	6893      	ldr	r3, [r2, #8]
 800197c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001980:	6093      	str	r3, [r2, #8]
}
 8001982:	4770      	bx	lr
 8001984:	40007000 	.word	0x40007000

08001988 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001988:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800198c:	4604      	mov	r4, r0
 800198e:	b918      	cbnz	r0, 8001998 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8001990:	2001      	movs	r0, #1
    }
  }
  }

  return HAL_OK;
}
 8001992:	b002      	add	sp, #8
 8001994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001998:	6803      	ldr	r3, [r0, #0]
 800199a:	07d9      	lsls	r1, r3, #31
 800199c:	d414      	bmi.n	80019c8 <HAL_RCC_OscConfig+0x40>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800199e:	6823      	ldr	r3, [r4, #0]
 80019a0:	079a      	lsls	r2, r3, #30
 80019a2:	d458      	bmi.n	8001a56 <HAL_RCC_OscConfig+0xce>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019a4:	6823      	ldr	r3, [r4, #0]
 80019a6:	0719      	lsls	r1, r3, #28
 80019a8:	f100 80a1 	bmi.w	8001aee <HAL_RCC_OscConfig+0x166>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019ac:	6823      	ldr	r3, [r4, #0]
 80019ae:	075a      	lsls	r2, r3, #29
 80019b0:	f100 80c8 	bmi.w	8001b44 <HAL_RCC_OscConfig+0x1bc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80019b4:	6823      	ldr	r3, [r4, #0]
 80019b6:	069a      	lsls	r2, r3, #26
 80019b8:	f100 812f 	bmi.w	8001c1a <HAL_RCC_OscConfig+0x292>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80019bc:	69e3      	ldr	r3, [r4, #28]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	f040 815c 	bne.w	8001c7c <HAL_RCC_OscConfig+0x2f4>
  return HAL_OK;
 80019c4:	2000      	movs	r0, #0
 80019c6:	e7e4      	b.n	8001992 <HAL_RCC_OscConfig+0xa>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019c8:	4d9f      	ldr	r5, [pc, #636]	@ (8001c48 <HAL_RCC_OscConfig+0x2c0>)
 80019ca:	68ab      	ldr	r3, [r5, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019cc:	68ea      	ldr	r2, [r5, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019ce:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80019d2:	2b0c      	cmp	r3, #12
 80019d4:	d10a      	bne.n	80019ec <HAL_RCC_OscConfig+0x64>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019d6:	f002 0303 	and.w	r3, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80019da:	2b03      	cmp	r3, #3
 80019dc:	d108      	bne.n	80019f0 <HAL_RCC_OscConfig+0x68>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019de:	682b      	ldr	r3, [r5, #0]
 80019e0:	039b      	lsls	r3, r3, #14
 80019e2:	d5dc      	bpl.n	800199e <HAL_RCC_OscConfig+0x16>
 80019e4:	6863      	ldr	r3, [r4, #4]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d1d9      	bne.n	800199e <HAL_RCC_OscConfig+0x16>
 80019ea:	e7d1      	b.n	8001990 <HAL_RCC_OscConfig+0x8>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80019ec:	2b08      	cmp	r3, #8
 80019ee:	e7f5      	b.n	80019dc <HAL_RCC_OscConfig+0x54>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019f0:	6863      	ldr	r3, [r4, #4]
 80019f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019f6:	d110      	bne.n	8001a1a <HAL_RCC_OscConfig+0x92>
 80019f8:	682b      	ldr	r3, [r5, #0]
 80019fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019fe:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001a00:	f7ff fa1c 	bl	8000e3c <HAL_GetTick>
 8001a04:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a06:	682b      	ldr	r3, [r5, #0]
 8001a08:	039f      	lsls	r7, r3, #14
 8001a0a:	d4c8      	bmi.n	800199e <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a0c:	f7ff fa16 	bl	8000e3c <HAL_GetTick>
 8001a10:	1b80      	subs	r0, r0, r6
 8001a12:	2864      	cmp	r0, #100	@ 0x64
 8001a14:	d9f7      	bls.n	8001a06 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8001a16:	2003      	movs	r0, #3
 8001a18:	e7bb      	b.n	8001992 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a1a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a1e:	d104      	bne.n	8001a2a <HAL_RCC_OscConfig+0xa2>
 8001a20:	682b      	ldr	r3, [r5, #0]
 8001a22:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a26:	602b      	str	r3, [r5, #0]
 8001a28:	e7e6      	b.n	80019f8 <HAL_RCC_OscConfig+0x70>
 8001a2a:	682a      	ldr	r2, [r5, #0]
 8001a2c:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001a30:	602a      	str	r2, [r5, #0]
 8001a32:	682a      	ldr	r2, [r5, #0]
 8001a34:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001a38:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d1e0      	bne.n	8001a00 <HAL_RCC_OscConfig+0x78>
        tickstart = HAL_GetTick();
 8001a3e:	f7ff f9fd 	bl	8000e3c <HAL_GetTick>
 8001a42:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a44:	682b      	ldr	r3, [r5, #0]
 8001a46:	0399      	lsls	r1, r3, #14
 8001a48:	d5a9      	bpl.n	800199e <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a4a:	f7ff f9f7 	bl	8000e3c <HAL_GetTick>
 8001a4e:	1b80      	subs	r0, r0, r6
 8001a50:	2864      	cmp	r0, #100	@ 0x64
 8001a52:	d9f7      	bls.n	8001a44 <HAL_RCC_OscConfig+0xbc>
 8001a54:	e7df      	b.n	8001a16 <HAL_RCC_OscConfig+0x8e>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a56:	4d7c      	ldr	r5, [pc, #496]	@ (8001c48 <HAL_RCC_OscConfig+0x2c0>)
 8001a58:	68ab      	ldr	r3, [r5, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a5a:	68ea      	ldr	r2, [r5, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a5c:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001a60:	2b0c      	cmp	r3, #12
 8001a62:	d117      	bne.n	8001a94 <HAL_RCC_OscConfig+0x10c>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a64:	f002 0303 	and.w	r3, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	d115      	bne.n	8001a98 <HAL_RCC_OscConfig+0x110>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a6c:	682b      	ldr	r3, [r5, #0]
 8001a6e:	055a      	lsls	r2, r3, #21
 8001a70:	d502      	bpl.n	8001a78 <HAL_RCC_OscConfig+0xf0>
 8001a72:	68e3      	ldr	r3, [r4, #12]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d08b      	beq.n	8001990 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a78:	686b      	ldr	r3, [r5, #4]
 8001a7a:	6922      	ldr	r2, [r4, #16]
 8001a7c:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8001a80:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001a84:	606b      	str	r3, [r5, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001a86:	4b71      	ldr	r3, [pc, #452]	@ (8001c4c <HAL_RCC_OscConfig+0x2c4>)
 8001a88:	6818      	ldr	r0, [r3, #0]
 8001a8a:	f7ff f995 	bl	8000db8 <HAL_InitTick>
 8001a8e:	2800      	cmp	r0, #0
 8001a90:	d088      	beq.n	80019a4 <HAL_RCC_OscConfig+0x1c>
 8001a92:	e77d      	b.n	8001990 <HAL_RCC_OscConfig+0x8>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001a94:	2b04      	cmp	r3, #4
 8001a96:	e7e8      	b.n	8001a6a <HAL_RCC_OscConfig+0xe2>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a98:	68e3      	ldr	r3, [r4, #12]
 8001a9a:	b1bb      	cbz	r3, 8001acc <HAL_RCC_OscConfig+0x144>
        __HAL_RCC_HSI_ENABLE();
 8001a9c:	682b      	ldr	r3, [r5, #0]
 8001a9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001aa2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001aa4:	f7ff f9ca 	bl	8000e3c <HAL_GetTick>
 8001aa8:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001aaa:	682b      	ldr	r3, [r5, #0]
 8001aac:	055b      	lsls	r3, r3, #21
 8001aae:	d507      	bpl.n	8001ac0 <HAL_RCC_OscConfig+0x138>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ab0:	686b      	ldr	r3, [r5, #4]
 8001ab2:	6922      	ldr	r2, [r4, #16]
 8001ab4:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8001ab8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001abc:	606b      	str	r3, [r5, #4]
 8001abe:	e771      	b.n	80019a4 <HAL_RCC_OscConfig+0x1c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ac0:	f7ff f9bc 	bl	8000e3c <HAL_GetTick>
 8001ac4:	1b80      	subs	r0, r0, r6
 8001ac6:	2802      	cmp	r0, #2
 8001ac8:	d9ef      	bls.n	8001aaa <HAL_RCC_OscConfig+0x122>
 8001aca:	e7a4      	b.n	8001a16 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8001acc:	682b      	ldr	r3, [r5, #0]
 8001ace:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ad2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001ad4:	f7ff f9b2 	bl	8000e3c <HAL_GetTick>
 8001ad8:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ada:	682b      	ldr	r3, [r5, #0]
 8001adc:	055f      	lsls	r7, r3, #21
 8001ade:	f57f af61 	bpl.w	80019a4 <HAL_RCC_OscConfig+0x1c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ae2:	f7ff f9ab 	bl	8000e3c <HAL_GetTick>
 8001ae6:	1b80      	subs	r0, r0, r6
 8001ae8:	2802      	cmp	r0, #2
 8001aea:	d9f6      	bls.n	8001ada <HAL_RCC_OscConfig+0x152>
 8001aec:	e793      	b.n	8001a16 <HAL_RCC_OscConfig+0x8e>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001aee:	6963      	ldr	r3, [r4, #20]
 8001af0:	4d55      	ldr	r5, [pc, #340]	@ (8001c48 <HAL_RCC_OscConfig+0x2c0>)
 8001af2:	b19b      	cbz	r3, 8001b1c <HAL_RCC_OscConfig+0x194>
      __HAL_RCC_LSI_ENABLE();
 8001af4:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 8001af8:	f043 0301 	orr.w	r3, r3, #1
 8001afc:	f8c5 3094 	str.w	r3, [r5, #148]	@ 0x94
      tickstart = HAL_GetTick();
 8001b00:	f7ff f99c 	bl	8000e3c <HAL_GetTick>
 8001b04:	4606      	mov	r6, r0
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b06:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 8001b0a:	079b      	lsls	r3, r3, #30
 8001b0c:	f53f af4e 	bmi.w	80019ac <HAL_RCC_OscConfig+0x24>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b10:	f7ff f994 	bl	8000e3c <HAL_GetTick>
 8001b14:	1b80      	subs	r0, r0, r6
 8001b16:	2802      	cmp	r0, #2
 8001b18:	d9f5      	bls.n	8001b06 <HAL_RCC_OscConfig+0x17e>
 8001b1a:	e77c      	b.n	8001a16 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8001b1c:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 8001b20:	f023 0301 	bic.w	r3, r3, #1
 8001b24:	f8c5 3094 	str.w	r3, [r5, #148]	@ 0x94
      tickstart = HAL_GetTick();
 8001b28:	f7ff f988 	bl	8000e3c <HAL_GetTick>
 8001b2c:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b2e:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 8001b32:	079f      	lsls	r7, r3, #30
 8001b34:	f57f af3a 	bpl.w	80019ac <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b38:	f7ff f980 	bl	8000e3c <HAL_GetTick>
 8001b3c:	1b80      	subs	r0, r0, r6
 8001b3e:	2802      	cmp	r0, #2
 8001b40:	d9f5      	bls.n	8001b2e <HAL_RCC_OscConfig+0x1a6>
 8001b42:	e768      	b.n	8001a16 <HAL_RCC_OscConfig+0x8e>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001b44:	4d40      	ldr	r5, [pc, #256]	@ (8001c48 <HAL_RCC_OscConfig+0x2c0>)
 8001b46:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8001b48:	00d8      	lsls	r0, r3, #3
 8001b4a:	d427      	bmi.n	8001b9c <HAL_RCC_OscConfig+0x214>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b4c:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8001b4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b52:	65ab      	str	r3, [r5, #88]	@ 0x58
 8001b54:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8001b56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b5a:	9301      	str	r3, [sp, #4]
 8001b5c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001b5e:	2701      	movs	r7, #1
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b60:	4e3b      	ldr	r6, [pc, #236]	@ (8001c50 <HAL_RCC_OscConfig+0x2c8>)
 8001b62:	6833      	ldr	r3, [r6, #0]
 8001b64:	05d9      	lsls	r1, r3, #23
 8001b66:	d51b      	bpl.n	8001ba0 <HAL_RCC_OscConfig+0x218>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b68:	68a3      	ldr	r3, [r4, #8]
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d129      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x23a>
 8001b6e:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8001b72:	f043 0301 	orr.w	r3, r3, #1
 8001b76:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
      tickstart = HAL_GetTick();
 8001b7a:	f7ff f95f 	bl	8000e3c <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b7e:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8001b82:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b84:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8001b88:	079b      	lsls	r3, r3, #30
 8001b8a:	d540      	bpl.n	8001c0e <HAL_RCC_OscConfig+0x286>
    if (pwrclkchanged == SET)
 8001b8c:	2f00      	cmp	r7, #0
 8001b8e:	f43f af11 	beq.w	80019b4 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b92:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8001b94:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b98:	65ab      	str	r3, [r5, #88]	@ 0x58
 8001b9a:	e70b      	b.n	80019b4 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8001b9c:	2700      	movs	r7, #0
 8001b9e:	e7df      	b.n	8001b60 <HAL_RCC_OscConfig+0x1d8>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ba0:	6833      	ldr	r3, [r6, #0]
 8001ba2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ba6:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001ba8:	f7ff f948 	bl	8000e3c <HAL_GetTick>
 8001bac:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bae:	6833      	ldr	r3, [r6, #0]
 8001bb0:	05da      	lsls	r2, r3, #23
 8001bb2:	d4d9      	bmi.n	8001b68 <HAL_RCC_OscConfig+0x1e0>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bb4:	f7ff f942 	bl	8000e3c <HAL_GetTick>
 8001bb8:	eba0 0008 	sub.w	r0, r0, r8
 8001bbc:	2802      	cmp	r0, #2
 8001bbe:	d9f6      	bls.n	8001bae <HAL_RCC_OscConfig+0x226>
 8001bc0:	e729      	b.n	8001a16 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bc2:	2b05      	cmp	r3, #5
 8001bc4:	d106      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x24c>
 8001bc6:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8001bca:	f043 0304 	orr.w	r3, r3, #4
 8001bce:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
 8001bd2:	e7cc      	b.n	8001b6e <HAL_RCC_OscConfig+0x1e6>
 8001bd4:	f8d5 2090 	ldr.w	r2, [r5, #144]	@ 0x90
 8001bd8:	f022 0201 	bic.w	r2, r2, #1
 8001bdc:	f8c5 2090 	str.w	r2, [r5, #144]	@ 0x90
 8001be0:	f8d5 2090 	ldr.w	r2, [r5, #144]	@ 0x90
 8001be4:	f022 0204 	bic.w	r2, r2, #4
 8001be8:	f8c5 2090 	str.w	r2, [r5, #144]	@ 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d1c4      	bne.n	8001b7a <HAL_RCC_OscConfig+0x1f2>
      tickstart = HAL_GetTick();
 8001bf0:	f7ff f924 	bl	8000e3c <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bf4:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8001bf8:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bfa:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8001bfe:	0799      	lsls	r1, r3, #30
 8001c00:	d5c4      	bpl.n	8001b8c <HAL_RCC_OscConfig+0x204>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c02:	f7ff f91b 	bl	8000e3c <HAL_GetTick>
 8001c06:	1b80      	subs	r0, r0, r6
 8001c08:	4540      	cmp	r0, r8
 8001c0a:	d9f6      	bls.n	8001bfa <HAL_RCC_OscConfig+0x272>
 8001c0c:	e703      	b.n	8001a16 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c0e:	f7ff f915 	bl	8000e3c <HAL_GetTick>
 8001c12:	1b80      	subs	r0, r0, r6
 8001c14:	4540      	cmp	r0, r8
 8001c16:	d9b5      	bls.n	8001b84 <HAL_RCC_OscConfig+0x1fc>
 8001c18:	e6fd      	b.n	8001a16 <HAL_RCC_OscConfig+0x8e>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001c1a:	69a3      	ldr	r3, [r4, #24]
 8001c1c:	4d0a      	ldr	r5, [pc, #40]	@ (8001c48 <HAL_RCC_OscConfig+0x2c0>)
 8001c1e:	b1cb      	cbz	r3, 8001c54 <HAL_RCC_OscConfig+0x2cc>
      __HAL_RCC_HSI48_ENABLE();
 8001c20:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 8001c24:	f043 0301 	orr.w	r3, r3, #1
 8001c28:	f8c5 3098 	str.w	r3, [r5, #152]	@ 0x98
      tickstart = HAL_GetTick();
 8001c2c:	f7ff f906 	bl	8000e3c <HAL_GetTick>
 8001c30:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c32:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 8001c36:	079b      	lsls	r3, r3, #30
 8001c38:	f53f aec0 	bmi.w	80019bc <HAL_RCC_OscConfig+0x34>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c3c:	f7ff f8fe 	bl	8000e3c <HAL_GetTick>
 8001c40:	1b80      	subs	r0, r0, r6
 8001c42:	2802      	cmp	r0, #2
 8001c44:	d9f5      	bls.n	8001c32 <HAL_RCC_OscConfig+0x2aa>
 8001c46:	e6e6      	b.n	8001a16 <HAL_RCC_OscConfig+0x8e>
 8001c48:	40021000 	.word	0x40021000
 8001c4c:	2000000c 	.word	0x2000000c
 8001c50:	40007000 	.word	0x40007000
      __HAL_RCC_HSI48_DISABLE();
 8001c54:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 8001c58:	f023 0301 	bic.w	r3, r3, #1
 8001c5c:	f8c5 3098 	str.w	r3, [r5, #152]	@ 0x98
      tickstart = HAL_GetTick();
 8001c60:	f7ff f8ec 	bl	8000e3c <HAL_GetTick>
 8001c64:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c66:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 8001c6a:	079f      	lsls	r7, r3, #30
 8001c6c:	f57f aea6 	bpl.w	80019bc <HAL_RCC_OscConfig+0x34>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c70:	f7ff f8e4 	bl	8000e3c <HAL_GetTick>
 8001c74:	1b80      	subs	r0, r0, r6
 8001c76:	2802      	cmp	r0, #2
 8001c78:	d9f5      	bls.n	8001c66 <HAL_RCC_OscConfig+0x2de>
 8001c7a:	e6cc      	b.n	8001a16 <HAL_RCC_OscConfig+0x8e>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c7c:	4d45      	ldr	r5, [pc, #276]	@ (8001d94 <HAL_RCC_OscConfig+0x40c>)
 8001c7e:	68aa      	ldr	r2, [r5, #8]
 8001c80:	f002 020c 	and.w	r2, r2, #12
 8001c84:	2a0c      	cmp	r2, #12
 8001c86:	d051      	beq.n	8001d2c <HAL_RCC_OscConfig+0x3a4>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c88:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 8001c8a:	682b      	ldr	r3, [r5, #0]
 8001c8c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001c90:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c92:	d13a      	bne.n	8001d0a <HAL_RCC_OscConfig+0x382>
        tickstart = HAL_GetTick();
 8001c94:	f7ff f8d2 	bl	8000e3c <HAL_GetTick>
 8001c98:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c9a:	682b      	ldr	r3, [r5, #0]
 8001c9c:	0199      	lsls	r1, r3, #6
 8001c9e:	d42e      	bmi.n	8001cfe <HAL_RCC_OscConfig+0x376>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ca0:	68ea      	ldr	r2, [r5, #12]
 8001ca2:	4b3d      	ldr	r3, [pc, #244]	@ (8001d98 <HAL_RCC_OscConfig+0x410>)
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	6a22      	ldr	r2, [r4, #32]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001cac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001cb0:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8001cb2:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 8001cb6:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8001cb8:	3a01      	subs	r2, #1
 8001cba:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8001cbe:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8001cc0:	0852      	lsrs	r2, r2, #1
 8001cc2:	3a01      	subs	r2, #1
 8001cc4:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8001cc8:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8001cca:	0852      	lsrs	r2, r2, #1
 8001ccc:	3a01      	subs	r2, #1
 8001cce:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8001cd2:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8001cd4:	682b      	ldr	r3, [r5, #0]
 8001cd6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001cda:	602b      	str	r3, [r5, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001cdc:	68eb      	ldr	r3, [r5, #12]
 8001cde:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ce2:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8001ce4:	f7ff f8aa 	bl	8000e3c <HAL_GetTick>
 8001ce8:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cea:	682b      	ldr	r3, [r5, #0]
 8001cec:	019a      	lsls	r2, r3, #6
 8001cee:	f53f ae69 	bmi.w	80019c4 <HAL_RCC_OscConfig+0x3c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cf2:	f7ff f8a3 	bl	8000e3c <HAL_GetTick>
 8001cf6:	1b00      	subs	r0, r0, r4
 8001cf8:	2802      	cmp	r0, #2
 8001cfa:	d9f6      	bls.n	8001cea <HAL_RCC_OscConfig+0x362>
 8001cfc:	e68b      	b.n	8001a16 <HAL_RCC_OscConfig+0x8e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cfe:	f7ff f89d 	bl	8000e3c <HAL_GetTick>
 8001d02:	1b80      	subs	r0, r0, r6
 8001d04:	2802      	cmp	r0, #2
 8001d06:	d9c8      	bls.n	8001c9a <HAL_RCC_OscConfig+0x312>
 8001d08:	e685      	b.n	8001a16 <HAL_RCC_OscConfig+0x8e>
        tickstart = HAL_GetTick();
 8001d0a:	f7ff f897 	bl	8000e3c <HAL_GetTick>
 8001d0e:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d10:	682b      	ldr	r3, [r5, #0]
 8001d12:	019b      	lsls	r3, r3, #6
 8001d14:	d404      	bmi.n	8001d20 <HAL_RCC_OscConfig+0x398>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001d16:	68ea      	ldr	r2, [r5, #12]
 8001d18:	4b20      	ldr	r3, [pc, #128]	@ (8001d9c <HAL_RCC_OscConfig+0x414>)
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	60eb      	str	r3, [r5, #12]
 8001d1e:	e651      	b.n	80019c4 <HAL_RCC_OscConfig+0x3c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d20:	f7ff f88c 	bl	8000e3c <HAL_GetTick>
 8001d24:	1b00      	subs	r0, r0, r4
 8001d26:	2802      	cmp	r0, #2
 8001d28:	d9f2      	bls.n	8001d10 <HAL_RCC_OscConfig+0x388>
 8001d2a:	e674      	b.n	8001a16 <HAL_RCC_OscConfig+0x8e>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	f43f ae2f 	beq.w	8001990 <HAL_RCC_OscConfig+0x8>
      temp_pllckcfg = RCC->PLLCFGR;
 8001d32:	68eb      	ldr	r3, [r5, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d34:	6a22      	ldr	r2, [r4, #32]
 8001d36:	f003 0103 	and.w	r1, r3, #3
 8001d3a:	4291      	cmp	r1, r2
 8001d3c:	f47f ae28 	bne.w	8001990 <HAL_RCC_OscConfig+0x8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d40:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8001d42:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001d46:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d48:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8001d4c:	f47f ae20 	bne.w	8001990 <HAL_RCC_OscConfig+0x8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d50:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8001d52:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d56:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8001d5a:	f47f ae19 	bne.w	8001990 <HAL_RCC_OscConfig+0x8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001d5e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8001d60:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d64:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8001d68:	f47f ae12 	bne.w	8001990 <HAL_RCC_OscConfig+0x8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d6c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8001d6e:	0852      	lsrs	r2, r2, #1
 8001d70:	f403 01c0 	and.w	r1, r3, #6291456	@ 0x600000
 8001d74:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001d76:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8001d7a:	f47f ae09 	bne.w	8001990 <HAL_RCC_OscConfig+0x8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d7e:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8001d80:	0852      	lsrs	r2, r2, #1
 8001d82:	3a01      	subs	r2, #1
 8001d84:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d88:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8001d8c:	bf14      	ite	ne
 8001d8e:	2001      	movne	r0, #1
 8001d90:	2000      	moveq	r0, #0
 8001d92:	e5fe      	b.n	8001992 <HAL_RCC_OscConfig+0xa>
 8001d94:	40021000 	.word	0x40021000
 8001d98:	019f800c 	.word	0x019f800c
 8001d9c:	feeefffc 	.word	0xfeeefffc

08001da0 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001da0:	4b17      	ldr	r3, [pc, #92]	@ (8001e00 <HAL_RCC_GetSysClockFreq+0x60>)
 8001da2:	689a      	ldr	r2, [r3, #8]
 8001da4:	f002 020c 	and.w	r2, r2, #12
 8001da8:	2a04      	cmp	r2, #4
 8001daa:	d023      	beq.n	8001df4 <HAL_RCC_GetSysClockFreq+0x54>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001dac:	689a      	ldr	r2, [r3, #8]
 8001dae:	f002 020c 	and.w	r2, r2, #12
 8001db2:	2a08      	cmp	r2, #8
 8001db4:	d020      	beq.n	8001df8 <HAL_RCC_GetSysClockFreq+0x58>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001db6:	689a      	ldr	r2, [r3, #8]
 8001db8:	f002 020c 	and.w	r2, r2, #12
 8001dbc:	2a0c      	cmp	r2, #12
 8001dbe:	d11d      	bne.n	8001dfc <HAL_RCC_GetSysClockFreq+0x5c>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001dc0:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001dc2:	68da      	ldr	r2, [r3, #12]
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
      break;

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001dc4:	68d8      	ldr	r0, [r3, #12]
      break;
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001dc6:	68db      	ldr	r3, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001dc8:	f001 0103 	and.w	r1, r1, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001dcc:	f3c3 6341 	ubfx	r3, r3, #25, #2
    switch (pllsource)
 8001dd0:	2903      	cmp	r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001dd2:	f3c2 1203 	ubfx	r2, r2, #4, #4
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001dd6:	f3c0 2006 	ubfx	r0, r0, #8, #7
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001dda:	f103 0301 	add.w	r3, r3, #1
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001dde:	bf0c      	ite	eq
 8001de0:	4908      	ldreq	r1, [pc, #32]	@ (8001e04 <HAL_RCC_GetSysClockFreq+0x64>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001de2:	4909      	ldrne	r1, [pc, #36]	@ (8001e08 <HAL_RCC_GetSysClockFreq+0x68>)
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001de4:	005b      	lsls	r3, r3, #1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001de6:	3201      	adds	r2, #1
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001de8:	fbb1 f2f2 	udiv	r2, r1, r2
 8001dec:	4350      	muls	r0, r2
    sysclockfreq = pllvco/pllr;
 8001dee:	fbb0 f0f3 	udiv	r0, r0, r3
  else
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
 8001df2:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 8001df4:	4804      	ldr	r0, [pc, #16]	@ (8001e08 <HAL_RCC_GetSysClockFreq+0x68>)
 8001df6:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 8001df8:	4802      	ldr	r0, [pc, #8]	@ (8001e04 <HAL_RCC_GetSysClockFreq+0x64>)
 8001dfa:	4770      	bx	lr
    sysclockfreq = 0U;
 8001dfc:	2000      	movs	r0, #0
}
 8001dfe:	4770      	bx	lr
 8001e00:	40021000 	.word	0x40021000
 8001e04:	007a1200 	.word	0x007a1200
 8001e08:	00f42400 	.word	0x00f42400

08001e0c <HAL_RCC_ClockConfig>:
{
 8001e0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001e10:	460e      	mov	r6, r1
  if (RCC_ClkInitStruct == NULL)
 8001e12:	4605      	mov	r5, r0
 8001e14:	b910      	cbnz	r0, 8001e1c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001e16:	2001      	movs	r0, #1
}
 8001e18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e1c:	4a6d      	ldr	r2, [pc, #436]	@ (8001fd4 <HAL_RCC_ClockConfig+0x1c8>)
 8001e1e:	6813      	ldr	r3, [r2, #0]
 8001e20:	f003 030f 	and.w	r3, r3, #15
 8001e24:	428b      	cmp	r3, r1
 8001e26:	d345      	bcc.n	8001eb4 <HAL_RCC_ClockConfig+0xa8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e28:	6829      	ldr	r1, [r5, #0]
 8001e2a:	f011 0801 	ands.w	r8, r1, #1
 8001e2e:	d14c      	bne.n	8001eca <HAL_RCC_ClockConfig+0xbe>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e30:	682a      	ldr	r2, [r5, #0]
 8001e32:	0791      	lsls	r1, r2, #30
 8001e34:	f140 80a7 	bpl.w	8001f86 <HAL_RCC_ClockConfig+0x17a>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e38:	4b67      	ldr	r3, [pc, #412]	@ (8001fd8 <HAL_RCC_ClockConfig+0x1cc>)
 8001e3a:	f012 0f04 	tst.w	r2, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e3e:	bf1e      	ittt	ne
 8001e40:	6899      	ldrne	r1, [r3, #8]
 8001e42:	f441 61e0 	orrne.w	r1, r1, #1792	@ 0x700
 8001e46:	6099      	strne	r1, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e48:	0712      	lsls	r2, r2, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001e4a:	bf41      	itttt	mi
 8001e4c:	689a      	ldrmi	r2, [r3, #8]
 8001e4e:	f422 527c 	bicmi.w	r2, r2, #16128	@ 0x3f00
 8001e52:	f442 62e0 	orrmi.w	r2, r2, #1792	@ 0x700
 8001e56:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e58:	689a      	ldr	r2, [r3, #8]
 8001e5a:	68a9      	ldr	r1, [r5, #8]
 8001e5c:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8001e60:	430a      	orrs	r2, r1
 8001e62:	609a      	str	r2, [r3, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e64:	4c5b      	ldr	r4, [pc, #364]	@ (8001fd4 <HAL_RCC_ClockConfig+0x1c8>)
 8001e66:	6823      	ldr	r3, [r4, #0]
 8001e68:	f003 030f 	and.w	r3, r3, #15
 8001e6c:	42b3      	cmp	r3, r6
 8001e6e:	f200 8093 	bhi.w	8001f98 <HAL_RCC_ClockConfig+0x18c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e72:	682a      	ldr	r2, [r5, #0]
 8001e74:	4c58      	ldr	r4, [pc, #352]	@ (8001fd8 <HAL_RCC_ClockConfig+0x1cc>)
 8001e76:	f012 0f04 	tst.w	r2, #4
 8001e7a:	f040 80a3 	bne.w	8001fc4 <HAL_RCC_ClockConfig+0x1b8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e7e:	0713      	lsls	r3, r2, #28
 8001e80:	d506      	bpl.n	8001e90 <HAL_RCC_ClockConfig+0x84>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e82:	68a3      	ldr	r3, [r4, #8]
 8001e84:	692a      	ldr	r2, [r5, #16]
 8001e86:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8001e8a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001e8e:	60a3      	str	r3, [r4, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e90:	f7ff ff86 	bl	8001da0 <HAL_RCC_GetSysClockFreq>
 8001e94:	68a3      	ldr	r3, [r4, #8]
 8001e96:	4a51      	ldr	r2, [pc, #324]	@ (8001fdc <HAL_RCC_ClockConfig+0x1d0>)
 8001e98:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001e9c:	5cd3      	ldrb	r3, [r2, r3]
 8001e9e:	f003 031f 	and.w	r3, r3, #31
 8001ea2:	40d8      	lsrs	r0, r3
 8001ea4:	4b4e      	ldr	r3, [pc, #312]	@ (8001fe0 <HAL_RCC_ClockConfig+0x1d4>)
 8001ea6:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8001ea8:	4b4e      	ldr	r3, [pc, #312]	@ (8001fe4 <HAL_RCC_ClockConfig+0x1d8>)
 8001eaa:	6818      	ldr	r0, [r3, #0]
}
 8001eac:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return HAL_InitTick(uwTickPrio);
 8001eb0:	f7fe bf82 	b.w	8000db8 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eb4:	6813      	ldr	r3, [r2, #0]
 8001eb6:	f023 030f 	bic.w	r3, r3, #15
 8001eba:	430b      	orrs	r3, r1
 8001ebc:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ebe:	6813      	ldr	r3, [r2, #0]
 8001ec0:	f003 030f 	and.w	r3, r3, #15
 8001ec4:	428b      	cmp	r3, r1
 8001ec6:	d1a6      	bne.n	8001e16 <HAL_RCC_ClockConfig+0xa>
 8001ec8:	e7ae      	b.n	8001e28 <HAL_RCC_ClockConfig+0x1c>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001eca:	686f      	ldr	r7, [r5, #4]
 8001ecc:	4c42      	ldr	r4, [pc, #264]	@ (8001fd8 <HAL_RCC_ClockConfig+0x1cc>)
 8001ece:	2f03      	cmp	r7, #3
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ed0:	6823      	ldr	r3, [r4, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ed2:	d149      	bne.n	8001f68 <HAL_RCC_ClockConfig+0x15c>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ed4:	019b      	lsls	r3, r3, #6
 8001ed6:	d59e      	bpl.n	8001e16 <HAL_RCC_ClockConfig+0xa>
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ed8:	68e3      	ldr	r3, [r4, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001eda:	68e2      	ldr	r2, [r4, #12]
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001edc:	f003 0303 	and.w	r3, r3, #3

  switch (pllsource)
 8001ee0:	2b03      	cmp	r3, #3
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ee2:	68e3      	ldr	r3, [r4, #12]
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ee4:	bf0c      	ite	eq
 8001ee6:	4840      	ldreq	r0, [pc, #256]	@ (8001fe8 <HAL_RCC_ClockConfig+0x1dc>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ee8:	4840      	ldrne	r0, [pc, #256]	@ (8001fec <HAL_RCC_ClockConfig+0x1e0>)
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001eea:	f3c2 1203 	ubfx	r2, r2, #4, #4
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001eee:	f3c3 2306 	ubfx	r3, r3, #8, #7
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ef2:	3201      	adds	r2, #1
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ef4:	fbb0 f2f2 	udiv	r2, r0, r2
 8001ef8:	4353      	muls	r3, r2
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001efa:	68e2      	ldr	r2, [r4, #12]
 8001efc:	f3c2 6241 	ubfx	r2, r2, #25, #2
 8001f00:	3201      	adds	r2, #1
 8001f02:	0052      	lsls	r2, r2, #1
  sysclockfreq = pllvco/pllr;
 8001f04:	fbb3 f3f2 	udiv	r3, r3, r2
      if(pllfreq > 80000000U)
 8001f08:	4a39      	ldr	r2, [pc, #228]	@ (8001ff0 <HAL_RCC_ClockConfig+0x1e4>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d81a      	bhi.n	8001f44 <HAL_RCC_ClockConfig+0x138>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001f0e:	f04f 0800 	mov.w	r8, #0
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f12:	68a3      	ldr	r3, [r4, #8]
 8001f14:	f023 0303 	bic.w	r3, r3, #3
 8001f18:	433b      	orrs	r3, r7
 8001f1a:	60a3      	str	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8001f1c:	f7fe ff8e 	bl	8000e3c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f20:	f241 3988 	movw	r9, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 8001f24:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f26:	68a3      	ldr	r3, [r4, #8]
 8001f28:	686a      	ldr	r2, [r5, #4]
 8001f2a:	f003 030c 	and.w	r3, r3, #12
 8001f2e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001f32:	f43f af7d 	beq.w	8001e30 <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f36:	f7fe ff81 	bl	8000e3c <HAL_GetTick>
 8001f3a:	1bc0      	subs	r0, r0, r7
 8001f3c:	4548      	cmp	r0, r9
 8001f3e:	d9f2      	bls.n	8001f26 <HAL_RCC_ClockConfig+0x11a>
        return HAL_TIMEOUT;
 8001f40:	2003      	movs	r0, #3
 8001f42:	e769      	b.n	8001e18 <HAL_RCC_ClockConfig+0xc>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001f44:	68a3      	ldr	r3, [r4, #8]
 8001f46:	f013 0ff0 	tst.w	r3, #240	@ 0xf0
 8001f4a:	d004      	beq.n	8001f56 <HAL_RCC_ClockConfig+0x14a>
 8001f4c:	0788      	lsls	r0, r1, #30
 8001f4e:	d5de      	bpl.n	8001f0e <HAL_RCC_ClockConfig+0x102>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001f50:	68ab      	ldr	r3, [r5, #8]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d1db      	bne.n	8001f0e <HAL_RCC_ClockConfig+0x102>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001f56:	68a3      	ldr	r3, [r4, #8]
 8001f58:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001f5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f60:	60a3      	str	r3, [r4, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001f62:	f04f 0880 	mov.w	r8, #128	@ 0x80
 8001f66:	e7d4      	b.n	8001f12 <HAL_RCC_ClockConfig+0x106>
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f68:	2f02      	cmp	r7, #2
 8001f6a:	d109      	bne.n	8001f80 <HAL_RCC_ClockConfig+0x174>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f6c:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f70:	f43f af51 	beq.w	8001e16 <HAL_RCC_ClockConfig+0xa>
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001f74:	f7ff ff14 	bl	8001da0 <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 8001f78:	4b1d      	ldr	r3, [pc, #116]	@ (8001ff0 <HAL_RCC_ClockConfig+0x1e4>)
 8001f7a:	4298      	cmp	r0, r3
 8001f7c:	d9c7      	bls.n	8001f0e <HAL_RCC_ClockConfig+0x102>
 8001f7e:	e7ea      	b.n	8001f56 <HAL_RCC_ClockConfig+0x14a>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f80:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8001f84:	e7f4      	b.n	8001f70 <HAL_RCC_ClockConfig+0x164>
    if(hpre == RCC_SYSCLK_DIV2)
 8001f86:	f1b8 0f80 	cmp.w	r8, #128	@ 0x80
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001f8a:	bf01      	itttt	eq
 8001f8c:	4a12      	ldreq	r2, [pc, #72]	@ (8001fd8 <HAL_RCC_ClockConfig+0x1cc>)
 8001f8e:	6893      	ldreq	r3, [r2, #8]
 8001f90:	f023 03f0 	biceq.w	r3, r3, #240	@ 0xf0
 8001f94:	6093      	streq	r3, [r2, #8]
 8001f96:	e765      	b.n	8001e64 <HAL_RCC_ClockConfig+0x58>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f98:	6823      	ldr	r3, [r4, #0]
 8001f9a:	f023 030f 	bic.w	r3, r3, #15
 8001f9e:	4333      	orrs	r3, r6
 8001fa0:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8001fa2:	f7fe ff4b 	bl	8000e3c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fa6:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 8001faa:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fac:	6823      	ldr	r3, [r4, #0]
 8001fae:	f003 030f 	and.w	r3, r3, #15
 8001fb2:	42b3      	cmp	r3, r6
 8001fb4:	f43f af5d 	beq.w	8001e72 <HAL_RCC_ClockConfig+0x66>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fb8:	f7fe ff40 	bl	8000e3c <HAL_GetTick>
 8001fbc:	1bc0      	subs	r0, r0, r7
 8001fbe:	4540      	cmp	r0, r8
 8001fc0:	d9f4      	bls.n	8001fac <HAL_RCC_ClockConfig+0x1a0>
 8001fc2:	e7bd      	b.n	8001f40 <HAL_RCC_ClockConfig+0x134>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fc4:	68a3      	ldr	r3, [r4, #8]
 8001fc6:	68e9      	ldr	r1, [r5, #12]
 8001fc8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001fcc:	430b      	orrs	r3, r1
 8001fce:	60a3      	str	r3, [r4, #8]
 8001fd0:	e755      	b.n	8001e7e <HAL_RCC_ClockConfig+0x72>
 8001fd2:	bf00      	nop
 8001fd4:	40022000 	.word	0x40022000
 8001fd8:	40021000 	.word	0x40021000
 8001fdc:	080033e3 	.word	0x080033e3
 8001fe0:	20000004 	.word	0x20000004
 8001fe4:	2000000c 	.word	0x2000000c
 8001fe8:	007a1200 	.word	0x007a1200
 8001fec:	00f42400 	.word	0x00f42400
 8001ff0:	04c4b400 	.word	0x04c4b400

08001ff4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ff4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001ff8:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ffa:	6800      	ldr	r0, [r0, #0]
 8001ffc:	f410 2000 	ands.w	r0, r0, #524288	@ 0x80000
 8002000:	d05a      	beq.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002002:	4d25      	ldr	r5, [pc, #148]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0xa4>)
 8002004:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8002006:	00d8      	lsls	r0, r3, #3
 8002008:	d444      	bmi.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800200a:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 800200c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002010:	65ab      	str	r3, [r5, #88]	@ 0x58
 8002012:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8002014:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002018:	9301      	str	r3, [sp, #4]
 800201a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800201c:	2601      	movs	r6, #1
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800201e:	4f1f      	ldr	r7, [pc, #124]	@ (800209c <HAL_RCCEx_PeriphCLKConfig+0xa8>)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002026:	603b      	str	r3, [r7, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002028:	f7fe ff08 	bl	8000e3c <HAL_GetTick>
 800202c:	4680      	mov	r8, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	05d9      	lsls	r1, r3, #23
 8002032:	d535      	bpl.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0xac>
    }

    if(ret == HAL_OK)
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002034:	f8d5 2090 	ldr.w	r2, [r5, #144]	@ 0x90
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002038:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800203a:	f412 7240 	ands.w	r2, r2, #768	@ 0x300
 800203e:	d01f      	beq.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x8c>
 8002040:	429a      	cmp	r2, r3
 8002042:	d011      	beq.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x74>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002044:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002048:	f8d5 2090 	ldr.w	r2, [r5, #144]	@ 0x90
 800204c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002050:	f8c5 2090 	str.w	r2, [r5, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002054:	f8d5 2090 	ldr.w	r2, [r5, #144]	@ 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002058:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 800205c:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002060:	f8c5 2090 	str.w	r2, [r5, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002064:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002068:	07da      	lsls	r2, r3, #31
 800206a:	d509      	bpl.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800206c:	f7fe fee6 	bl	8000e3c <HAL_GetTick>

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002070:	f241 3888 	movw	r8, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 8002074:	4607      	mov	r7, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002076:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 800207a:	079b      	lsls	r3, r3, #30
 800207c:	f140 8129 	bpl.w	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
      }
      
      if(ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002080:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8002084:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8002086:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800208a:	4313      	orrs	r3, r2
 800208c:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002090:	2000      	movs	r0, #0
 8002092:	e00c      	b.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0xba>
    FlagStatus       pwrclkchanged = RESET;
 8002094:	2600      	movs	r6, #0
 8002096:	e7c2      	b.n	800201e <HAL_RCCEx_PeriphCLKConfig+0x2a>
 8002098:	40021000 	.word	0x40021000
 800209c:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020a0:	f7fe fecc 	bl	8000e3c <HAL_GetTick>
 80020a4:	eba0 0008 	sub.w	r0, r0, r8
 80020a8:	2802      	cmp	r0, #2
 80020aa:	d9c0      	bls.n	800202e <HAL_RCCEx_PeriphCLKConfig+0x3a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80020ac:	2003      	movs	r0, #3
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020ae:	b11e      	cbz	r6, 80020b8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020b0:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 80020b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020b6:	65ab      	str	r3, [r5, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020b8:	6823      	ldr	r3, [r4, #0]
 80020ba:	07dd      	lsls	r5, r3, #31
 80020bc:	d508      	bpl.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0xdc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020be:	4988      	ldr	r1, [pc, #544]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80020c0:	6865      	ldr	r5, [r4, #4]
 80020c2:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80020c6:	f022 0203 	bic.w	r2, r2, #3
 80020ca:	432a      	orrs	r2, r5
 80020cc:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80020d0:	0799      	lsls	r1, r3, #30
 80020d2:	d508      	bpl.n	80020e6 <HAL_RCCEx_PeriphCLKConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80020d4:	4982      	ldr	r1, [pc, #520]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80020d6:	68a5      	ldr	r5, [r4, #8]
 80020d8:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80020dc:	f022 020c 	bic.w	r2, r2, #12
 80020e0:	432a      	orrs	r2, r5
 80020e2:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80020e6:	075a      	lsls	r2, r3, #29
 80020e8:	d508      	bpl.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80020ea:	497d      	ldr	r1, [pc, #500]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80020ec:	68e5      	ldr	r5, [r4, #12]
 80020ee:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80020f2:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 80020f6:	432a      	orrs	r2, r5
 80020f8:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80020fc:	071f      	lsls	r7, r3, #28
 80020fe:	d508      	bpl.n	8002112 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002100:	4977      	ldr	r1, [pc, #476]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002102:	6925      	ldr	r5, [r4, #16]
 8002104:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8002108:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 800210c:	432a      	orrs	r2, r5
 800210e:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002112:	06de      	lsls	r6, r3, #27
 8002114:	d508      	bpl.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002116:	4972      	ldr	r1, [pc, #456]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002118:	6965      	ldr	r5, [r4, #20]
 800211a:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800211e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002122:	432a      	orrs	r2, r5
 8002124:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002128:	069d      	lsls	r5, r3, #26
 800212a:	d508      	bpl.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800212c:	496c      	ldr	r1, [pc, #432]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800212e:	69a5      	ldr	r5, [r4, #24]
 8002130:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8002134:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002138:	432a      	orrs	r2, r5
 800213a:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800213e:	0659      	lsls	r1, r3, #25
 8002140:	d508      	bpl.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002142:	4967      	ldr	r1, [pc, #412]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002144:	69e5      	ldr	r5, [r4, #28]
 8002146:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800214a:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 800214e:	432a      	orrs	r2, r5
 8002150:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002154:	061a      	lsls	r2, r3, #24
 8002156:	d508      	bpl.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002158:	4961      	ldr	r1, [pc, #388]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800215a:	6a25      	ldr	r5, [r4, #32]
 800215c:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8002160:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8002164:	432a      	orrs	r2, r5
 8002166:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800216a:	05df      	lsls	r7, r3, #23
 800216c:	d508      	bpl.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800216e:	495c      	ldr	r1, [pc, #368]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002170:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8002172:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8002176:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 800217a:	432a      	orrs	r2, r5
 800217c:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002180:	039e      	lsls	r6, r3, #14
 8002182:	d508      	bpl.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002184:	4956      	ldr	r1, [pc, #344]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002186:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 8002188:	f8d1 209c 	ldr.w	r2, [r1, #156]	@ 0x9c
 800218c:	f022 0203 	bic.w	r2, r2, #3
 8002190:	432a      	orrs	r2, r5
 8002192:	f8c1 209c 	str.w	r2, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002196:	059d      	lsls	r5, r3, #22
 8002198:	d508      	bpl.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800219a:	4951      	ldr	r1, [pc, #324]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800219c:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 800219e:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80021a2:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 80021a6:	432a      	orrs	r2, r5
 80021a8:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80021ac:	0559      	lsls	r1, r3, #21
 80021ae:	d50f      	bpl.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80021b0:	494b      	ldr	r1, [pc, #300]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80021b2:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80021b4:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80021b8:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 80021bc:	432a      	orrs	r2, r5
 80021be:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80021c2:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021c6:	bf02      	ittt	eq
 80021c8:	68ca      	ldreq	r2, [r1, #12]
 80021ca:	f442 1280 	orreq.w	r2, r2, #1048576	@ 0x100000
 80021ce:	60ca      	streq	r2, [r1, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80021d0:	051a      	lsls	r2, r3, #20
 80021d2:	d50f      	bpl.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80021d4:	4942      	ldr	r1, [pc, #264]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80021d6:	6b65      	ldr	r5, [r4, #52]	@ 0x34
 80021d8:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80021dc:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 80021e0:	432a      	orrs	r2, r5
 80021e2:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80021e6:	f5b5 0f80 	cmp.w	r5, #4194304	@ 0x400000
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021ea:	bf02      	ittt	eq
 80021ec:	68ca      	ldreq	r2, [r1, #12]
 80021ee:	f442 1280 	orreq.w	r2, r2, #1048576	@ 0x100000
 80021f2:	60ca      	streq	r2, [r1, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80021f4:	04df      	lsls	r7, r3, #19
 80021f6:	d50f      	bpl.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80021f8:	4939      	ldr	r1, [pc, #228]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80021fa:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 80021fc:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8002200:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002204:	432a      	orrs	r2, r5
 8002206:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800220a:	f1b5 7f80 	cmp.w	r5, #16777216	@ 0x1000000
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800220e:	bf02      	ittt	eq
 8002210:	68ca      	ldreq	r2, [r1, #12]
 8002212:	f442 1280 	orreq.w	r2, r2, #1048576	@ 0x100000
 8002216:	60ca      	streq	r2, [r1, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002218:	049e      	lsls	r6, r3, #18
 800221a:	d50f      	bpl.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800221c:	4930      	ldr	r1, [pc, #192]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800221e:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 8002220:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8002224:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 8002228:	432a      	orrs	r2, r5
 800222a:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800222e:	f1b5 6f00 	cmp.w	r5, #134217728	@ 0x8000000
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002232:	bf02      	ittt	eq
 8002234:	68ca      	ldreq	r2, [r1, #12]
 8002236:	f442 1280 	orreq.w	r2, r2, #1048576	@ 0x100000
 800223a:	60ca      	streq	r2, [r1, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800223c:	045d      	lsls	r5, r3, #17
 800223e:	d50f      	bpl.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002240:	4927      	ldr	r1, [pc, #156]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002242:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 8002244:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8002248:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 800224c:	432a      	orrs	r2, r5
 800224e:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002252:	f1b5 6f00 	cmp.w	r5, #134217728	@ 0x8000000
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002256:	bf02      	ittt	eq
 8002258:	68ca      	ldreq	r2, [r1, #12]
 800225a:	f442 1280 	orreq.w	r2, r2, #1048576	@ 0x100000
 800225e:	60ca      	streq	r2, [r1, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002260:	0419      	lsls	r1, r3, #16
 8002262:	d50f      	bpl.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002264:	491e      	ldr	r1, [pc, #120]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002266:	6c65      	ldr	r5, [r4, #68]	@ 0x44
 8002268:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800226c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002270:	432a      	orrs	r2, r5
 8002272:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002276:	f1b5 5f80 	cmp.w	r5, #268435456	@ 0x10000000
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800227a:	bf02      	ittt	eq
 800227c:	68ca      	ldreq	r2, [r1, #12]
 800227e:	f442 3280 	orreq.w	r2, r2, #65536	@ 0x10000
 8002282:	60ca      	streq	r2, [r1, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002284:	03da      	lsls	r2, r3, #15
 8002286:	d50f      	bpl.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002288:	4915      	ldr	r1, [pc, #84]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800228a:	6ca5      	ldr	r5, [r4, #72]	@ 0x48
 800228c:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8002290:	f022 4240 	bic.w	r2, r2, #3221225472	@ 0xc0000000
 8002294:	432a      	orrs	r2, r5
 8002296:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800229a:	f1b5 4f80 	cmp.w	r5, #1073741824	@ 0x40000000
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800229e:	bf02      	ittt	eq
 80022a0:	68ca      	ldreq	r2, [r1, #12]
 80022a2:	f442 3280 	orreq.w	r2, r2, #65536	@ 0x10000
 80022a6:	60ca      	streq	r2, [r1, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80022a8:	035b      	lsls	r3, r3, #13
 80022aa:	d50f      	bpl.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80022ac:	4a0c      	ldr	r2, [pc, #48]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80022ae:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 80022b0:	f8d2 309c 	ldr.w	r3, [r2, #156]	@ 0x9c
 80022b4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80022b8:	430b      	orrs	r3, r1

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80022ba:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80022be:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80022c2:	d103      	bne.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022c4:	68d3      	ldr	r3, [r2, #12]
 80022c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022ca:	60d3      	str	r3, [r2, #12]
  }

#endif /* QUADSPI */

  return status;
}
 80022cc:	b002      	add	sp, #8
 80022ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022d2:	f7fe fdb3 	bl	8000e3c <HAL_GetTick>
 80022d6:	1bc0      	subs	r0, r0, r7
 80022d8:	4540      	cmp	r0, r8
 80022da:	f67f aecc 	bls.w	8002076 <HAL_RCCEx_PeriphCLKConfig+0x82>
 80022de:	e6e5      	b.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0xb8>
 80022e0:	40021000 	.word	0x40021000

080022e4 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 80022e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80022e6:	460e      	mov	r6, r1
 80022e8:	4614      	mov	r4, r2
 80022ea:	4605      	mov	r5, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80022ec:	f7fe fda6 	bl	8000e3c <HAL_GetTick>
 80022f0:	4434      	add	r4, r6
 80022f2:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 80022f4:	f7fe fda2 	bl	8000e3c <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80022f8:	4b22      	ldr	r3, [pc, #136]	@ (8002384 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa0>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8002300:	4363      	muls	r3, r4
  tmp_tickstart = HAL_GetTick();
 8002302:	4607      	mov	r7, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002304:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002306:	682a      	ldr	r2, [r5, #0]
 8002308:	6890      	ldr	r0, [r2, #8]
 800230a:	f010 0080 	ands.w	r0, r0, #128	@ 0x80
 800230e:	d02d      	beq.n	800236c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x88>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002310:	1c73      	adds	r3, r6, #1
 8002312:	d0f9      	beq.n	8002308 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x24>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002314:	f7fe fd92 	bl	8000e3c <HAL_GetTick>
 8002318:	1bc0      	subs	r0, r0, r7
 800231a:	42a0      	cmp	r0, r4
 800231c:	d328      	bcc.n	8002370 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x8c>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800231e:	682b      	ldr	r3, [r5, #0]
 8002320:	685a      	ldr	r2, [r3, #4]
 8002322:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002326:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002328:	686a      	ldr	r2, [r5, #4]
 800232a:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 800232e:	d10a      	bne.n	8002346 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x62>
 8002330:	68aa      	ldr	r2, [r5, #8]
 8002332:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8002336:	d002      	beq.n	800233e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x5a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002338:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800233c:	d103      	bne.n	8002346 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x62>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002344:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002346:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 8002348:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 800234c:	d107      	bne.n	800235e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x7a>
        {
          SPI_RESET_CRC(hspi);
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002354:	601a      	str	r2, [r3, #0]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800235c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800235e:	2301      	movs	r3, #1
 8002360:	f885 305d 	strb.w	r3, [r5, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002364:	2300      	movs	r3, #0
 8002366:	f885 305c 	strb.w	r3, [r5, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800236a:	2003      	movs	r0, #3
      count--;
    }
  }

  return HAL_OK;
}
 800236c:	b003      	add	sp, #12
 800236e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (count == 0U)
 8002370:	9a01      	ldr	r2, [sp, #4]
      count--;
 8002372:	9b01      	ldr	r3, [sp, #4]
      if (count == 0U)
 8002374:	2a00      	cmp	r2, #0
      count--;
 8002376:	f103 33ff 	add.w	r3, r3, #4294967295
 800237a:	9301      	str	r3, [sp, #4]
 800237c:	bf08      	it	eq
 800237e:	4614      	moveq	r4, r2
 8002380:	e7c1      	b.n	8002306 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x22>
 8002382:	bf00      	nop
 8002384:	20000004 	.word	0x20000004

08002388 <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8002388:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800238c:	461c      	mov	r4, r3
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800238e:	2300      	movs	r3, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8002390:	4617      	mov	r7, r2
  __IO uint8_t  tmpreg8 = 0;
 8002392:	f88d 3003 	strb.w	r3, [sp, #3]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8002396:	4605      	mov	r5, r0
 8002398:	460e      	mov	r6, r1

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800239a:	f7fe fd4f 	bl	8000e3c <HAL_GetTick>
 800239e:	443c      	add	r4, r7
 80023a0:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 80023a2:	f7fe fd4b 	bl	8000e3c <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80023a6:	4b29      	ldr	r3, [pc, #164]	@ (800244c <SPI_WaitFifoStateUntilTimeout.constprop.0+0xc4>)
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80023a8:	f8d5 9000 	ldr.w	r9, [r5]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	2223      	movs	r2, #35	@ 0x23
 80023b0:	4353      	muls	r3, r2
 80023b2:	0d1b      	lsrs	r3, r3, #20
 80023b4:	4363      	muls	r3, r4
  tmp_tickstart = HAL_GetTick();
 80023b6:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80023b8:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 80023ba:	682a      	ldr	r2, [r5, #0]
 80023bc:	6890      	ldr	r0, [r2, #8]
 80023be:	4030      	ands	r0, r6
 80023c0:	d038      	beq.n	8002434 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xac>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80023c2:	f5b6 6fc0 	cmp.w	r6, #1536	@ 0x600
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80023c6:	bf01      	itttt	eq
 80023c8:	f899 300c 	ldrbeq.w	r3, [r9, #12]
 80023cc:	b2db      	uxtbeq	r3, r3
 80023ce:	f88d 3003 	strbeq.w	r3, [sp, #3]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80023d2:	f89d 3003 	ldrbeq.w	r3, [sp, #3]
    }

    if (Timeout != HAL_MAX_DELAY)
 80023d6:	1c7b      	adds	r3, r7, #1
 80023d8:	d0f0      	beq.n	80023bc <SPI_WaitFifoStateUntilTimeout.constprop.0+0x34>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80023da:	f7fe fd2f 	bl	8000e3c <HAL_GetTick>
 80023de:	eba0 0008 	sub.w	r0, r0, r8
 80023e2:	42a0      	cmp	r0, r4
 80023e4:	d329      	bcc.n	800243a <SPI_WaitFifoStateUntilTimeout.constprop.0+0xb2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80023e6:	682b      	ldr	r3, [r5, #0]
 80023e8:	685a      	ldr	r2, [r3, #4]
 80023ea:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80023ee:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80023f0:	686a      	ldr	r2, [r5, #4]
 80023f2:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 80023f6:	d10a      	bne.n	800240e <SPI_WaitFifoStateUntilTimeout.constprop.0+0x86>
 80023f8:	68aa      	ldr	r2, [r5, #8]
 80023fa:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 80023fe:	d002      	beq.n	8002406 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x7e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002400:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8002404:	d103      	bne.n	800240e <SPI_WaitFifoStateUntilTimeout.constprop.0+0x86>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800240c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800240e:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 8002410:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8002414:	d107      	bne.n	8002426 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x9e>
        {
          SPI_RESET_CRC(hspi);
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800241c:	601a      	str	r2, [r3, #0]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002424:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002426:	2301      	movs	r3, #1
 8002428:	f885 305d 	strb.w	r3, [r5, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800242c:	2300      	movs	r3, #0
 800242e:	f885 305c 	strb.w	r3, [r5, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002432:	2003      	movs	r0, #3
      count--;
    }
  }

  return HAL_OK;
}
 8002434:	b003      	add	sp, #12
 8002436:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (count == 0U)
 800243a:	9a01      	ldr	r2, [sp, #4]
      count--;
 800243c:	9b01      	ldr	r3, [sp, #4]
      if (count == 0U)
 800243e:	2a00      	cmp	r2, #0
      count--;
 8002440:	f103 33ff 	add.w	r3, r3, #4294967295
 8002444:	9301      	str	r3, [sp, #4]
 8002446:	bf08      	it	eq
 8002448:	4614      	moveq	r4, r2
 800244a:	e7b6      	b.n	80023ba <SPI_WaitFifoStateUntilTimeout.constprop.0+0x32>
 800244c:	20000004 	.word	0x20000004

08002450 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002450:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002452:	4613      	mov	r3, r2
{
 8002454:	460d      	mov	r5, r1
 8002456:	4616      	mov	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002458:	460a      	mov	r2, r1
 800245a:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
{
 800245e:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002460:	f7ff ff92 	bl	8002388 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8002464:	b128      	cbz	r0, 8002472 <SPI_EndRxTxTransaction+0x22>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002466:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8002468:	f043 0320 	orr.w	r3, r3, #32
 800246c:	6623      	str	r3, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 800246e:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 8002470:	bd70      	pop	{r4, r5, r6, pc}
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002472:	4632      	mov	r2, r6
 8002474:	4629      	mov	r1, r5
 8002476:	4620      	mov	r0, r4
 8002478:	f7ff ff34 	bl	80022e4 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 800247c:	2800      	cmp	r0, #0
 800247e:	d1f2      	bne.n	8002466 <SPI_EndRxTxTransaction+0x16>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002480:	4633      	mov	r3, r6
 8002482:	462a      	mov	r2, r5
 8002484:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8002488:	4620      	mov	r0, r4
 800248a:	f7ff ff7d 	bl	8002388 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 800248e:	2800      	cmp	r0, #0
 8002490:	d0ee      	beq.n	8002470 <SPI_EndRxTxTransaction+0x20>
 8002492:	e7e8      	b.n	8002466 <SPI_EndRxTxTransaction+0x16>

08002494 <HAL_SPI_Init>:
{
 8002494:	b570      	push	{r4, r5, r6, lr}
  if (hspi == NULL)
 8002496:	4604      	mov	r4, r0
 8002498:	2800      	cmp	r0, #0
 800249a:	d067      	beq.n	800256c <HAL_SPI_Init+0xd8>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800249c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d15d      	bne.n	800255e <HAL_SPI_Init+0xca>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80024a2:	6842      	ldr	r2, [r0, #4]
 80024a4:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 80024a8:	d000      	beq.n	80024ac <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80024aa:	61c3      	str	r3, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024ac:	2300      	movs	r3, #0
 80024ae:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80024b0:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 80024b4:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80024b8:	b923      	cbnz	r3, 80024c4 <HAL_SPI_Init+0x30>
    hspi->Lock = HAL_UNLOCKED;
 80024ba:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c
    HAL_SPI_MspInit(hspi);
 80024be:	4620      	mov	r0, r4
 80024c0:	f7fe fb76 	bl	8000bb0 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 80024c4:	6822      	ldr	r2, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80024c6:	68e0      	ldr	r0, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 80024c8:	2302      	movs	r3, #2
 80024ca:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  __HAL_SPI_DISABLE(hspi);
 80024ce:	6813      	ldr	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80024d0:	f5b0 6fe0 	cmp.w	r0, #1792	@ 0x700
  __HAL_SPI_DISABLE(hspi);
 80024d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80024d8:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80024da:	f04f 0300 	mov.w	r3, #0
 80024de:	d942      	bls.n	8002566 <HAL_SPI_Init+0xd2>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80024e0:	461d      	mov	r5, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80024e2:	f5b0 6f70 	cmp.w	r0, #3840	@ 0xf00
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024e6:	bf18      	it	ne
 80024e8:	62a3      	strne	r3, [r4, #40]	@ 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80024ea:	68a6      	ldr	r6, [r4, #8]
 80024ec:	6863      	ldr	r3, [r4, #4]
 80024ee:	69a1      	ldr	r1, [r4, #24]
 80024f0:	f406 4604 	and.w	r6, r6, #33792	@ 0x8400
 80024f4:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 80024f8:	4333      	orrs	r3, r6
 80024fa:	6926      	ldr	r6, [r4, #16]
 80024fc:	f006 0602 	and.w	r6, r6, #2
 8002500:	4333      	orrs	r3, r6
 8002502:	6966      	ldr	r6, [r4, #20]
 8002504:	f006 0601 	and.w	r6, r6, #1
 8002508:	4333      	orrs	r3, r6
 800250a:	f401 7600 	and.w	r6, r1, #512	@ 0x200
 800250e:	4333      	orrs	r3, r6
 8002510:	69e6      	ldr	r6, [r4, #28]
 8002512:	f006 0638 	and.w	r6, r6, #56	@ 0x38
 8002516:	4333      	orrs	r3, r6
 8002518:	6a26      	ldr	r6, [r4, #32]
 800251a:	f006 0680 	and.w	r6, r6, #128	@ 0x80
 800251e:	4333      	orrs	r3, r6
 8002520:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8002522:	f406 5600 	and.w	r6, r6, #8192	@ 0x2000
 8002526:	4333      	orrs	r3, r6
 8002528:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800252a:	6b66      	ldr	r6, [r4, #52]	@ 0x34
 800252c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800252e:	f006 0608 	and.w	r6, r6, #8
 8002532:	f003 0310 	and.w	r3, r3, #16
 8002536:	f400 6070 	and.w	r0, r0, #3840	@ 0xf00
 800253a:	4333      	orrs	r3, r6
 800253c:	0c09      	lsrs	r1, r1, #16
 800253e:	4303      	orrs	r3, r0
 8002540:	f001 0104 	and.w	r1, r1, #4
 8002544:	430b      	orrs	r3, r1
 8002546:	432b      	orrs	r3, r5
 8002548:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800254a:	69d3      	ldr	r3, [r2, #28]
 800254c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002550:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002552:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8002554:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002556:	6620      	str	r0, [r4, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002558:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
}
 800255c:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800255e:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002560:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002564:	e7a2      	b.n	80024ac <HAL_SPI_Init+0x18>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002566:	f44f 5580 	mov.w	r5, #4096	@ 0x1000
 800256a:	e7bc      	b.n	80024e6 <HAL_SPI_Init+0x52>
    return HAL_ERROR;
 800256c:	2001      	movs	r0, #1
 800256e:	e7f5      	b.n	800255c <HAL_SPI_Init+0xc8>

08002570 <HAL_SPI_Transmit>:
{
 8002570:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002574:	4604      	mov	r4, r0
 8002576:	461f      	mov	r7, r3
 8002578:	460d      	mov	r5, r1
 800257a:	4690      	mov	r8, r2
  tickstart = HAL_GetTick();
 800257c:	f7fe fc5e 	bl	8000e3c <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8002580:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 8002584:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8002586:	4681      	mov	r9, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8002588:	b2d8      	uxtb	r0, r3
 800258a:	f040 80b5 	bne.w	80026f8 <HAL_SPI_Transmit+0x188>
  if ((pData == NULL) || (Size == 0U))
 800258e:	2d00      	cmp	r5, #0
 8002590:	d076      	beq.n	8002680 <HAL_SPI_Transmit+0x110>
 8002592:	f1b8 0f00 	cmp.w	r8, #0
 8002596:	d073      	beq.n	8002680 <HAL_SPI_Transmit+0x110>
  __HAL_LOCK(hspi);
 8002598:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 800259c:	2b01      	cmp	r3, #1
 800259e:	f000 80ab 	beq.w	80026f8 <HAL_SPI_Transmit+0x188>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80025a2:	2303      	movs	r3, #3
 80025a4:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80025a8:	2300      	movs	r3, #0
 80025aa:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->RxISR       = NULL;
 80025ac:	e9c4 3313 	strd	r3, r3, [r4, #76]	@ 0x4c
  hspi->TxXferCount = Size;
 80025b0:	f8a4 803e 	strh.w	r8, [r4, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80025b4:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80025b6:	f8a4 3044 	strh.w	r3, [r4, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80025ba:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80025be:	68a3      	ldr	r3, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 80025c0:	6826      	ldr	r6, [r4, #0]
  __HAL_LOCK(hspi);
 80025c2:	f884 005c 	strb.w	r0, [r4, #92]	@ 0x5c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80025c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80025ca:	63a5      	str	r5, [r4, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80025cc:	f8a4 803c 	strh.w	r8, [r4, #60]	@ 0x3c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80025d0:	d107      	bne.n	80025e2 <HAL_SPI_Transmit+0x72>
    __HAL_SPI_DISABLE(hspi);
 80025d2:	6833      	ldr	r3, [r6, #0]
 80025d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80025d8:	6033      	str	r3, [r6, #0]
    SPI_1LINE_TX(hspi);
 80025da:	6833      	ldr	r3, [r6, #0]
 80025dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025e0:	6033      	str	r3, [r6, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80025e2:	6833      	ldr	r3, [r6, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80025e4:	68e2      	ldr	r2, [r4, #12]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80025e6:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 80025e8:	bf5e      	ittt	pl
 80025ea:	6833      	ldrpl	r3, [r6, #0]
 80025ec:	f043 0340 	orrpl.w	r3, r3, #64	@ 0x40
 80025f0:	6033      	strpl	r3, [r6, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80025f2:	f5b2 6fe0 	cmp.w	r2, #1792	@ 0x700
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025f6:	6863      	ldr	r3, [r4, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80025f8:	d945      	bls.n	8002686 <HAL_SPI_Transmit+0x116>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025fa:	b113      	cbz	r3, 8002602 <HAL_SPI_Transmit+0x92>
 80025fc:	f1b8 0f01 	cmp.w	r8, #1
 8002600:	d107      	bne.n	8002612 <HAL_SPI_Transmit+0xa2>
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002602:	f835 3b02 	ldrh.w	r3, [r5], #2
 8002606:	60f3      	str	r3, [r6, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002608:	63a5      	str	r5, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 800260a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800260c:	3b01      	subs	r3, #1
 800260e:	b29b      	uxth	r3, r3
 8002610:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    while (hspi->TxXferCount > 0U)
 8002612:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8002614:	b29b      	uxth	r3, r3
 8002616:	b9d3      	cbnz	r3, 800264e <HAL_SPI_Transmit+0xde>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002618:	464a      	mov	r2, r9
 800261a:	4639      	mov	r1, r7
 800261c:	4620      	mov	r0, r4
 800261e:	f7ff ff17 	bl	8002450 <SPI_EndRxTxTransaction>
 8002622:	2800      	cmp	r0, #0
 8002624:	d165      	bne.n	80026f2 <HAL_SPI_Transmit+0x182>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002626:	68a3      	ldr	r3, [r4, #8]
 8002628:	b933      	cbnz	r3, 8002638 <HAL_SPI_Transmit+0xc8>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800262a:	9301      	str	r3, [sp, #4]
 800262c:	6823      	ldr	r3, [r4, #0]
 800262e:	68da      	ldr	r2, [r3, #12]
 8002630:	9201      	str	r2, [sp, #4]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	9301      	str	r3, [sp, #4]
 8002636:	9b01      	ldr	r3, [sp, #4]
  hspi->State = HAL_SPI_STATE_READY;
 8002638:	2301      	movs	r3, #1
 800263a:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800263e:	6e20      	ldr	r0, [r4, #96]	@ 0x60
  __HAL_UNLOCK(hspi);
 8002640:	2300      	movs	r3, #0
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002642:	1ac0      	subs	r0, r0, r3
  __HAL_UNLOCK(hspi);
 8002644:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002648:	bf18      	it	ne
 800264a:	2001      	movne	r0, #1
 800264c:	e018      	b.n	8002680 <HAL_SPI_Transmit+0x110>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800264e:	6822      	ldr	r2, [r4, #0]
 8002650:	6893      	ldr	r3, [r2, #8]
 8002652:	079d      	lsls	r5, r3, #30
 8002654:	d505      	bpl.n	8002662 <HAL_SPI_Transmit+0xf2>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002656:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002658:	f833 1b02 	ldrh.w	r1, [r3], #2
 800265c:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800265e:	63a3      	str	r3, [r4, #56]	@ 0x38
 8002660:	e7d3      	b.n	800260a <HAL_SPI_Transmit+0x9a>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002662:	f7fe fbeb 	bl	8000e3c <HAL_GetTick>
 8002666:	eba0 0009 	sub.w	r0, r0, r9
 800266a:	42b8      	cmp	r0, r7
 800266c:	d3d1      	bcc.n	8002612 <HAL_SPI_Transmit+0xa2>
 800266e:	1c78      	adds	r0, r7, #1
 8002670:	d0cf      	beq.n	8002612 <HAL_SPI_Transmit+0xa2>
          hspi->State = HAL_SPI_STATE_READY;
 8002672:	2301      	movs	r3, #1
 8002674:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8002678:	2300      	movs	r3, #0
 800267a:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800267e:	2003      	movs	r0, #3
}
 8002680:	b003      	add	sp, #12
 8002682:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002686:	b113      	cbz	r3, 800268e <HAL_SPI_Transmit+0x11e>
 8002688:	f1b8 0f01 	cmp.w	r8, #1
 800268c:	d113      	bne.n	80026b6 <HAL_SPI_Transmit+0x146>
      if (hspi->TxXferCount > 1U)
 800268e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8002690:	b29b      	uxth	r3, r3
 8002692:	2b01      	cmp	r3, #1
 8002694:	d906      	bls.n	80026a4 <HAL_SPI_Transmit+0x134>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002696:	f835 3b02 	ldrh.w	r3, [r5], #2
 800269a:	60f3      	str	r3, [r6, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800269c:	63a5      	str	r5, [r4, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800269e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80026a0:	3b02      	subs	r3, #2
 80026a2:	e006      	b.n	80026b2 <HAL_SPI_Transmit+0x142>
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80026a4:	782b      	ldrb	r3, [r5, #0]
 80026a6:	7333      	strb	r3, [r6, #12]
        hspi->pTxBuffPtr ++;
 80026a8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80026aa:	3301      	adds	r3, #1
 80026ac:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 80026ae:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80026b0:	3b01      	subs	r3, #1
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    while (hspi->TxXferCount > 0U)
 80026b6:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d0ac      	beq.n	8002618 <HAL_SPI_Transmit+0xa8>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80026be:	6822      	ldr	r2, [r4, #0]
 80026c0:	6893      	ldr	r3, [r2, #8]
 80026c2:	0799      	lsls	r1, r3, #30
 80026c4:	d50c      	bpl.n	80026e0 <HAL_SPI_Transmit+0x170>
        if (hspi->TxXferCount > 1U)
 80026c6:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80026c8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
        if (hspi->TxXferCount > 1U)
 80026ca:	b289      	uxth	r1, r1
 80026cc:	2901      	cmp	r1, #1
 80026ce:	d904      	bls.n	80026da <HAL_SPI_Transmit+0x16a>
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80026d0:	f833 1b02 	ldrh.w	r1, [r3], #2
 80026d4:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80026d6:	63a3      	str	r3, [r4, #56]	@ 0x38
 80026d8:	e7e1      	b.n	800269e <HAL_SPI_Transmit+0x12e>
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 80026de:	e7e3      	b.n	80026a8 <HAL_SPI_Transmit+0x138>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80026e0:	f7fe fbac 	bl	8000e3c <HAL_GetTick>
 80026e4:	eba0 0009 	sub.w	r0, r0, r9
 80026e8:	42b8      	cmp	r0, r7
 80026ea:	d3e4      	bcc.n	80026b6 <HAL_SPI_Transmit+0x146>
 80026ec:	1c7b      	adds	r3, r7, #1
 80026ee:	d0e2      	beq.n	80026b6 <HAL_SPI_Transmit+0x146>
 80026f0:	e7bf      	b.n	8002672 <HAL_SPI_Transmit+0x102>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80026f2:	2320      	movs	r3, #32
 80026f4:	6623      	str	r3, [r4, #96]	@ 0x60
 80026f6:	e796      	b.n	8002626 <HAL_SPI_Transmit+0xb6>
    return HAL_BUSY;
 80026f8:	2002      	movs	r0, #2
 80026fa:	e7c1      	b.n	8002680 <HAL_SPI_Transmit+0x110>

080026fc <HAL_SPI_Transmit_DMA>:
{
 80026fc:	b538      	push	{r3, r4, r5, lr}
  if (hspi->State != HAL_SPI_STATE_READY)
 80026fe:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
 8002702:	2b01      	cmp	r3, #1
{
 8002704:	4604      	mov	r4, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8002706:	b2dd      	uxtb	r5, r3
 8002708:	d173      	bne.n	80027f2 <HAL_SPI_Transmit_DMA+0xf6>
  if ((pData == NULL) || (Size == 0U))
 800270a:	2900      	cmp	r1, #0
 800270c:	d051      	beq.n	80027b2 <HAL_SPI_Transmit_DMA+0xb6>
 800270e:	2a00      	cmp	r2, #0
 8002710:	d04f      	beq.n	80027b2 <HAL_SPI_Transmit_DMA+0xb6>
  __HAL_LOCK(hspi);
 8002712:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 8002716:	2b01      	cmp	r3, #1
 8002718:	d06b      	beq.n	80027f2 <HAL_SPI_Transmit_DMA+0xf6>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800271a:	2303      	movs	r3, #3
 800271c:	f880 305d 	strb.w	r3, [r0, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002720:	2300      	movs	r3, #0
 8002722:	6603      	str	r3, [r0, #96]	@ 0x60
  hspi->RxISR       = NULL;
 8002724:	e9c0 3313 	strd	r3, r3, [r0, #76]	@ 0x4c
  hspi->TxXferCount = Size;
 8002728:	87c2      	strh	r2, [r0, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800272a:	6403      	str	r3, [r0, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800272c:	f8a0 3044 	strh.w	r3, [r0, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8002730:	f8a0 3046 	strh.w	r3, [r0, #70]	@ 0x46
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002734:	6883      	ldr	r3, [r0, #8]
  hspi->TxXferSize  = Size;
 8002736:	8782      	strh	r2, [r0, #60]	@ 0x3c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002738:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
    __HAL_SPI_DISABLE(hspi);
 800273c:	6802      	ldr	r2, [r0, #0]
  __HAL_LOCK(hspi);
 800273e:	f880 505c 	strb.w	r5, [r0, #92]	@ 0x5c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002742:	6381      	str	r1, [r0, #56]	@ 0x38
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002744:	d107      	bne.n	8002756 <HAL_SPI_Transmit_DMA+0x5a>
    __HAL_SPI_DISABLE(hspi);
 8002746:	6813      	ldr	r3, [r2, #0]
 8002748:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800274c:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 800274e:	6813      	ldr	r3, [r2, #0]
 8002750:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002754:	6013      	str	r3, [r2, #0]
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8002756:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8002758:	4b27      	ldr	r3, [pc, #156]	@ (80027f8 <HAL_SPI_Transmit_DMA+0xfc>)
 800275a:	6303      	str	r3, [r0, #48]	@ 0x30
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800275c:	4b27      	ldr	r3, [pc, #156]	@ (80027fc <HAL_SPI_Transmit_DMA+0x100>)
 800275e:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8002760:	4b27      	ldr	r3, [pc, #156]	@ (8002800 <HAL_SPI_Transmit_DMA+0x104>)
 8002762:	6343      	str	r3, [r0, #52]	@ 0x34
  hspi->hdmatx->XferAbortCallback = NULL;
 8002764:	2300      	movs	r3, #0
 8002766:	6383      	str	r3, [r0, #56]	@ 0x38
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8002768:	6853      	ldr	r3, [r2, #4]
 800276a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800276e:	6053      	str	r3, [r2, #4]
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8002770:	68e3      	ldr	r3, [r4, #12]
 8002772:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002776:	d80f      	bhi.n	8002798 <HAL_SPI_Transmit_DMA+0x9c>
 8002778:	6983      	ldr	r3, [r0, #24]
 800277a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800277e:	d10b      	bne.n	8002798 <HAL_SPI_Transmit_DMA+0x9c>
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8002780:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8002782:	f013 0f01 	tst.w	r3, #1
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8002786:	6853      	ldr	r3, [r2, #4]
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8002788:	d115      	bne.n	80027b6 <HAL_SPI_Transmit_DMA+0xba>
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800278a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800278e:	6053      	str	r3, [r2, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8002790:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8002792:	f3c3 034e 	ubfx	r3, r3, #1, #15
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8002796:	87e3      	strh	r3, [r4, #62]	@ 0x3e
                                 hspi->TxXferCount))
 8002798:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800279a:	320c      	adds	r2, #12
 800279c:	b29b      	uxth	r3, r3
 800279e:	f7fe fc7b 	bl	8001098 <HAL_DMA_Start_IT>
 80027a2:	b180      	cbz	r0, 80027c6 <HAL_SPI_Transmit_DMA+0xca>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80027a4:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80027a6:	f043 0310 	orr.w	r3, r3, #16
 80027aa:	6623      	str	r3, [r4, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 80027ac:	2300      	movs	r3, #0
 80027ae:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
}
 80027b2:	4628      	mov	r0, r5
 80027b4:	bd38      	pop	{r3, r4, r5, pc}
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80027b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027ba:	6053      	str	r3, [r2, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80027bc:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80027be:	f3c3 034e 	ubfx	r3, r3, #1, #15
 80027c2:	3301      	adds	r3, #1
 80027c4:	e7e7      	b.n	8002796 <HAL_SPI_Transmit_DMA+0x9a>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80027c6:	6823      	ldr	r3, [r4, #0]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 80027cc:	bf58      	it	pl
 80027ce:	681a      	ldrpl	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 80027d0:	f04f 0500 	mov.w	r5, #0
    __HAL_SPI_ENABLE(hspi);
 80027d4:	bf5c      	itt	pl
 80027d6:	f042 0240 	orrpl.w	r2, r2, #64	@ 0x40
 80027da:	601a      	strpl	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 80027dc:	f884 505c 	strb.w	r5, [r4, #92]	@ 0x5c
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80027e0:	685a      	ldr	r2, [r3, #4]
 80027e2:	f042 0220 	orr.w	r2, r2, #32
 80027e6:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80027e8:	685a      	ldr	r2, [r3, #4]
 80027ea:	f042 0202 	orr.w	r2, r2, #2
 80027ee:	605a      	str	r2, [r3, #4]
  return HAL_OK;
 80027f0:	e7df      	b.n	80027b2 <HAL_SPI_Transmit_DMA+0xb6>
    return HAL_BUSY;
 80027f2:	2502      	movs	r5, #2
 80027f4:	e7dd      	b.n	80027b2 <HAL_SPI_Transmit_DMA+0xb6>
 80027f6:	bf00      	nop
 80027f8:	08002809 	.word	0x08002809
 80027fc:	08002837 	.word	0x08002837
 8002800:	08002815 	.word	0x08002815

08002804 <HAL_SPI_TxCpltCallback>:
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
 8002804:	4770      	bx	lr

08002806 <HAL_SPI_TxHalfCpltCallback>:
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
 8002806:	4770      	bx	lr

08002808 <SPI_DMAHalfTransmitCplt>:
{
 8002808:	b508      	push	{r3, lr}
  HAL_SPI_TxHalfCpltCallback(hspi);
 800280a:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 800280c:	f7ff fffb 	bl	8002806 <HAL_SPI_TxHalfCpltCallback>
}
 8002810:	bd08      	pop	{r3, pc}

08002812 <HAL_SPI_ErrorCallback>:
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
 8002812:	4770      	bx	lr

08002814 <SPI_DMAError>:
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002814:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002816:	6802      	ldr	r2, [r0, #0]
{
 8002818:	b508      	push	{r3, lr}
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800281a:	6853      	ldr	r3, [r2, #4]
 800281c:	f023 0303 	bic.w	r3, r3, #3
 8002820:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002822:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8002824:	f043 0310 	orr.w	r3, r3, #16
 8002828:	6603      	str	r3, [r0, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800282a:	2301      	movs	r3, #1
 800282c:	f880 305d 	strb.w	r3, [r0, #93]	@ 0x5d
  HAL_SPI_ErrorCallback(hspi);
 8002830:	f7ff ffef 	bl	8002812 <HAL_SPI_ErrorCallback>
}
 8002834:	bd08      	pop	{r3, pc}

08002836 <SPI_DMATransmitCplt>:
{
 8002836:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002838:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800283a:	6a84      	ldr	r4, [r0, #40]	@ 0x28
  tickstart = HAL_GetTick();
 800283c:	f7fe fafe 	bl	8000e3c <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8002840:	682b      	ldr	r3, [r5, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	069b      	lsls	r3, r3, #26
  tickstart = HAL_GetTick();
 8002846:	4602      	mov	r2, r0
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8002848:	d426      	bmi.n	8002898 <SPI_DMATransmitCplt+0x62>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800284a:	6823      	ldr	r3, [r4, #0]
 800284c:	6859      	ldr	r1, [r3, #4]
 800284e:	f021 0120 	bic.w	r1, r1, #32
 8002852:	6059      	str	r1, [r3, #4]
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002854:	6859      	ldr	r1, [r3, #4]
 8002856:	f021 0102 	bic.w	r1, r1, #2
 800285a:	6059      	str	r1, [r3, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800285c:	4620      	mov	r0, r4
 800285e:	2164      	movs	r1, #100	@ 0x64
 8002860:	f7ff fdf6 	bl	8002450 <SPI_EndRxTxTransaction>
 8002864:	b118      	cbz	r0, 800286e <SPI_DMATransmitCplt+0x38>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002866:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8002868:	f043 0320 	orr.w	r3, r3, #32
 800286c:	6623      	str	r3, [r4, #96]	@ 0x60
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800286e:	68a3      	ldr	r3, [r4, #8]
 8002870:	b933      	cbnz	r3, 8002880 <SPI_DMATransmitCplt+0x4a>
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002872:	9301      	str	r3, [sp, #4]
 8002874:	6823      	ldr	r3, [r4, #0]
 8002876:	68da      	ldr	r2, [r3, #12]
 8002878:	9201      	str	r2, [sp, #4]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	9301      	str	r3, [sp, #4]
 800287e:	9b01      	ldr	r3, [sp, #4]
    hspi->TxXferCount = 0U;
 8002880:	2300      	movs	r3, #0
 8002882:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8002884:	2301      	movs	r3, #1
 8002886:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800288a:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 800288c:	b123      	cbz	r3, 8002898 <SPI_DMATransmitCplt+0x62>
      HAL_SPI_ErrorCallback(hspi);
 800288e:	4620      	mov	r0, r4
 8002890:	f7ff ffbf 	bl	8002812 <HAL_SPI_ErrorCallback>
}
 8002894:	b003      	add	sp, #12
 8002896:	bd30      	pop	{r4, r5, pc}
  HAL_SPI_TxCpltCallback(hspi);
 8002898:	4620      	mov	r0, r4
 800289a:	f7ff ffb3 	bl	8002804 <HAL_SPI_TxCpltCallback>
 800289e:	e7f9      	b.n	8002894 <SPI_DMATransmitCplt+0x5e>

080028a0 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028a0:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028a2:	6a02      	ldr	r2, [r0, #32]
 80028a4:	f022 0201 	bic.w	r2, r2, #1
 80028a8:	6202      	str	r2, [r0, #32]
{
 80028aa:	b570      	push	{r4, r5, r6, lr}

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028ac:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80028ae:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028b0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80028b2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80028b6:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 80028ba:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80028bc:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80028be:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 80028c2:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80028c4:	4d1f      	ldr	r5, [pc, #124]	@ (8002944 <TIM_OC1_SetConfig+0xa4>)
 80028c6:	42a8      	cmp	r0, r5
 80028c8:	d013      	beq.n	80028f2 <TIM_OC1_SetConfig+0x52>
 80028ca:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 80028ce:	42a8      	cmp	r0, r5
 80028d0:	d00f      	beq.n	80028f2 <TIM_OC1_SetConfig+0x52>
 80028d2:	f505 6540 	add.w	r5, r5, #3072	@ 0xc00
 80028d6:	42a8      	cmp	r0, r5
 80028d8:	d00b      	beq.n	80028f2 <TIM_OC1_SetConfig+0x52>
 80028da:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80028de:	42a8      	cmp	r0, r5
 80028e0:	d007      	beq.n	80028f2 <TIM_OC1_SetConfig+0x52>
 80028e2:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80028e6:	42a8      	cmp	r0, r5
 80028e8:	d003      	beq.n	80028f2 <TIM_OC1_SetConfig+0x52>
 80028ea:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 80028ee:	42a8      	cmp	r0, r5
 80028f0:	d122      	bne.n	8002938 <TIM_OC1_SetConfig+0x98>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80028f2:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80028f4:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80028f8:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028fa:	4d12      	ldr	r5, [pc, #72]	@ (8002944 <TIM_OC1_SetConfig+0xa4>)
 80028fc:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 80028fe:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002902:	d013      	beq.n	800292c <TIM_OC1_SetConfig+0x8c>
 8002904:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 8002908:	42a8      	cmp	r0, r5
 800290a:	d00f      	beq.n	800292c <TIM_OC1_SetConfig+0x8c>
 800290c:	f505 6540 	add.w	r5, r5, #3072	@ 0xc00
 8002910:	42a8      	cmp	r0, r5
 8002912:	d00b      	beq.n	800292c <TIM_OC1_SetConfig+0x8c>
 8002914:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8002918:	42a8      	cmp	r0, r5
 800291a:	d007      	beq.n	800292c <TIM_OC1_SetConfig+0x8c>
 800291c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8002920:	42a8      	cmp	r0, r5
 8002922:	d003      	beq.n	800292c <TIM_OC1_SetConfig+0x8c>
 8002924:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 8002928:	42a8      	cmp	r0, r5
 800292a:	d105      	bne.n	8002938 <TIM_OC1_SetConfig+0x98>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800292c:	f424 7540 	bic.w	r5, r4, #768	@ 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002930:	e9d1 4605 	ldrd	r4, r6, [r1, #20]
 8002934:	4334      	orrs	r4, r6
 8002936:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002938:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800293a:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800293c:	684a      	ldr	r2, [r1, #4]
 800293e:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002940:	6203      	str	r3, [r0, #32]
}
 8002942:	bd70      	pop	{r4, r5, r6, pc}
 8002944:	40012c00 	.word	0x40012c00

08002948 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002948:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800294a:	6a02      	ldr	r2, [r0, #32]
 800294c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002950:	6202      	str	r2, [r0, #32]
{
 8002952:	b570      	push	{r4, r5, r6, lr}

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002954:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002956:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002958:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800295a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800295e:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 8002962:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002964:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8002966:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800296a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800296e:	4d1a      	ldr	r5, [pc, #104]	@ (80029d8 <TIM_OC3_SetConfig+0x90>)
 8002970:	42a8      	cmp	r0, r5
 8002972:	d007      	beq.n	8002984 <TIM_OC3_SetConfig+0x3c>
 8002974:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 8002978:	42a8      	cmp	r0, r5
 800297a:	d003      	beq.n	8002984 <TIM_OC3_SetConfig+0x3c>
 800297c:	f505 55e0 	add.w	r5, r5, #7168	@ 0x1c00
 8002980:	42a8      	cmp	r0, r5
 8002982:	d10d      	bne.n	80029a0 <TIM_OC3_SetConfig+0x58>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002984:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8002986:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800298a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800298e:	4d12      	ldr	r5, [pc, #72]	@ (80029d8 <TIM_OC3_SetConfig+0x90>)
 8002990:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 8002992:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002996:	d012      	beq.n	80029be <TIM_OC3_SetConfig+0x76>
 8002998:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 800299c:	42a8      	cmp	r0, r5
 800299e:	d00e      	beq.n	80029be <TIM_OC3_SetConfig+0x76>
 80029a0:	4d0e      	ldr	r5, [pc, #56]	@ (80029dc <TIM_OC3_SetConfig+0x94>)
 80029a2:	42a8      	cmp	r0, r5
 80029a4:	d00b      	beq.n	80029be <TIM_OC3_SetConfig+0x76>
 80029a6:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80029aa:	42a8      	cmp	r0, r5
 80029ac:	d007      	beq.n	80029be <TIM_OC3_SetConfig+0x76>
 80029ae:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80029b2:	42a8      	cmp	r0, r5
 80029b4:	d003      	beq.n	80029be <TIM_OC3_SetConfig+0x76>
 80029b6:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 80029ba:	42a8      	cmp	r0, r5
 80029bc:	d106      	bne.n	80029cc <TIM_OC3_SetConfig+0x84>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80029be:	f424 5540 	bic.w	r5, r4, #12288	@ 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80029c2:	e9d1 4605 	ldrd	r4, r6, [r1, #20]
 80029c6:	4334      	orrs	r4, r6
 80029c8:	ea45 1404 	orr.w	r4, r5, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029cc:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80029ce:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80029d0:	684a      	ldr	r2, [r1, #4]
 80029d2:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029d4:	6203      	str	r3, [r0, #32]
}
 80029d6:	bd70      	pop	{r4, r5, r6, pc}
 80029d8:	40012c00 	.word	0x40012c00
 80029dc:	40014000 	.word	0x40014000

080029e0 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029e0:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80029e2:	6a02      	ldr	r2, [r0, #32]
 80029e4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80029e8:	6202      	str	r2, [r0, #32]
{
 80029ea:	b570      	push	{r4, r5, r6, lr}

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029ec:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80029ee:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80029f0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80029f2:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 80029f6:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80029fa:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80029fe:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8002a00:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002a04:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8002a08:	4d1a      	ldr	r5, [pc, #104]	@ (8002a74 <TIM_OC4_SetConfig+0x94>)
 8002a0a:	42a8      	cmp	r0, r5
 8002a0c:	d007      	beq.n	8002a1e <TIM_OC4_SetConfig+0x3e>
 8002a0e:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 8002a12:	42a8      	cmp	r0, r5
 8002a14:	d003      	beq.n	8002a1e <TIM_OC4_SetConfig+0x3e>
 8002a16:	f505 55e0 	add.w	r5, r5, #7168	@ 0x1c00
 8002a1a:	42a8      	cmp	r0, r5
 8002a1c:	d10d      	bne.n	8002a3a <TIM_OC4_SetConfig+0x5a>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8002a1e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC4NP;
 8002a20:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8002a24:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a28:	4d12      	ldr	r5, [pc, #72]	@ (8002a74 <TIM_OC4_SetConfig+0x94>)
 8002a2a:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC4NE;
 8002a2c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a30:	d012      	beq.n	8002a58 <TIM_OC4_SetConfig+0x78>
 8002a32:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 8002a36:	42a8      	cmp	r0, r5
 8002a38:	d00e      	beq.n	8002a58 <TIM_OC4_SetConfig+0x78>
 8002a3a:	4d0f      	ldr	r5, [pc, #60]	@ (8002a78 <TIM_OC4_SetConfig+0x98>)
 8002a3c:	42a8      	cmp	r0, r5
 8002a3e:	d00b      	beq.n	8002a58 <TIM_OC4_SetConfig+0x78>
 8002a40:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8002a44:	42a8      	cmp	r0, r5
 8002a46:	d007      	beq.n	8002a58 <TIM_OC4_SetConfig+0x78>
 8002a48:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8002a4c:	42a8      	cmp	r0, r5
 8002a4e:	d003      	beq.n	8002a58 <TIM_OC4_SetConfig+0x78>
 8002a50:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 8002a54:	42a8      	cmp	r0, r5
 8002a56:	d106      	bne.n	8002a66 <TIM_OC4_SetConfig+0x86>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8002a58:	f424 4540 	bic.w	r5, r4, #49152	@ 0xc000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8002a5c:	e9d1 4605 	ldrd	r4, r6, [r1, #20]
 8002a60:	4334      	orrs	r4, r6
 8002a62:	ea45 1484 	orr.w	r4, r5, r4, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a66:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a68:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002a6a:	684a      	ldr	r2, [r1, #4]
 8002a6c:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a6e:	6203      	str	r3, [r0, #32]
}
 8002a70:	bd70      	pop	{r4, r5, r6, pc}
 8002a72:	bf00      	nop
 8002a74:	40012c00 	.word	0x40012c00
 8002a78:	40014000 	.word	0x40014000

08002a7c <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a7c:	6a03      	ldr	r3, [r0, #32]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002a7e:	6a02      	ldr	r2, [r0, #32]
 8002a80:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002a84:	6202      	str	r2, [r0, #32]
{
 8002a86:	b530      	push	{r4, r5, lr}

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a88:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002a8a:	6d02      	ldr	r2, [r0, #80]	@ 0x50

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a8c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002a8e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002a92:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpccmrx |= OC_Config->OCMode;
 8002a96:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002a98:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 8002a9a:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002a9e:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002aa2:	4d11      	ldr	r5, [pc, #68]	@ (8002ae8 <TIM_OC5_SetConfig+0x6c>)
 8002aa4:	42a8      	cmp	r0, r5
 8002aa6:	d013      	beq.n	8002ad0 <TIM_OC5_SetConfig+0x54>
 8002aa8:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 8002aac:	42a8      	cmp	r0, r5
 8002aae:	d00f      	beq.n	8002ad0 <TIM_OC5_SetConfig+0x54>
 8002ab0:	f505 6540 	add.w	r5, r5, #3072	@ 0xc00
 8002ab4:	42a8      	cmp	r0, r5
 8002ab6:	d00b      	beq.n	8002ad0 <TIM_OC5_SetConfig+0x54>
 8002ab8:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8002abc:	42a8      	cmp	r0, r5
 8002abe:	d007      	beq.n	8002ad0 <TIM_OC5_SetConfig+0x54>
 8002ac0:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8002ac4:	42a8      	cmp	r0, r5
 8002ac6:	d003      	beq.n	8002ad0 <TIM_OC5_SetConfig+0x54>
 8002ac8:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 8002acc:	42a8      	cmp	r0, r5
 8002ace:	d104      	bne.n	8002ada <TIM_OC5_SetConfig+0x5e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002ad0:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002ad2:	f424 3480 	bic.w	r4, r4, #65536	@ 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002ad6:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ada:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002adc:	6502      	str	r2, [r0, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002ade:	684a      	ldr	r2, [r1, #4]
 8002ae0:	6482      	str	r2, [r0, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ae2:	6203      	str	r3, [r0, #32]
}
 8002ae4:	bd30      	pop	{r4, r5, pc}
 8002ae6:	bf00      	nop
 8002ae8:	40012c00 	.word	0x40012c00

08002aec <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002aec:	6a03      	ldr	r3, [r0, #32]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002aee:	6a02      	ldr	r2, [r0, #32]
 8002af0:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8002af4:	6202      	str	r2, [r0, #32]
{
 8002af6:	b530      	push	{r4, r5, lr}

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002af8:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002afa:	6d02      	ldr	r2, [r0, #80]	@ 0x50

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002afc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002afe:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8002b02:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b06:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002b0a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002b0c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002b10:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b14:	4d10      	ldr	r5, [pc, #64]	@ (8002b58 <TIM_OC6_SetConfig+0x6c>)
 8002b16:	42a8      	cmp	r0, r5
 8002b18:	d013      	beq.n	8002b42 <TIM_OC6_SetConfig+0x56>
 8002b1a:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 8002b1e:	42a8      	cmp	r0, r5
 8002b20:	d00f      	beq.n	8002b42 <TIM_OC6_SetConfig+0x56>
 8002b22:	f505 6540 	add.w	r5, r5, #3072	@ 0xc00
 8002b26:	42a8      	cmp	r0, r5
 8002b28:	d00b      	beq.n	8002b42 <TIM_OC6_SetConfig+0x56>
 8002b2a:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8002b2e:	42a8      	cmp	r0, r5
 8002b30:	d007      	beq.n	8002b42 <TIM_OC6_SetConfig+0x56>
 8002b32:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8002b36:	42a8      	cmp	r0, r5
 8002b38:	d003      	beq.n	8002b42 <TIM_OC6_SetConfig+0x56>
 8002b3a:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 8002b3e:	42a8      	cmp	r0, r5
 8002b40:	d104      	bne.n	8002b4c <TIM_OC6_SetConfig+0x60>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002b42:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002b44:	f424 2480 	bic.w	r4, r4, #262144	@ 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002b48:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b4c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002b4e:	6502      	str	r2, [r0, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002b50:	684a      	ldr	r2, [r1, #4]
 8002b52:	64c2      	str	r2, [r0, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b54:	6203      	str	r3, [r0, #32]
}
 8002b56:	bd30      	pop	{r4, r5, pc}
 8002b58:	40012c00 	.word	0x40012c00

08002b5c <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 8002b5c:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d12f      	bne.n	8002bc4 <HAL_TIM_Base_Start+0x68>
  htim->State = HAL_TIM_STATE_BUSY;
 8002b64:	2302      	movs	r3, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b66:	4a18      	ldr	r2, [pc, #96]	@ (8002bc8 <HAL_TIM_Base_Start+0x6c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8002b68:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b6c:	6803      	ldr	r3, [r0, #0]
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d01a      	beq.n	8002ba8 <HAL_TIM_Base_Start+0x4c>
 8002b72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b76:	d017      	beq.n	8002ba8 <HAL_TIM_Base_Start+0x4c>
 8002b78:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d013      	beq.n	8002ba8 <HAL_TIM_Base_Start+0x4c>
 8002b80:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d00f      	beq.n	8002ba8 <HAL_TIM_Base_Start+0x4c>
 8002b88:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d00b      	beq.n	8002ba8 <HAL_TIM_Base_Start+0x4c>
 8002b90:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d007      	beq.n	8002ba8 <HAL_TIM_Base_Start+0x4c>
 8002b98:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d003      	beq.n	8002ba8 <HAL_TIM_Base_Start+0x4c>
 8002ba0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d107      	bne.n	8002bb8 <HAL_TIM_Base_Start+0x5c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ba8:	6899      	ldr	r1, [r3, #8]
 8002baa:	4a08      	ldr	r2, [pc, #32]	@ (8002bcc <HAL_TIM_Base_Start+0x70>)
 8002bac:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bae:	2a06      	cmp	r2, #6
 8002bb0:	d006      	beq.n	8002bc0 <HAL_TIM_Base_Start+0x64>
 8002bb2:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8002bb6:	d003      	beq.n	8002bc0 <HAL_TIM_Base_Start+0x64>
      __HAL_TIM_ENABLE(htim);
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	f042 0201 	orr.w	r2, r2, #1
 8002bbe:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002bc0:	2000      	movs	r0, #0
 8002bc2:	4770      	bx	lr
    return HAL_ERROR;
 8002bc4:	2001      	movs	r0, #1
}
 8002bc6:	4770      	bx	lr
 8002bc8:	40012c00 	.word	0x40012c00
 8002bcc:	00010007 	.word	0x00010007

08002bd0 <HAL_TIM_PeriodElapsedCallback>:
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 8002bd0:	4770      	bx	lr

08002bd2 <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 8002bd2:	4770      	bx	lr

08002bd4 <HAL_TIM_IC_CaptureCallback>:
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 8002bd4:	4770      	bx	lr

08002bd6 <HAL_TIM_PWM_PulseFinishedCallback>:
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 8002bd6:	4770      	bx	lr

08002bd8 <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 8002bd8:	4770      	bx	lr

08002bda <HAL_TIM_IRQHandler>:
  uint32_t itsource = htim->Instance->DIER;
 8002bda:	6803      	ldr	r3, [r0, #0]
{
 8002bdc:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 8002bde:	68dd      	ldr	r5, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002be0:	691e      	ldr	r6, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002be2:	07b2      	lsls	r2, r6, #30
{
 8002be4:	4604      	mov	r4, r0
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002be6:	d50e      	bpl.n	8002c06 <HAL_TIM_IRQHandler+0x2c>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002be8:	07a9      	lsls	r1, r5, #30
 8002bea:	d50c      	bpl.n	8002c06 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002bec:	f06f 0202 	mvn.w	r2, #2
 8002bf0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002bf6:	699b      	ldr	r3, [r3, #24]
 8002bf8:	079a      	lsls	r2, r3, #30
 8002bfa:	f000 80a4 	beq.w	8002d46 <HAL_TIM_IRQHandler+0x16c>
          HAL_TIM_IC_CaptureCallback(htim);
 8002bfe:	f7ff ffe9 	bl	8002bd4 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c02:	2300      	movs	r3, #0
 8002c04:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002c06:	0773      	lsls	r3, r6, #29
 8002c08:	d511      	bpl.n	8002c2e <HAL_TIM_IRQHandler+0x54>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002c0a:	0768      	lsls	r0, r5, #29
 8002c0c:	d50f      	bpl.n	8002c2e <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002c0e:	6823      	ldr	r3, [r4, #0]
 8002c10:	f06f 0204 	mvn.w	r2, #4
 8002c14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c16:	2202      	movs	r2, #2
 8002c18:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c1a:	699b      	ldr	r3, [r3, #24]
 8002c1c:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8002c20:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c22:	f000 8096 	beq.w	8002d52 <HAL_TIM_IRQHandler+0x178>
        HAL_TIM_IC_CaptureCallback(htim);
 8002c26:	f7ff ffd5 	bl	8002bd4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002c2e:	0731      	lsls	r1, r6, #28
 8002c30:	d510      	bpl.n	8002c54 <HAL_TIM_IRQHandler+0x7a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002c32:	072a      	lsls	r2, r5, #28
 8002c34:	d50e      	bpl.n	8002c54 <HAL_TIM_IRQHandler+0x7a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002c36:	6823      	ldr	r3, [r4, #0]
 8002c38:	f06f 0208 	mvn.w	r2, #8
 8002c3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c3e:	2204      	movs	r2, #4
 8002c40:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c42:	69db      	ldr	r3, [r3, #28]
 8002c44:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8002c46:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c48:	f000 8089 	beq.w	8002d5e <HAL_TIM_IRQHandler+0x184>
        HAL_TIM_IC_CaptureCallback(htim);
 8002c4c:	f7ff ffc2 	bl	8002bd4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c50:	2300      	movs	r3, #0
 8002c52:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002c54:	06f1      	lsls	r1, r6, #27
 8002c56:	d510      	bpl.n	8002c7a <HAL_TIM_IRQHandler+0xa0>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002c58:	06ea      	lsls	r2, r5, #27
 8002c5a:	d50e      	bpl.n	8002c7a <HAL_TIM_IRQHandler+0xa0>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002c5c:	6823      	ldr	r3, [r4, #0]
 8002c5e:	f06f 0210 	mvn.w	r2, #16
 8002c62:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c64:	2208      	movs	r2, #8
 8002c66:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c68:	69db      	ldr	r3, [r3, #28]
 8002c6a:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8002c6e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c70:	d07b      	beq.n	8002d6a <HAL_TIM_IRQHandler+0x190>
        HAL_TIM_IC_CaptureCallback(htim);
 8002c72:	f7ff ffaf 	bl	8002bd4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c76:	2300      	movs	r3, #0
 8002c78:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002c7a:	07f3      	lsls	r3, r6, #31
 8002c7c:	d508      	bpl.n	8002c90 <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002c7e:	07e8      	lsls	r0, r5, #31
 8002c80:	d506      	bpl.n	8002c90 <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002c82:	6823      	ldr	r3, [r4, #0]
 8002c84:	f06f 0201 	mvn.w	r2, #1
 8002c88:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c8a:	4620      	mov	r0, r4
 8002c8c:	f7ff ffa0 	bl	8002bd0 <HAL_TIM_PeriodElapsedCallback>
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002c90:	f416 5f02 	tst.w	r6, #8320	@ 0x2080
 8002c94:	d008      	beq.n	8002ca8 <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002c96:	0629      	lsls	r1, r5, #24
 8002c98:	d506      	bpl.n	8002ca8 <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002c9a:	6823      	ldr	r3, [r4, #0]
 8002c9c:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8002ca0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002ca2:	4620      	mov	r0, r4
 8002ca4:	f000 fb4d 	bl	8003342 <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002ca8:	05f2      	lsls	r2, r6, #23
 8002caa:	d508      	bpl.n	8002cbe <HAL_TIM_IRQHandler+0xe4>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002cac:	062b      	lsls	r3, r5, #24
 8002cae:	d506      	bpl.n	8002cbe <HAL_TIM_IRQHandler+0xe4>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002cb0:	6823      	ldr	r3, [r4, #0]
 8002cb2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002cb6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8002cb8:	4620      	mov	r0, r4
 8002cba:	f000 fb43 	bl	8003344 <HAL_TIMEx_Break2Callback>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002cbe:	0670      	lsls	r0, r6, #25
 8002cc0:	d508      	bpl.n	8002cd4 <HAL_TIM_IRQHandler+0xfa>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002cc2:	0669      	lsls	r1, r5, #25
 8002cc4:	d506      	bpl.n	8002cd4 <HAL_TIM_IRQHandler+0xfa>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002cc6:	6823      	ldr	r3, [r4, #0]
 8002cc8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002ccc:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002cce:	4620      	mov	r0, r4
 8002cd0:	f7ff ff82 	bl	8002bd8 <HAL_TIM_TriggerCallback>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002cd4:	06b2      	lsls	r2, r6, #26
 8002cd6:	d508      	bpl.n	8002cea <HAL_TIM_IRQHandler+0x110>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002cd8:	06ab      	lsls	r3, r5, #26
 8002cda:	d506      	bpl.n	8002cea <HAL_TIM_IRQHandler+0x110>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002cdc:	6823      	ldr	r3, [r4, #0]
 8002cde:	f06f 0220 	mvn.w	r2, #32
 8002ce2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8002ce4:	4620      	mov	r0, r4
 8002ce6:	f000 fb2b 	bl	8003340 <HAL_TIMEx_CommutCallback>
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8002cea:	02f0      	lsls	r0, r6, #11
 8002cec:	d508      	bpl.n	8002d00 <HAL_TIM_IRQHandler+0x126>
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8002cee:	02e9      	lsls	r1, r5, #11
 8002cf0:	d506      	bpl.n	8002d00 <HAL_TIM_IRQHandler+0x126>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8002cf2:	6823      	ldr	r3, [r4, #0]
 8002cf4:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8002cf8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_EncoderIndexCallback(htim);
 8002cfa:	4620      	mov	r0, r4
 8002cfc:	f000 fb23 	bl	8003346 <HAL_TIMEx_EncoderIndexCallback>
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8002d00:	02b2      	lsls	r2, r6, #10
 8002d02:	d508      	bpl.n	8002d16 <HAL_TIM_IRQHandler+0x13c>
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8002d04:	02ab      	lsls	r3, r5, #10
 8002d06:	d506      	bpl.n	8002d16 <HAL_TIM_IRQHandler+0x13c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8002d08:	6823      	ldr	r3, [r4, #0]
 8002d0a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8002d0e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_DirectionChangeCallback(htim);
 8002d10:	4620      	mov	r0, r4
 8002d12:	f000 fb19 	bl	8003348 <HAL_TIMEx_DirectionChangeCallback>
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8002d16:	0270      	lsls	r0, r6, #9
 8002d18:	d508      	bpl.n	8002d2c <HAL_TIM_IRQHandler+0x152>
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8002d1a:	0269      	lsls	r1, r5, #9
 8002d1c:	d506      	bpl.n	8002d2c <HAL_TIM_IRQHandler+0x152>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8002d1e:	6823      	ldr	r3, [r4, #0]
 8002d20:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8002d24:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_IndexErrorCallback(htim);
 8002d26:	4620      	mov	r0, r4
 8002d28:	f000 fb0f 	bl	800334a <HAL_TIMEx_IndexErrorCallback>
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8002d2c:	0232      	lsls	r2, r6, #8
 8002d2e:	d522      	bpl.n	8002d76 <HAL_TIM_IRQHandler+0x19c>
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8002d30:	022b      	lsls	r3, r5, #8
 8002d32:	d520      	bpl.n	8002d76 <HAL_TIM_IRQHandler+0x19c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8002d34:	6823      	ldr	r3, [r4, #0]
 8002d36:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
      HAL_TIMEx_TransitionErrorCallback(htim);
 8002d3a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8002d3c:	611a      	str	r2, [r3, #16]
}
 8002d3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_TIMEx_TransitionErrorCallback(htim);
 8002d42:	f000 bb03 	b.w	800334c <HAL_TIMEx_TransitionErrorCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d46:	f7ff ff44 	bl	8002bd2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d4a:	4620      	mov	r0, r4
 8002d4c:	f7ff ff43 	bl	8002bd6 <HAL_TIM_PWM_PulseFinishedCallback>
 8002d50:	e757      	b.n	8002c02 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d52:	f7ff ff3e 	bl	8002bd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d56:	4620      	mov	r0, r4
 8002d58:	f7ff ff3d 	bl	8002bd6 <HAL_TIM_PWM_PulseFinishedCallback>
 8002d5c:	e765      	b.n	8002c2a <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d5e:	f7ff ff38 	bl	8002bd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d62:	4620      	mov	r0, r4
 8002d64:	f7ff ff37 	bl	8002bd6 <HAL_TIM_PWM_PulseFinishedCallback>
 8002d68:	e772      	b.n	8002c50 <HAL_TIM_IRQHandler+0x76>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d6a:	f7ff ff32 	bl	8002bd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d6e:	4620      	mov	r0, r4
 8002d70:	f7ff ff31 	bl	8002bd6 <HAL_TIM_PWM_PulseFinishedCallback>
 8002d74:	e77f      	b.n	8002c76 <HAL_TIM_IRQHandler+0x9c>
}
 8002d76:	bd70      	pop	{r4, r5, r6, pc}

08002d78 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d78:	4a39      	ldr	r2, [pc, #228]	@ (8002e60 <TIM_Base_SetConfig+0xe8>)
  tmpcr1 = TIMx->CR1;
 8002d7a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d7c:	4290      	cmp	r0, r2
 8002d7e:	d016      	beq.n	8002dae <TIM_Base_SetConfig+0x36>
 8002d80:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8002d84:	d013      	beq.n	8002dae <TIM_Base_SetConfig+0x36>
 8002d86:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8002d8a:	4290      	cmp	r0, r2
 8002d8c:	d00f      	beq.n	8002dae <TIM_Base_SetConfig+0x36>
 8002d8e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002d92:	4290      	cmp	r0, r2
 8002d94:	d00b      	beq.n	8002dae <TIM_Base_SetConfig+0x36>
 8002d96:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002d9a:	4290      	cmp	r0, r2
 8002d9c:	d007      	beq.n	8002dae <TIM_Base_SetConfig+0x36>
 8002d9e:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 8002da2:	4290      	cmp	r0, r2
 8002da4:	d003      	beq.n	8002dae <TIM_Base_SetConfig+0x36>
 8002da6:	f502 52e0 	add.w	r2, r2, #7168	@ 0x1c00
 8002daa:	4290      	cmp	r0, r2
 8002dac:	d119      	bne.n	8002de2 <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 8002dae:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002db0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8002db4:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002db6:	4a2a      	ldr	r2, [pc, #168]	@ (8002e60 <TIM_Base_SetConfig+0xe8>)
 8002db8:	4290      	cmp	r0, r2
 8002dba:	d021      	beq.n	8002e00 <TIM_Base_SetConfig+0x88>
 8002dbc:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8002dc0:	d01e      	beq.n	8002e00 <TIM_Base_SetConfig+0x88>
 8002dc2:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8002dc6:	4290      	cmp	r0, r2
 8002dc8:	d01a      	beq.n	8002e00 <TIM_Base_SetConfig+0x88>
 8002dca:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002dce:	4290      	cmp	r0, r2
 8002dd0:	d016      	beq.n	8002e00 <TIM_Base_SetConfig+0x88>
 8002dd2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002dd6:	4290      	cmp	r0, r2
 8002dd8:	d012      	beq.n	8002e00 <TIM_Base_SetConfig+0x88>
 8002dda:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 8002dde:	4290      	cmp	r0, r2
 8002de0:	d00e      	beq.n	8002e00 <TIM_Base_SetConfig+0x88>
 8002de2:	4a20      	ldr	r2, [pc, #128]	@ (8002e64 <TIM_Base_SetConfig+0xec>)
 8002de4:	4290      	cmp	r0, r2
 8002de6:	d00b      	beq.n	8002e00 <TIM_Base_SetConfig+0x88>
 8002de8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002dec:	4290      	cmp	r0, r2
 8002dee:	d007      	beq.n	8002e00 <TIM_Base_SetConfig+0x88>
 8002df0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002df4:	4290      	cmp	r0, r2
 8002df6:	d003      	beq.n	8002e00 <TIM_Base_SetConfig+0x88>
 8002df8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002dfc:	4290      	cmp	r0, r2
 8002dfe:	d103      	bne.n	8002e08 <TIM_Base_SetConfig+0x90>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e00:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e06:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e08:	694a      	ldr	r2, [r1, #20]
 8002e0a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002e0e:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002e10:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e12:	688b      	ldr	r3, [r1, #8]
 8002e14:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002e16:	680b      	ldr	r3, [r1, #0]
 8002e18:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e1a:	4b11      	ldr	r3, [pc, #68]	@ (8002e60 <TIM_Base_SetConfig+0xe8>)
 8002e1c:	4298      	cmp	r0, r3
 8002e1e:	d013      	beq.n	8002e48 <TIM_Base_SetConfig+0xd0>
 8002e20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e24:	4298      	cmp	r0, r3
 8002e26:	d00f      	beq.n	8002e48 <TIM_Base_SetConfig+0xd0>
 8002e28:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 8002e2c:	4298      	cmp	r0, r3
 8002e2e:	d00b      	beq.n	8002e48 <TIM_Base_SetConfig+0xd0>
 8002e30:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002e34:	4298      	cmp	r0, r3
 8002e36:	d007      	beq.n	8002e48 <TIM_Base_SetConfig+0xd0>
 8002e38:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002e3c:	4298      	cmp	r0, r3
 8002e3e:	d003      	beq.n	8002e48 <TIM_Base_SetConfig+0xd0>
 8002e40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e44:	4298      	cmp	r0, r3
 8002e46:	d101      	bne.n	8002e4c <TIM_Base_SetConfig+0xd4>
    TIMx->RCR = Structure->RepetitionCounter;
 8002e48:	690b      	ldr	r3, [r1, #16]
 8002e4a:	6303      	str	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002e50:	6903      	ldr	r3, [r0, #16]
 8002e52:	07db      	lsls	r3, r3, #31
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002e54:	bf42      	ittt	mi
 8002e56:	6903      	ldrmi	r3, [r0, #16]
 8002e58:	f023 0301 	bicmi.w	r3, r3, #1
 8002e5c:	6103      	strmi	r3, [r0, #16]
}
 8002e5e:	4770      	bx	lr
 8002e60:	40012c00 	.word	0x40012c00
 8002e64:	40014000 	.word	0x40014000

08002e68 <HAL_TIM_Base_Init>:
{
 8002e68:	b510      	push	{r4, lr}
  if (htim == NULL)
 8002e6a:	4604      	mov	r4, r0
 8002e6c:	b350      	cbz	r0, 8002ec4 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002e6e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8002e72:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8002e76:	b91b      	cbnz	r3, 8002e80 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002e78:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002e7c:	f7fd fef8 	bl	8000c70 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002e80:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e82:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002e84:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e88:	1d21      	adds	r1, r4, #4
 8002e8a:	f7ff ff75 	bl	8002d78 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  return HAL_OK;
 8002e94:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e96:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8002e9a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8002e9e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8002ea2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8002ea6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002eaa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002eae:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8002eb2:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8002eb6:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8002eba:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8002ebe:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 8002ec2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002ec4:	2001      	movs	r0, #1
 8002ec6:	e7fc      	b.n	8002ec2 <HAL_TIM_Base_Init+0x5a>

08002ec8 <HAL_TIM_PWM_Init>:
{
 8002ec8:	b510      	push	{r4, lr}
  if (htim == NULL)
 8002eca:	4604      	mov	r4, r0
 8002ecc:	b350      	cbz	r0, 8002f24 <HAL_TIM_PWM_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002ece:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8002ed2:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8002ed6:	b91b      	cbnz	r3, 8002ee0 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002ed8:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8002edc:	f7fd feb4 	bl	8000c48 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002ee0:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ee2:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002ee4:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ee8:	1d21      	adds	r1, r4, #4
 8002eea:	f7ff ff45 	bl	8002d78 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  return HAL_OK;
 8002ef4:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ef6:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8002efa:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8002efe:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8002f02:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8002f06:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002f0a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f0e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8002f12:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8002f16:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8002f1a:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8002f1e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 8002f22:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002f24:	2001      	movs	r0, #1
 8002f26:	e7fc      	b.n	8002f22 <HAL_TIM_PWM_Init+0x5a>

08002f28 <TIM_OC2_SetConfig>:
  tmpccer = TIMx->CCER;
 8002f28:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f2a:	6a02      	ldr	r2, [r0, #32]
 8002f2c:	f022 0210 	bic.w	r2, r2, #16
 8002f30:	6202      	str	r2, [r0, #32]
{
 8002f32:	b570      	push	{r4, r5, r6, lr}
  tmpcr2 =  TIMx->CR2;
 8002f34:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8002f36:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f38:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002f3a:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8002f3e:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f42:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002f46:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8002f48:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002f4c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002f50:	4d1a      	ldr	r5, [pc, #104]	@ (8002fbc <TIM_OC2_SetConfig+0x94>)
 8002f52:	42a8      	cmp	r0, r5
 8002f54:	d007      	beq.n	8002f66 <TIM_OC2_SetConfig+0x3e>
 8002f56:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 8002f5a:	42a8      	cmp	r0, r5
 8002f5c:	d003      	beq.n	8002f66 <TIM_OC2_SetConfig+0x3e>
 8002f5e:	f505 55e0 	add.w	r5, r5, #7168	@ 0x1c00
 8002f62:	42a8      	cmp	r0, r5
 8002f64:	d10d      	bne.n	8002f82 <TIM_OC2_SetConfig+0x5a>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002f66:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8002f68:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002f6c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f70:	4d12      	ldr	r5, [pc, #72]	@ (8002fbc <TIM_OC2_SetConfig+0x94>)
 8002f72:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 8002f74:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f78:	d012      	beq.n	8002fa0 <TIM_OC2_SetConfig+0x78>
 8002f7a:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 8002f7e:	42a8      	cmp	r0, r5
 8002f80:	d00e      	beq.n	8002fa0 <TIM_OC2_SetConfig+0x78>
 8002f82:	4d0f      	ldr	r5, [pc, #60]	@ (8002fc0 <TIM_OC2_SetConfig+0x98>)
 8002f84:	42a8      	cmp	r0, r5
 8002f86:	d00b      	beq.n	8002fa0 <TIM_OC2_SetConfig+0x78>
 8002f88:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8002f8c:	42a8      	cmp	r0, r5
 8002f8e:	d007      	beq.n	8002fa0 <TIM_OC2_SetConfig+0x78>
 8002f90:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8002f94:	42a8      	cmp	r0, r5
 8002f96:	d003      	beq.n	8002fa0 <TIM_OC2_SetConfig+0x78>
 8002f98:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 8002f9c:	42a8      	cmp	r0, r5
 8002f9e:	d106      	bne.n	8002fae <TIM_OC2_SetConfig+0x86>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002fa0:	f424 6540 	bic.w	r5, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002fa4:	e9d1 4605 	ldrd	r4, r6, [r1, #20]
 8002fa8:	4334      	orrs	r4, r6
 8002faa:	ea45 0484 	orr.w	r4, r5, r4, lsl #2
  TIMx->CR2 = tmpcr2;
 8002fae:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002fb0:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8002fb2:	684a      	ldr	r2, [r1, #4]
 8002fb4:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8002fb6:	6203      	str	r3, [r0, #32]
}
 8002fb8:	bd70      	pop	{r4, r5, r6, pc}
 8002fba:	bf00      	nop
 8002fbc:	40012c00 	.word	0x40012c00
 8002fc0:	40014000 	.word	0x40014000

08002fc4 <HAL_TIM_PWM_ConfigChannel>:
{
 8002fc4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8002fc6:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8002fca:	2b01      	cmp	r3, #1
{
 8002fcc:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8002fce:	d073      	beq.n	80030b8 <HAL_TIM_PWM_ConfigChannel+0xf4>
 8002fd0:	2001      	movs	r0, #1
  switch (Channel)
 8002fd2:	2a0c      	cmp	r2, #12
  __HAL_LOCK(htim);
 8002fd4:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
  switch (Channel)
 8002fd8:	d04e      	beq.n	8003078 <HAL_TIM_PWM_ConfigChannel+0xb4>
 8002fda:	d808      	bhi.n	8002fee <HAL_TIM_PWM_ConfigChannel+0x2a>
 8002fdc:	2a04      	cmp	r2, #4
 8002fde:	d02b      	beq.n	8003038 <HAL_TIM_PWM_ConfigChannel+0x74>
 8002fe0:	2a08      	cmp	r2, #8
 8002fe2:	d039      	beq.n	8003058 <HAL_TIM_PWM_ConfigChannel+0x94>
 8002fe4:	b1ba      	cbz	r2, 8003016 <HAL_TIM_PWM_ConfigChannel+0x52>
  __HAL_UNLOCK(htim);
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8002fec:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 8002fee:	2a10      	cmp	r2, #16
 8002ff0:	d052      	beq.n	8003098 <HAL_TIM_PWM_ConfigChannel+0xd4>
 8002ff2:	2a14      	cmp	r2, #20
 8002ff4:	d1f7      	bne.n	8002fe6 <HAL_TIM_PWM_ConfigChannel+0x22>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002ff6:	6820      	ldr	r0, [r4, #0]
 8002ff8:	f7ff fd78 	bl	8002aec <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002ffc:	6d03      	ldr	r3, [r0, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002ffe:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003000:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003004:	6503      	str	r3, [r0, #80]	@ 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003006:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8003008:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800300c:	6503      	str	r3, [r0, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800300e:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8003010:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003014:	e04e      	b.n	80030b4 <HAL_TIM_PWM_ConfigChannel+0xf0>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003016:	6820      	ldr	r0, [r4, #0]
 8003018:	f7ff fc42 	bl	80028a0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800301c:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800301e:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003020:	f043 0308 	orr.w	r3, r3, #8
 8003024:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003026:	6983      	ldr	r3, [r0, #24]
 8003028:	f023 0304 	bic.w	r3, r3, #4
 800302c:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800302e:	6983      	ldr	r3, [r0, #24]
 8003030:	4313      	orrs	r3, r2
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003032:	6183      	str	r3, [r0, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8003034:	2000      	movs	r0, #0
 8003036:	e7d6      	b.n	8002fe6 <HAL_TIM_PWM_ConfigChannel+0x22>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003038:	6820      	ldr	r0, [r4, #0]
 800303a:	f7ff ff75 	bl	8002f28 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800303e:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003040:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003042:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003046:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003048:	6983      	ldr	r3, [r0, #24]
 800304a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800304e:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003050:	6983      	ldr	r3, [r0, #24]
 8003052:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003056:	e7ec      	b.n	8003032 <HAL_TIM_PWM_ConfigChannel+0x6e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003058:	6820      	ldr	r0, [r4, #0]
 800305a:	f7ff fc75 	bl	8002948 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800305e:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003060:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003062:	f043 0308 	orr.w	r3, r3, #8
 8003066:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003068:	69c3      	ldr	r3, [r0, #28]
 800306a:	f023 0304 	bic.w	r3, r3, #4
 800306e:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003070:	69c3      	ldr	r3, [r0, #28]
 8003072:	4313      	orrs	r3, r2
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003074:	61c3      	str	r3, [r0, #28]
      break;
 8003076:	e7dd      	b.n	8003034 <HAL_TIM_PWM_ConfigChannel+0x70>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003078:	6820      	ldr	r0, [r4, #0]
 800307a:	f7ff fcb1 	bl	80029e0 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800307e:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003080:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003082:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003086:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003088:	69c3      	ldr	r3, [r0, #28]
 800308a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800308e:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003090:	69c3      	ldr	r3, [r0, #28]
 8003092:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003096:	e7ed      	b.n	8003074 <HAL_TIM_PWM_ConfigChannel+0xb0>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003098:	6820      	ldr	r0, [r4, #0]
 800309a:	f7ff fcef 	bl	8002a7c <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800309e:	6d03      	ldr	r3, [r0, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80030a0:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80030a2:	f043 0308 	orr.w	r3, r3, #8
 80030a6:	6503      	str	r3, [r0, #80]	@ 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80030a8:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 80030aa:	f023 0304 	bic.w	r3, r3, #4
 80030ae:	6503      	str	r3, [r0, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80030b0:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 80030b2:	4313      	orrs	r3, r2
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80030b4:	6503      	str	r3, [r0, #80]	@ 0x50
      break;
 80030b6:	e7bd      	b.n	8003034 <HAL_TIM_PWM_ConfigChannel+0x70>
  __HAL_LOCK(htim);
 80030b8:	2002      	movs	r0, #2
 80030ba:	e797      	b.n	8002fec <HAL_TIM_PWM_ConfigChannel+0x28>

080030bc <TIM_CCxChannelCmd>:
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80030bc:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80030be:	f001 011f 	and.w	r1, r1, #31
{
 80030c2:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80030c4:	2401      	movs	r4, #1
 80030c6:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 80030c8:	ea23 0304 	bic.w	r3, r3, r4
 80030cc:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80030ce:	6a03      	ldr	r3, [r0, #32]
 80030d0:	408a      	lsls	r2, r1
 80030d2:	431a      	orrs	r2, r3
 80030d4:	6202      	str	r2, [r0, #32]
}
 80030d6:	bd10      	pop	{r4, pc}

080030d8 <HAL_TIM_OC_Start>:
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80030d8:	2908      	cmp	r1, #8
{
 80030da:	b508      	push	{r3, lr}
 80030dc:	d018      	beq.n	8003110 <HAL_TIM_OC_Start+0x38>
 80030de:	d805      	bhi.n	80030ec <HAL_TIM_OC_Start+0x14>
 80030e0:	b159      	cbz	r1, 80030fa <HAL_TIM_OC_Start+0x22>
 80030e2:	2904      	cmp	r1, #4
 80030e4:	d011      	beq.n	800310a <HAL_TIM_OC_Start+0x32>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80030e6:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 80030ea:	e008      	b.n	80030fe <HAL_TIM_OC_Start+0x26>
 80030ec:	290c      	cmp	r1, #12
 80030ee:	d012      	beq.n	8003116 <HAL_TIM_OC_Start+0x3e>
 80030f0:	2910      	cmp	r1, #16
 80030f2:	d1f8      	bne.n	80030e6 <HAL_TIM_OC_Start+0xe>
 80030f4:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 80030f8:	e001      	b.n	80030fe <HAL_TIM_OC_Start+0x26>
 80030fa:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 80030fe:	3b01      	subs	r3, #1
 8003100:	bf18      	it	ne
 8003102:	2301      	movne	r3, #1
 8003104:	b153      	cbz	r3, 800311c <HAL_TIM_OC_Start+0x44>
    return HAL_ERROR;
 8003106:	2001      	movs	r0, #1
 8003108:	e041      	b.n	800318e <HAL_TIM_OC_Start+0xb6>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800310a:	f890 303f 	ldrb.w	r3, [r0, #63]	@ 0x3f
 800310e:	e7f6      	b.n	80030fe <HAL_TIM_OC_Start+0x26>
 8003110:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8003114:	e7f3      	b.n	80030fe <HAL_TIM_OC_Start+0x26>
 8003116:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800311a:	e7f0      	b.n	80030fe <HAL_TIM_OC_Start+0x26>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800311c:	2908      	cmp	r1, #8
 800311e:	f04f 0302 	mov.w	r3, #2
 8003122:	d038      	beq.n	8003196 <HAL_TIM_OC_Start+0xbe>
 8003124:	d806      	bhi.n	8003134 <HAL_TIM_OC_Start+0x5c>
 8003126:	b161      	cbz	r1, 8003142 <HAL_TIM_OC_Start+0x6a>
 8003128:	2904      	cmp	r1, #4
 800312a:	d031      	beq.n	8003190 <HAL_TIM_OC_Start+0xb8>
 800312c:	2302      	movs	r3, #2
 800312e:	f880 3043 	strb.w	r3, [r0, #67]	@ 0x43
 8003132:	e008      	b.n	8003146 <HAL_TIM_OC_Start+0x6e>
 8003134:	290c      	cmp	r1, #12
 8003136:	d031      	beq.n	800319c <HAL_TIM_OC_Start+0xc4>
 8003138:	2910      	cmp	r1, #16
 800313a:	d1f7      	bne.n	800312c <HAL_TIM_OC_Start+0x54>
 800313c:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
 8003140:	e001      	b.n	8003146 <HAL_TIM_OC_Start+0x6e>
 8003142:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003146:	6800      	ldr	r0, [r0, #0]
 8003148:	2201      	movs	r2, #1
 800314a:	f7ff ffb7 	bl	80030bc <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800314e:	4b29      	ldr	r3, [pc, #164]	@ (80031f4 <HAL_TIM_OC_Start+0x11c>)
 8003150:	4298      	cmp	r0, r3
 8003152:	d026      	beq.n	80031a2 <HAL_TIM_OC_Start+0xca>
 8003154:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003158:	4298      	cmp	r0, r3
 800315a:	d022      	beq.n	80031a2 <HAL_TIM_OC_Start+0xca>
 800315c:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 8003160:	4298      	cmp	r0, r3
 8003162:	d01e      	beq.n	80031a2 <HAL_TIM_OC_Start+0xca>
 8003164:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003168:	4298      	cmp	r0, r3
 800316a:	d01a      	beq.n	80031a2 <HAL_TIM_OC_Start+0xca>
 800316c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003170:	4298      	cmp	r0, r3
 8003172:	d016      	beq.n	80031a2 <HAL_TIM_OC_Start+0xca>
 8003174:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003178:	4298      	cmp	r0, r3
 800317a:	d012      	beq.n	80031a2 <HAL_TIM_OC_Start+0xca>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800317c:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8003180:	d117      	bne.n	80031b2 <HAL_TIM_OC_Start+0xda>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003182:	6882      	ldr	r2, [r0, #8]
 8003184:	4b1c      	ldr	r3, [pc, #112]	@ (80031f8 <HAL_TIM_OC_Start+0x120>)
 8003186:	4013      	ands	r3, r2
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003188:	2b06      	cmp	r3, #6
 800318a:	d12e      	bne.n	80031ea <HAL_TIM_OC_Start+0x112>
  return HAL_OK;
 800318c:	2000      	movs	r0, #0
}
 800318e:	bd08      	pop	{r3, pc}
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003190:	f880 303f 	strb.w	r3, [r0, #63]	@ 0x3f
 8003194:	e7d7      	b.n	8003146 <HAL_TIM_OC_Start+0x6e>
 8003196:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 800319a:	e7d4      	b.n	8003146 <HAL_TIM_OC_Start+0x6e>
 800319c:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
 80031a0:	e7d1      	b.n	8003146 <HAL_TIM_OC_Start+0x6e>
    __HAL_TIM_MOE_ENABLE(htim);
 80031a2:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80031a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80031a8:	6443      	str	r3, [r0, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031aa:	4b12      	ldr	r3, [pc, #72]	@ (80031f4 <HAL_TIM_OC_Start+0x11c>)
 80031ac:	4298      	cmp	r0, r3
 80031ae:	d1e5      	bne.n	800317c <HAL_TIM_OC_Start+0xa4>
 80031b0:	e7e7      	b.n	8003182 <HAL_TIM_OC_Start+0xaa>
 80031b2:	4b12      	ldr	r3, [pc, #72]	@ (80031fc <HAL_TIM_OC_Start+0x124>)
 80031b4:	4298      	cmp	r0, r3
 80031b6:	d0e4      	beq.n	8003182 <HAL_TIM_OC_Start+0xaa>
 80031b8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80031bc:	4298      	cmp	r0, r3
 80031be:	d0e0      	beq.n	8003182 <HAL_TIM_OC_Start+0xaa>
 80031c0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80031c4:	4298      	cmp	r0, r3
 80031c6:	d0dc      	beq.n	8003182 <HAL_TIM_OC_Start+0xaa>
 80031c8:	f503 3394 	add.w	r3, r3, #75776	@ 0x12800
 80031cc:	4298      	cmp	r0, r3
 80031ce:	d0d8      	beq.n	8003182 <HAL_TIM_OC_Start+0xaa>
 80031d0:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 80031d4:	4298      	cmp	r0, r3
 80031d6:	d0d4      	beq.n	8003182 <HAL_TIM_OC_Start+0xaa>
 80031d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80031dc:	4298      	cmp	r0, r3
 80031de:	d0d0      	beq.n	8003182 <HAL_TIM_OC_Start+0xaa>
      __HAL_TIM_ENABLE(htim);
 80031e0:	6803      	ldr	r3, [r0, #0]
 80031e2:	f043 0301 	orr.w	r3, r3, #1
 80031e6:	6003      	str	r3, [r0, #0]
 80031e8:	e7d0      	b.n	800318c <HAL_TIM_OC_Start+0xb4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031ee:	d1f7      	bne.n	80031e0 <HAL_TIM_OC_Start+0x108>
 80031f0:	e7cc      	b.n	800318c <HAL_TIM_OC_Start+0xb4>
 80031f2:	bf00      	nop
 80031f4:	40012c00 	.word	0x40012c00
 80031f8:	00010007 	.word	0x00010007
 80031fc:	40000400 	.word	0x40000400

08003200 <HAL_TIM_PWM_Start>:
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
 8003200:	f7ff bf6a 	b.w	80030d8 <HAL_TIM_OC_Start>

08003204 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003204:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003206:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800320a:	2b01      	cmp	r3, #1
{
 800320c:	4604      	mov	r4, r0
 800320e:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8003212:	d043      	beq.n	800329c <HAL_TIMEx_MasterConfigSynchronization+0x98>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003214:	6823      	ldr	r3, [r4, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003216:	4d22      	ldr	r5, [pc, #136]	@ (80032a0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8003218:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800321c:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 800321e:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8003220:	6898      	ldr	r0, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003222:	d007      	beq.n	8003234 <HAL_TIMEx_MasterConfigSynchronization+0x30>
 8003224:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 8003228:	42ab      	cmp	r3, r5
 800322a:	d003      	beq.n	8003234 <HAL_TIMEx_MasterConfigSynchronization+0x30>
 800322c:	f505 55e0 	add.w	r5, r5, #7168	@ 0x1c00
 8003230:	42ab      	cmp	r3, r5
 8003232:	d103      	bne.n	800323c <HAL_TIMEx_MasterConfigSynchronization+0x38>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003234:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003236:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800323a:	432a      	orrs	r2, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800323c:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800323e:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 8003242:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003246:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003248:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800324a:	4a15      	ldr	r2, [pc, #84]	@ (80032a0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d01a      	beq.n	8003286 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8003250:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003254:	d017      	beq.n	8003286 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8003256:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 800325a:	4293      	cmp	r3, r2
 800325c:	d013      	beq.n	8003286 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800325e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003262:	4293      	cmp	r3, r2
 8003264:	d00f      	beq.n	8003286 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8003266:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800326a:	4293      	cmp	r3, r2
 800326c:	d00b      	beq.n	8003286 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800326e:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 8003272:	4293      	cmp	r3, r2
 8003274:	d007      	beq.n	8003286 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8003276:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 800327a:	4293      	cmp	r3, r2
 800327c:	d003      	beq.n	8003286 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800327e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003282:	4293      	cmp	r3, r2
 8003284:	d104      	bne.n	8003290 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003286:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003288:	f020 0280 	bic.w	r2, r0, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800328c:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800328e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003290:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8003292:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003294:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8003298:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c

  return HAL_OK;
}
 800329c:	bd30      	pop	{r4, r5, pc}
 800329e:	bf00      	nop
 80032a0:	40012c00 	.word	0x40012c00

080032a4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80032a4:	b510      	push	{r4, lr}
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80032a6:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80032aa:	2b01      	cmp	r3, #1
{
 80032ac:	4602      	mov	r2, r0
  __HAL_LOCK(htim);
 80032ae:	d043      	beq.n	8003338 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80032b0:	68cb      	ldr	r3, [r1, #12]
 80032b2:	6888      	ldr	r0, [r1, #8]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80032b4:	4c21      	ldr	r4, [pc, #132]	@ (800333c <HAL_TIMEx_ConfigBreakDeadTime+0x98>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80032b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032ba:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80032bc:	6848      	ldr	r0, [r1, #4]
 80032be:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80032c2:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80032c4:	6808      	ldr	r0, [r1, #0]
 80032c6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80032ca:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80032cc:	6908      	ldr	r0, [r1, #16]
 80032ce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80032d2:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80032d4:	6948      	ldr	r0, [r1, #20]
 80032d6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80032da:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80032dc:	6b08      	ldr	r0, [r1, #48]	@ 0x30
 80032de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80032e2:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80032e4:	6988      	ldr	r0, [r1, #24]
 80032e6:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 80032ea:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80032ee:	69c8      	ldr	r0, [r1, #28]
 80032f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80032f4:	4303      	orrs	r3, r0
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80032f6:	6810      	ldr	r0, [r2, #0]
 80032f8:	42a0      	cmp	r0, r4
 80032fa:	d007      	beq.n	800330c <HAL_TIMEx_ConfigBreakDeadTime+0x68>
 80032fc:	f504 6400 	add.w	r4, r4, #2048	@ 0x800
 8003300:	42a0      	cmp	r0, r4
 8003302:	d003      	beq.n	800330c <HAL_TIMEx_ConfigBreakDeadTime+0x68>
 8003304:	f504 54e0 	add.w	r4, r4, #7168	@ 0x1c00
 8003308:	42a0      	cmp	r0, r4
 800330a:	d110      	bne.n	800332e <HAL_TIMEx_ConfigBreakDeadTime+0x8a>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800330c:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 800330e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003312:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003316:	6a0c      	ldr	r4, [r1, #32]
 8003318:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800331c:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800331e:	6a4c      	ldr	r4, [r1, #36]	@ 0x24
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8003320:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003322:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8003326:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8003328:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800332c:	430b      	orrs	r3, r1
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800332e:	6443      	str	r3, [r0, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003330:	2000      	movs	r0, #0
 8003332:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c

  return HAL_OK;
}
 8003336:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 8003338:	2002      	movs	r0, #2
 800333a:	e7fc      	b.n	8003336 <HAL_TIMEx_ConfigBreakDeadTime+0x92>
 800333c:	40012c00 	.word	0x40012c00

08003340 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8003340:	4770      	bx	lr

08003342 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 8003342:	4770      	bx	lr

08003344 <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 8003344:	4770      	bx	lr

08003346 <HAL_TIMEx_EncoderIndexCallback>:
/**
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
 8003346:	4770      	bx	lr

08003348 <HAL_TIMEx_DirectionChangeCallback>:
/**
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
 8003348:	4770      	bx	lr

0800334a <HAL_TIMEx_IndexErrorCallback>:
/**
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
 800334a:	4770      	bx	lr

0800334c <HAL_TIMEx_TransitionErrorCallback>:
/**
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
 800334c:	4770      	bx	lr

0800334e <memset>:
 800334e:	4402      	add	r2, r0
 8003350:	4603      	mov	r3, r0
 8003352:	4293      	cmp	r3, r2
 8003354:	d100      	bne.n	8003358 <memset+0xa>
 8003356:	4770      	bx	lr
 8003358:	f803 1b01 	strb.w	r1, [r3], #1
 800335c:	e7f9      	b.n	8003352 <memset+0x4>
	...

08003360 <__libc_init_array>:
 8003360:	b570      	push	{r4, r5, r6, lr}
 8003362:	4d0d      	ldr	r5, [pc, #52]	@ (8003398 <__libc_init_array+0x38>)
 8003364:	4c0d      	ldr	r4, [pc, #52]	@ (800339c <__libc_init_array+0x3c>)
 8003366:	1b64      	subs	r4, r4, r5
 8003368:	10a4      	asrs	r4, r4, #2
 800336a:	2600      	movs	r6, #0
 800336c:	42a6      	cmp	r6, r4
 800336e:	d109      	bne.n	8003384 <__libc_init_array+0x24>
 8003370:	4d0b      	ldr	r5, [pc, #44]	@ (80033a0 <__libc_init_array+0x40>)
 8003372:	4c0c      	ldr	r4, [pc, #48]	@ (80033a4 <__libc_init_array+0x44>)
 8003374:	f000 f818 	bl	80033a8 <_init>
 8003378:	1b64      	subs	r4, r4, r5
 800337a:	10a4      	asrs	r4, r4, #2
 800337c:	2600      	movs	r6, #0
 800337e:	42a6      	cmp	r6, r4
 8003380:	d105      	bne.n	800338e <__libc_init_array+0x2e>
 8003382:	bd70      	pop	{r4, r5, r6, pc}
 8003384:	f855 3b04 	ldr.w	r3, [r5], #4
 8003388:	4798      	blx	r3
 800338a:	3601      	adds	r6, #1
 800338c:	e7ee      	b.n	800336c <__libc_init_array+0xc>
 800338e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003392:	4798      	blx	r3
 8003394:	3601      	adds	r6, #1
 8003396:	e7f2      	b.n	800337e <__libc_init_array+0x1e>
 8003398:	080033f4 	.word	0x080033f4
 800339c:	080033f4 	.word	0x080033f4
 80033a0:	080033f4 	.word	0x080033f4
 80033a4:	080033f8 	.word	0x080033f8

080033a8 <_init>:
 80033a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033aa:	bf00      	nop
 80033ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033ae:	bc08      	pop	{r3}
 80033b0:	469e      	mov	lr, r3
 80033b2:	4770      	bx	lr

080033b4 <_fini>:
 80033b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033b6:	bf00      	nop
 80033b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033ba:	bc08      	pop	{r3}
 80033bc:	469e      	mov	lr, r3
 80033be:	4770      	bx	lr
